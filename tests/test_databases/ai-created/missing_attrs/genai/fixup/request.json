[
    {
        "role": "user",
        "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"
    },
    {
        "role": "user",
        "content": "{\"models\": [{\"classname\": \"Customer\", \"code\": \"class Customer(Base):\\n    \\\"\\\"\\\"\\n    description: Table to store customer details.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'customers'\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String)\\n    email = Column(String, unique=True)\\n    phone_number = Column(String)\\n    address = Column(String)\\n    balance = Column(DECIMAL)\\n    credit_limit = Column(DECIMAL)\\n    unpaid_order_total = Column(DECIMAL)\", \"sqlite_create\": \"CREATE TABLE customers (\\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\\n    name TEXT,\\n    email TEXT UNIQUE,\\n    phone_number TEXT,\\n    address TEXT,\\n    balance DECIMAL,\\n    credit_limit DECIMAL,\\n    unpaid_order_total DECIMAL\\n);\", \"description\": \"Table to store customer details.\", \"name\": \"customers\"}, {\"classname\": \"Order\", \"code\": \"class Order(Base):\\n    \\\"\\\"\\\"\\n    description: Table to store order details, with a notes field included.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'orders'\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    customer_id = Column(Integer, ForeignKey('customers.id'))\\n    order_date = Column(DateTime)\\n    notes = Column(Text)  # Field for additional notes\\n    amount_total = Column(DECIMAL)\\n    item_count = Column(Integer)\\n\", \"sqlite_create\": \"CREATE TABLE orders (\\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\\n    customer_id INTEGER REFERENCES customers(id),\\n    order_date DATETIME,\\n    notes TEXT,\\n    amount_total DECIMAL,\\n    item_count INTEGER\\n);\", \"description\": \"Table to store order details, with a notes field included.\", \"name\": \"orders\"}, {\"classname\": \"Item\", \"code\": \"class Item(Base):\\n    \\\"\\\"\\\"\\n    description: Table to store individual items that are linked to orders.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'items'\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    order_id = Column(Integer, ForeignKey('orders.id'))\\n    product_id = Column(Integer, ForeignKey('products.id'))\\n    quantity = Column(Integer)\\n    unit_price = Column(DECIMAL)\\n    amount = Column(DECIMAL)  # Calculated as quantity * unit_price\\n\", \"sqlite_create\": \"CREATE TABLE items (\\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\\n    order_id INTEGER REFERENCES orders(id),\\n    product_id INTEGER REFERENCES products(id),\\n    quantity INTEGER,\\n    unit_price DECIMAL,\\n    amount DECIMAL\\n);\", \"description\": \"Table to store individual items that are linked to orders.\", \"name\": \"items\"}, {\"classname\": \"Product\", \"code\": \"class Product(Base):\\n    \\\"\\\"\\\"\\n    description: Table to store product details.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'products'\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String)\\n    description = Column(String)\\n    price = Column(DECIMAL)\\n\", \"sqlite_create\": \"CREATE TABLE products (\\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\\n    name TEXT,\\n    description TEXT,\\n    price DECIMAL\\n);\", \"description\": \"Table to store product details.\", \"name\": \"products\"}], \"test_data_rows\": [{\"test_data_row_variable\": \"customer_1\", \"code\": \"customer_1 = Customer(name=\\\"Alice Smith\\\", email=\\\"alice.smith@example.com\\\", phone_number=\\\"123-456-7890\\\", address=\\\"123 Elm Street\\\", balance=500, credit_limit=1000, unpaid_order_total=0)\"}, {\"test_data_row_variable\": \"customer_2\", \"code\": \"customer_2 = Customer(name=\\\"Bob Brown\\\", email=\\\"bob.brown@example.com\\\", phone_number=\\\"234-567-8901\\\", address=\\\"456 Oak Avenue\\\", balance=300, credit_limit=500, unpaid_order_total=0)\"}, {\"test_data_row_variable\": \"customer_3\", \"code\": \"customer_3 = Customer(name=\\\"Charlie Johnson\\\", email=\\\"charlie.johnson@example.com\\\", phone_number=\\\"345-678-9012\\\", address=\\\"789 Pine Road\\\", balance=150, credit_limit=400, unpaid_order_total=0)\"}, {\"test_data_row_variable\": \"customer_4\", \"code\": \"customer_4 = Customer(name=\\\"Diana Gonzalez\\\", email=\\\"diana.gonzalez@example.com\\\", phone_number=\\\"456-789-0123\\\", address=\\\"321 Maple Court\\\", balance=50, credit_limit=300, unpaid_order_total=0)\"}, {\"test_data_row_variable\": \"order_1\", \"code\": \"order_1 = Order(customer_id=1, order_date=date(2023, 9, 20), notes=\\\"Leave package at back door.\\\", amount_total=1999.98, item_count=2)\"}, {\"test_data_row_variable\": \"order_2\", \"code\": \"order_2 = Order(customer_id=2, order_date=date(2023, 9, 21), notes=\\\"Urgent delivery.\\\", amount_total=199.99, item_count=1)\"}, {\"test_data_row_variable\": \"order_3\", \"code\": \"order_3 = Order(customer_id=3, order_date=date(2023, 9, 22), notes=\\\"Gift wrap this order.\\\", amount_total=2249.97, item_count=3)\"}, {\"test_data_row_variable\": \"order_4\", \"code\": \"order_4 = Order(customer_id=4, order_date=date(2023, 9, 23), notes=\\\"Deliver between 9-11 AM.\\\", amount_total=99.99, item_count=1)\"}, {\"test_data_row_variable\": \"product_1\", \"code\": \"product_1 = Product(name=\\\"Laptop\\\", description=\\\"15-inch display, 256GB SSD\\\", price=999.99)\"}, {\"test_data_row_variable\": \"product_2\", \"code\": \"product_2 = Product(name=\\\"Headphones\\\", description=\\\"Noise-canceling, over-ear\\\", price=199.99)\"}, {\"test_data_row_variable\": \"product_3\", \"code\": \"product_3 = Product(name=\\\"Smartphone\\\", description=\\\"Unlocked, 128GB storage\\\", price=749.99)\"}, {\"test_data_row_variable\": \"product_4\", \"code\": \"product_4 = Product(name=\\\"Coffee Maker\\\", description=\\\"Automatic, with built-in grinder\\\", price=99.99)\"}, {\"test_data_row_variable\": \"item_1\", \"code\": \"item_1 = Item(order_id=1, product_id=1, quantity=2, unit_price=999.99, amount=1999.98)\"}, {\"test_data_row_variable\": \"item_2\", \"code\": \"item_2 = Item(order_id=2, product_id=2, quantity=1, unit_price=199.99, amount=199.99)\"}, {\"test_data_row_variable\": \"item_3\", \"code\": \"item_3 = Item(order_id=3, product_id=3, quantity=3, unit_price=749.99, amount=2249.97)\"}, {\"test_data_row_variable\": \"item_4\", \"code\": \"item_4 = Item(order_id=4, product_id=4, quantity=1, unit_price=99.99, amount=99.99)\"}], \"rules\": [{\"name\": \"Customer Balance Constraint\", \"description\": \"Check that Customer's balance does not exceed the credit limit\", \"use_case\": \"To ensure customers manage their accounts responsibly and do not exceed their credit limit.\", \"entity\": \"Customer\", \"code\": \"Rule.constraint(validate=Customer,\\n                    as_condition=lambda row: row.unpaid_order_total <= row.credit_limit,\\n                    error_msg=\\\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\\\")\"}, {\"name\": \"Unpaid Orders Sum\", \"description\": \"Calculate total unpaid orders for each customer\", \"use_case\": \"To provide insights on customer debts and manage receivables.\", \"entity\": \"Customer\", \"code\": \"Rule.sum(derive=Customer.unpaid_order_total,\\n    as_sum_of=Order.amount_total,\\n    where=lambda row: row.date_shipped is None)\"}, {\"name\": \"Order Amount Total Calculation\", \"description\": \"Calculate total amount for each order based on items\", \"use_case\": \"To keep track of the total revenue generated by orders.\", \"entity\": \"Order\", \"code\": \"Rule.sum(derive=Order.amount_total,\\n    as_sum_of=Item.amount)\"}, {\"name\": \"Item Amount Calculation\", \"description\": \"Calculate item amount based on quantity and unit price\", \"use_case\": \"To ensure that the item amount accurately reflects the quantity purchased and price.\", \"entity\": \"Item\", \"code\": \"Rule.formula(derive=Item.amount,\\n    as_expression=lambda row: row.quantity * row.unit_price)\"}, {\"name\": \"Copy item price from product price\", \"description\": \"The Item's unit_price is a copy from the Product's price.\", \"use_case\": \"To ensure the item price is always reflective of the current product price.\", \"entity\": \"Item\", \"code\": \"Rule.copy(derive=Item.unit_price, from_parent=Product.price)\"}]}"
    },
    {
        "role": "user",
        "content": "\n\n        Update the Data Model and Test Data to ensure that:\n        - The Data Model includes every column referenced in rules\n        - Every column referenced in rules is properly initialized in the test data\n        "
    }
]