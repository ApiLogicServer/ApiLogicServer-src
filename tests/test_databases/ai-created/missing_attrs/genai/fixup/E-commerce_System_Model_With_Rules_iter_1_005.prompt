Update the prior response - be sure not to lose classes and test data already created.

Use SQLAlchemy to create a sqlite database named system/genai/temp/create_db_models.sqlite, to

[
    {
        "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.price)",
        "description": "The Item's unit_price is a copy from the Product's price.",
        "name": "Copy item price from product price",
        "use_case": "To ensure the item price is always reflective of the current product price."
    },
    {
        "code": "Rule.constraint(validate=Customer,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")",
        "description": "Check that Customer's balance does not exceed the credit limit",
        "name": "Customer Balance Constraint",
        "use_case": "To ensure customers manage their accounts responsibly and do not exceed their credit limit."
    },
    {
        "code": "Rule.sum(derive=Customer.unpaid_order_total,\n    as_sum_of=Order.amount_total,\n    where=lambda row: row.date_shipped is None) ",
        "description": "Calculate total unpaid orders for each customer",
        "name": "Unpaid Orders Sum",
        "use_case": "To provide insights on customer debts and manage receivables."
    },
    {
        "code": "Rule.sum(derive=Order.amount_total,\n    as_sum_of=Item.amount) ",
        "description": "Calculate total amount for each order based on items",
        "name": "Order Amount Total Calculation",
        "use_case": "To keep track of the total revenue generated by orders."
    },
    {
        "code": "Rule.formula(derive=Item.amount,\n    as_expression=lambda row: row.quantity * row.unit_price) ",
        "description": "Calculate item amount based on quantity and unit price",
        "name": "Item Amount Calculation",
        "use_case": "To ensure that the item amount accurately reflects the quantity purchased and price."
    }
].

Hints: use autonum keys (for all tables - including for link/join/junction/intersection tables), allow nulls, foreign keys, no check constraints.

Be sure to create classes, never tables.

If you create sum, count or formula Logic Bank rules, then you MUST create a corresponding column in the data model.

Remember that SQLite DateTime type only accepts Python datetime and date objects as input, 
this means you can not enter string attributes where a date or datetime object is expected.

Don't install additional packages.
Don't use the faker pip package.

When creating SQLAlchemy data model classes, follow these guidelines carefully:
* Use foreign key columns instead of relationship names for the data.  
* Do not specify nullable unless explicitly specified.
* Do not use unique unless explicitly specified.
* For each data model class, create a docstring describing the table, prefixed with 'description: '. 
* Do not use Float unless explicitly specified.
* Generate the classes ONLY.
* Do NOT generate imports.
* Do NOT generate connect statements.
* Do NOT generate engines.

Create 4 rows of test data for each table, and follow these guidelines carefully:
* Create separate objects for each test data row, not in arrays. 
* Be sure to initialize derived attributes for test data rows - including all sums and counts, but do not rely on Logic Bank,
and do not generate db.execute statements.
* Do not create arrays of test data.
* Do not create a function to load test data.  
* Do not print the test data. 
* Use double quotes " for strings.
* For test data, format dates as date(year, month, day).

<responseFormat>

class Rule(BaseModel):

    name: str

    description: str

    use_case: str # specified use case or requirement name (use 'General' if missing)

    entity: str # the entity being constrained or derived

    code: str # logicbank rule code

    

class Model(BaseModel):

    classname: str

    code: str # sqlalchemy model code

    sqlite_create: str # sqlite create table statement

    description: str

    name: str



class TestDataRow(BaseModel):

    test_data_row_variable: str  # the Python test data row variable

    code: str  # Python code to create a test data row instance



class WGResult(BaseModel):  # must match system/genai/prompt_inserts/response_format.prompt

    # response: str # result

    models : List[Model] # list of sqlalchemy classes in the response

    rules : List[Rule] # list rule declarations

    test_data: str

    test_data_rows: List[TestDataRow]  # list of test data rows

    test_data_sqlite: str # test data as sqlite INSERT statements

    name: str  # suggest a short name for the project



Format the response as a WGResult.



</responseFormat>
