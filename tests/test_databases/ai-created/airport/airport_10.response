{
    "models": [
        {
            "classname": "Airport",
            "code": "class Airport(Base):\n    \"\"\"description: This class represents the airport details.\"\"\"\n\n    __tablename__ = 'airports'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    city = Column(String, nullable=False)\n    country = Column(String, nullable=False)",
            "description": "This class represents the airport details.",
            "name": "Airport"
        },
        {
            "classname": "Airline",
            "code": "class Airline(Base):\n    \"\"\"description: This class stores airline information.\"\"\"\n\n    __tablename__ = 'airlines'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    country = Column(String, nullable=False)",
            "description": "This class stores airline information.",
            "name": "Airline"
        },
        {
            "classname": "Flight",
            "code": "class Flight(Base):\n    \"\"\"description: This class contains flight details.\"\"\"\n\n    __tablename__ = 'flights'\n\n    id = Column(Integer, primary_key=True)\n    flight_number = Column(String, nullable=False)\n    departure_airport_id = Column(Integer, ForeignKey('airports.id'), nullable=False)\n    arrival_airport_id = Column(Integer, ForeignKey('airports.id'), nullable=False)\n    departure_date = Column(DateTime, nullable=False)\n    arrival_date = Column(DateTime, nullable=False)\n    airline_id = Column(Integer, ForeignKey('airlines.id'), nullable=False)",
            "description": "This class contains flight details.",
            "name": "Flight"
        },
        {
            "classname": "Passenger",
            "code": "class Passenger(Base):\n    \"\"\"description: This class holds the passenger information.\"\"\"\n\n    __tablename__ = 'passengers'\n\n    id = Column(Integer, primary_key=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    date_of_birth = Column(Date, nullable=False)\n    nationality = Column(String, nullable=False)",
            "description": "This class holds the passenger information.",
            "name": "Passenger"
        },
        {
            "classname": "Ticket",
            "code": "class Ticket(Base):\n    \"\"\"description: This class represents the ticket information for passengers.\"\"\"\n\n    __tablename__ = 'tickets'\n\n    id = Column(Integer, primary_key=True)\n    flight_id = Column(Integer, ForeignKey('flights.id'), nullable=False)\n    passenger_id = Column(Integer, ForeignKey('passengers.id'), nullable=False)\n    seat_number = Column(String, nullable=False)\n    booking_date = Column(DateTime, nullable=False)",
            "description": "This class represents the ticket information for passengers.",
            "name": "Ticket"
        },
        {
            "classname": "Luggage",
            "code": "class Luggage(Base):\n    \"\"\"description: This class manages the luggage details for passengers.\"\"\"\n\n    __tablename__ = 'luggage'\n\n    id = Column(Integer, primary_key=True)\n    weight = Column(Float, nullable=False)\n    ticket_id = Column(Integer, ForeignKey('tickets.id'), nullable=False)",
            "description": "This class manages the luggage details for passengers.",
            "name": "Luggage"
        },
        {
            "classname": "Gate",
            "code": "class Gate(Base):\n    \"\"\"description: This class manages gate assignments for flights.\"\"\"\n\n    __tablename__ = 'gates'\n\n    id = Column(Integer, primary_key=True)\n    gate_number = Column(String, nullable=False)\n    terminal = Column(String, nullable=False)",
            "description": "This class manages gate assignments for flights.",
            "name": "Gate"
        },
        {
            "classname": "GateAssignment",
            "code": "class GateAssignment(Base):\n    \"\"\"description: This class assigns flights to gates.\"\"\"\n\n    __tablename__ = 'gate_assignments'\n\n    id = Column(Integer, primary_key=True)\n    flight_id = Column(Integer, ForeignKey('flights.id'), nullable=False)\n    gate_id = Column(Integer, ForeignKey('gates.id'), nullable=False)\n    scheduled_time = Column(DateTime, nullable=False)",
            "description": "This class assigns flights to gates.",
            "name": "GateAssignment"
        },
        {
            "classname": "FlightCrew",
            "code": "class FlightCrew(Base):\n    \"\"\"description: This class contains information about flight crew members.\"\"\"\n\n    __tablename__ = 'flight_crews'\n\n    id = Column(Integer, primary_key=True)\n    first_name = Column(String, nullable=False)\n    last_name = Column(String, nullable=False)\n    position = Column(String, nullable=False)",
            "description": "This class contains information about flight crew members.",
            "name": "FlightCrew"
        },
        {
            "classname": "FlightCrewAssignment",
            "code": "class FlightCrewAssignment(Base):\n    \"\"\"description: This class assigns crew members to flights.\"\"\"\n\n    __tablename__ = 'flight_crew_assignments'\n\n    id = Column(Integer, primary_key=True)\n    flight_id = Column(Integer, ForeignKey('flights.id'), nullable=False)\n    crew_id = Column(Integer, ForeignKey('flight_crews.id'), nullable=False)",
            "description": "This class assigns crew members to flights.",
            "name": "FlightCrewAssignment"
        }
    ],
    "rules": [
        {
            "name": "Customer Balance Sum",
            "description": "Calculate the total balance for a Customer as the sum of unshipped orders.",
            "code": "Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Order Total Sum",
            "description": "Calculate the total amount for an order as the sum of all its item amounts.",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Item Amount Formula",
            "description": "Calculate the amount for an item as the product of its quantity and unit price.",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Copy Item Unit Price",
            "description": "Copy the unit price from the Product to the Item.",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)"
        },
        {
            "name": "Balance Constraint",
            "description": "Ensure the customer balance does not exceed their credit limit.",
            "code": "Rule.constraint(validate=CustomerAccount, as_condition=lambda row: row.balance <= row.credit_limit, error_msg='Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})')"
        }
    ],
    "test_data": "from datetime import datetime, date\n\n# Airports\nairport1 = Airport(name='Heathrow', city='London', country='UK')\nairport2 = Airport(name='JFK', city='New York City', country='USA')\n\n# Airlines\nairline1 = Airline(name='British Airways', country='UK')\nairline2 = Airline(name='Delta Airlines', country='USA')\n\n# Flights\nflight1 = Flight(flight_number='BA178', departure_airport_id=1, arrival_airport_id=2, departure_date=datetime(2023, 11, 25, 18, 0), arrival_date=datetime(2023, 11, 25, 21, 0), airline_id=1)\n\n# Passengers\npassenger1 = Passenger(first_name='John', last_name='Doe', date_of_birth=date(1985, 4, 23), nationality='USA')\n\n# Tickets\nticket1 = Ticket(flight_id=1, passenger_id=1, seat_number='1A', booking_date=datetime(2023, 11, 10))\n\n# Luggage\nluggage1 = Luggage(weight=23.5, ticket_id=1)\n\n# Gates\ngate1 = Gate(gate_number='A1', terminal='T1')\n\n# Gate Assignments\ngate_assignment1 = GateAssignment(flight_id=1, gate_id=1, scheduled_time=datetime(2023, 11, 25, 17, 0))\n\n# Flight Crew\ncrew1 = FlightCrew(first_name='Jane', last_name='Smith', position='Pilot')\n\n# Flight Crew Assignments\ncrew_assignment1 = FlightCrewAssignment(flight_id=1, crew_id=1)",
    "name": "AirportManagement"
}