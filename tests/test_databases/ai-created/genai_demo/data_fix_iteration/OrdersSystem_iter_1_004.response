{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    \"\"\"description: Represents a customer with their balance and credit limit.\"\"\"\n    __tablename__ = 'customer'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    balance = Column(Float, nullable=False, default=0.0)\n    credit_limit = Column(Float, nullable=False)",
            "description": "Represents a customer with their balance and credit limit.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    \"\"\"description: Represents a customer's order with notes and total amount.\"\"\"\n    __tablename__ = 'order'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    customer_id = Column(Integer, ForeignKey('customer.id'))\n    date_shipped = Column(DateTime)\n    amount_total = Column(Float, nullable=False, default=0.0)\n    notes = Column(String)",
            "description": "Represents a customer's order with notes and total amount.",
            "name": "Order"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    \"\"\"description: Represents an item in an order, with calculated amount and copied unit price.\"\"\"\n    __tablename__ = 'item'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(Integer, ForeignKey('order.id'))\n    product_id = Column(Integer, ForeignKey('product.id'))\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Float, nullable=False)\n    amount = Column(Float, nullable=False, default=0.0)",
            "description": "Represents an item in an order, with calculated amount and copied unit price.",
            "name": "Item"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    \"\"\"description: Represents a product with a defined unit price.\"\"\"\n    __tablename__ = 'product'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    unit_price = Column(Float, nullable=False)",
            "description": "Represents a product with a defined unit price.",
            "name": "Product"
        }
    ],
    "rules": [
        {
            "name": "Rule for Customer balance from Orders",
            "description": "Sum the orders amount_total for a customer where the date_shipped is null to derive the customer's balance.",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Rule for Order total from Items",
            "description": "Sum the item amounts to derive the order's amount_total.",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Rule for Item amount calculation",
            "description": "Calculate the item amount as the product of quantity and unit price.",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Rule for Item unit price copy",
            "description": "Copy the unit price from the associated product to the item.",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)"
        },
        {
            "name": "Constraint on Customer balance",
            "description": "Ensure the customer's balance does not exceed their credit limit.",
            "code": "Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        }
    ],
    "test_data": "# Sample Test Data\n\n# Customer\ncustomer1 = Customer(id=1, name='John Doe', balance=0.0, credit_limit=5000.0)\ncustomer2 = Customer(id=2, name='Jane Smith', balance=0.0, credit_limit=2000.0)\n\n# Product\nproduct1 = Product(id=1, name='Widget', unit_price=20.0)\nproduct2 = Product(id=2, name='Gadget', unit_price=10.0)\n\n# Order\norder1 = Order(id=1, customer_id=1, date_shipped=None, amount_total=0.0, notes='Urgent')\norder2 = Order(id=2, customer_id=1, date_shipped=date(2023,10,1), amount_total=0.0, notes='Standard')\norder3 = Order(id=3, customer_id=2, date_shipped=None, amount_total=0.0, notes='Express')\n\n# Item\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=5, unit_price=20.0, amount=100.0)\nitem2 = Item(id=2, order_id=1, product_id=2, quantity=10, unit_price=10.0, amount=100.0)\nitem3 = Item(id=3, order_id=2, product_id=1, quantity=3, unit_price=20.0, amount=60.0)\nitem4 = Item(id=4, order_id=3, product_id=2, quantity=8, unit_price=10.0, amount=80.0)",
    "name": "OrdersSystem"
}