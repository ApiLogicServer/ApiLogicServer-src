Creation tests
==============

cd ~/dev/ApiLogicServer/tests/creation_tests   # docker databases must be running
sh create-install.sh venv  # rebuilds the venv
# follow directions to activate and pip install

run each script below, verify app and swagger

caution: SqlServer url depends on install of pyodbc (18 requires &Encrypt=no)


    pip
    ===

    sh create-servers.sh create go # rebuilds ApiLogicProject, classicmodels [if arg2: postgres, sqlserver, sqlserver-types]
    
    then, to test the servers (same cmd window)...
        
        $ # using that venv....
        $ pushd ../../../../dev/servers/install/ApiLogicServer
        $ cd <each project>
        $ python api_logic_server_run.py
        $ popd

    pyodbc is not installed by default, so
        sqlserver fails - you must install it per instructions from sh create-install.sh
        postgres/mysql logs many errors on start, retrieves data, but updates fail



    docker
    ======

    (at cd ~/dev/ApiLogicServer/tests/creation_tests)
    sh create-dockers.sh go [all]
    # copy/paste the "run this in docker: sh /localhost/docker-commands.sh"
    # should see the following projects in ~/dev/servers/install/ApiLogicServer/dockers:
        ApiLogicServer chinook  classicmodels	docker-commands.sh  postgres  sakila  sqlserver

    then, in Docker terminal, for <each dockers project>...
        cd /localhost/<each dockers project>
        python api_logic_server_run.py

    and, verify that it works in vscode
        exit the docker container
        cd ~/dev/servers/install/ApiLogicServer/dockers
        code ApiLogicServer


    exit the docker container


Logic - Sample
==============

open project
    open vsc in /Users/val/dev/servers/install/ApiLogicServer/ApiLogicProject
    prepare the venv
        python -m venv venv; source venv/bin/activate; pip install -r requirements.txt
Run Launch-Config: ApiLogicServer
Run Launch-Config: Behave Run
Run Launch-Config: Behave Logic Report
Run Launch-Config: Basic Server Test
cd test/basic
sh server_test.sh go


Rebuild
=======

cd ~/dev/ApiLogicServer/tests/rebuild_tests  # after creation tests - uses install/ApiLogicServer/venv
sh rebuild_tests.sh go  # creates ApiLogicProject, rebuild-from-database, rebuild-from-model

#   think ok (??): sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) near "ALTER": syntax error


Logic - Allocation
==================

cd ~/dev/ApiLogicServer/tests/allocation_test  # runs from dev env (no venv)
sh setup_allocation.sh create  # creates/starts server, then follow directions below to run test...

open another cmd window...
cd ~/dev/servers/install/ApiLogicServer/Allocation/test  # ../../../servers/install/ApiLogicServer/Allocation/test
sh test.sh  # verifies tests/results.txt, console should say pass (no behave test)
# stop server


Platforms
=========

Create, test admin + swagger, Behave:

    Windows: ApiLogicServer, for pip and docker

    Linux: ApiLogicServer

    Codespaces


