{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Airport\",\n            \"code\": \"class Airport(Base):\\n    \\\"\\\"\\\"description: Stores information about airports.\\\"\\\"\\\"\\n\\n    __tablename__ = 'airport'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n    city = Column(String, nullable=False)\\n    country = Column(String, nullable=False)\",\n            \"description\": \"Stores information about airports.\",\n            \"name\": \"Airport\"\n        },\n        {\n            \"classname\": \"Airplane\",\n            \"code\": \"class Airplane(Base):\\n    \\\"\\\"\\\"description: Contains details about airplanes.\\\"\\\"\\\"\\n\\n    __tablename__ = 'airplane'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    model = Column(String, nullable=False)\\n    seating_capacity = Column(Integer, nullable=False)\",\n            \"description\": \"Contains details about airplanes.\",\n            \"name\": \"Airplane\"\n        },\n        {\n            \"classname\": \"Flight\",\n            \"code\": \"class Flight(Base):\\n    \\\"\\\"\\\"description: Represents individual flights.\\\"\\\"\\\"\\n\\n    __tablename__ = 'flight'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    number = Column(String, nullable=False)\\n    departure_time = Column(DateTime, nullable=False)\\n    arrival_time = Column(DateTime, nullable=False)\\n    origin_airport_id = Column(Integer, ForeignKey('airport.id'), nullable=False)\\n    destination_airport_id = Column(Integer, ForeignKey('airport.id'), nullable=False)\\n    airplane_id = Column(Integer, ForeignKey('airplane.id'), nullable=False)\\n    passenger_count = Column(Integer, nullable=False)\",\n            \"description\": \"Represents individual flights.\",\n            \"name\": \"Flight\"\n        },\n        {\n            \"classname\": \"Passenger\",\n            \"code\": \"class Passenger(Base):\\n    \\\"\\\"\\\"description: Stores passenger information.\\\"\\\"\\\"\\n\\n    __tablename__ = 'passenger'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n    contact_information = Column(String, nullable=False)\",\n            \"description\": \"Stores passenger information.\",\n            \"name\": \"Passenger\"\n        },\n        {\n            \"classname\": \"FlightPassenger\",\n            \"code\": \"class FlightPassenger(Base):\\n    \\\"\\\"\\\"description: Junction table to associate passengers with flights.\\\"\\\"\\\"\\n\\n    __tablename__ = 'flight_passenger'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    flight_id = Column(Integer, ForeignKey('flight.id'), nullable=False)\\n    passenger_id = Column(Integer, ForeignKey('passenger.id'), nullable=False)\",\n            \"description\": \"Junction table to associate passengers with flights.\",\n            \"name\": \"FlightPassenger\"\n        },\n        {\n            \"classname\": \"Airline\",\n            \"code\": \"class Airline(Base):\\n    \\\"\\\"\\\"description: Represents airlines.\\\"\\\"\\\"\\n\\n    __tablename__ = 'airline'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\",\n            \"description\": \"Represents airlines.\",\n            \"name\": \"Airline\"\n        },\n        {\n            \"classname\": \"AirportFacility\",\n            \"code\": \"class AirportFacility(Base):\\n    \\\"\\\"\\\"description: Facilities available at airports.\\\"\\\"\\\"\\n\\n    __tablename__ = 'airport_facility'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    airport_id = Column(Integer, ForeignKey('airport.id'))\\n    facility_name = Column(String, nullable=False)\",\n            \"description\": \"Facilities available at airports.\",\n            \"name\": \"AirportFacility\"\n        },\n        {\n            \"classname\": \"Pilot\",\n            \"code\": \"class Pilot(Base):\\n    \\\"\\\"\\\"description: Information about pilots.\\\"\\\"\\\"\\n\\n    __tablename__ = 'pilot'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n    license_number = Column(String, nullable=False)\\n    airline_id = Column(Integer, ForeignKey('airline.id'))\",\n            \"description\": \"Information about pilots.\",\n            \"name\": \"Pilot\"\n        },\n        {\n            \"classname\": \"FlightCrew\",\n            \"code\": \"class FlightCrew(Base):\\n    \\\"\\\"\\\"description: Crew assigned to flights.\\\"\\\"\\\"\\n\\n    __tablename__ = 'flight_crew'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    flight_id = Column(Integer, ForeignKey('flight.id'))\\n    pilot_id = Column(Integer, ForeignKey('pilot.id'))\",\n            \"description\": \"Crew assigned to flights.\",\n            \"name\": \"FlightCrew\"\n        },\n        {\n            \"classname\": \"Ticket\",\n            \"code\": \"class Ticket(Base):\\n    \\\"\\\"\\\"description: Ticket details for a flight.\\\"\\\"\\\"\\n\\n    __tablename__ = 'ticket'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    flight_id = Column(Integer, ForeignKey('flight.id'))\\n    passenger_id = Column(Integer, ForeignKey('passenger.id'))\\n    seat_number = Column(String, nullable=False)\\n    price = Column(Integer, nullable=False)\",\n            \"description\": \"Ticket details for a flight.\",\n            \"name\": \"Ticket\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Passenger Count Rule\",\n            \"description\": \"Ensure that the number of passengers in a flight does not exceed the airplane's seating capacity.\",\n            \"use_case\": \"A flight's passengers must be less than its airplane's seating capacity.\",\n            \"code\": \"Rule.count(derive=Flight.passenger_count, as_count_of=FlightPassenger)\\nRule.constraint(validate=Flight,\\n    as_condition=lambda row: row.passenger_count <= max(0, row.airplane.seating_capacity),\\n    error_msg=\\\"Flight passenger count ({row.passenger_count}) exceeds airplane capacity ({row.airplane.seating_capacity})\\\")\"\n        }\n    ],\n    \"test_data\": \"# Airport Test Data\\nairport1 = Airport(name='JFK International', city='New York', country='USA')\\nairport2 = Airport(name='LAX International', city='Los Angeles', country='USA')\\nairport3 = Airport(name='Heathrow', city='London', country='UK')\\nairport4 = Airport(name='Changi', city='Singapore', country='Singapore')\\n\\n# Airplane Test Data\\nairplane1 = Airplane(model='Boeing 737', seating_capacity=180)\\nairplane2 = Airplane(model='Airbus A320', seating_capacity=160)\\nairplane3 = Airplane(model='Boeing 777', seating_capacity=300)\\nairplane4 = Airplane(model='Airbus A380', seating_capacity=500)\\n\\n# Flight Test Data\\nflight1 = Flight(number='AA101', departure_time=date(2024, 1, 15), arrival_time=date(2024, 1, 16), origin_airport_id=1, destination_airport_id=2, airplane_id=1, passenger_count=150)\\nflight2 = Flight(number='BA202', departure_time=date(2024, 2, 20), arrival_time=date(2024, 2, 21), origin_airport_id=3, destination_airport_id=1, airplane_id=2, passenger_count=120)\\nflight3 = Flight(number='DL303', departure_time=date(2024, 3, 5), arrival_time=date(2024, 3, 6), origin_airport_id=2, destination_airport_id=4, airplane_id=3, passenger_count=250)\\nflight4 = Flight(number='UA404', departure_time=date(2024, 4, 10), arrival_time=date(2024, 4, 11), origin_airport_id=4, destination_airport_id=3, airplane_id=4, passenger_count=450)\\n\\n# Passenger Test Data\\npassenger1 = Passenger(name='John Doe', contact_information='john@example.com')\\npassenger2 = Passenger(name='Jane Smith', contact_information='jane@example.com')\\npassenger3 = Passenger(name='Sam Brown', contact_information='sam@example.com')\\npassenger4 = Passenger(name='Lucy Green', contact_information='lucy@example.com')\\n\\n# FlightPassenger Test Data\\nflight_passenger1 = FlightPassenger(flight_id=1, passenger_id=1)\\nflight_passenger2 = FlightPassenger(flight_id=1, passenger_id=2)\\nflight_passenger3 = FlightPassenger(flight_id=2, passenger_id=3)\\nflight_passenger4 = FlightPassenger(flight_id=3, passenger_id=4)\\n\\n# Airline Test Data\\nairline1 = Airline(name='American Airlines')\\nairline2 = Airline(name='British Airways')\\nairline3 = Airline(name='Delta Airlines')\\nairline4 = Airline(name='United Airlines')\\n\\n# AirportFacility Test Data\\nairport_facility1 = AirportFacility(airport_id=1, facility_name='Duty-Free Shop')\\nairport_facility2 = AirportFacility(airport_id=2, facility_name='Lounge')\\nairport_facility3 = AirportFacility(airport_id=3, facility_name='WiFi')\\nairport_facility4 = AirportFacility(airport_id=4, facility_name='Transport Services')\\n\\n# Pilot Test Data\\npilot1 = Pilot(name='Captain Smith', license_number='LIC12345', airline_id=1)\\npilot2 = Pilot(name='Captain Johnson', license_number='LIC54321', airline_id=2)\\npilot3 = Pilot(name='Captain White', license_number='LIC11223', airline_id=3)\\npilot4 = Pilot(name='Captain Black', license_number='LIC22113', airline_id=4)\\n\\n# FlightCrew Test Data\\nflight_crew1 = FlightCrew(flight_id=1, pilot_id=1)\\nflight_crew2 = FlightCrew(flight_id=2, pilot_id=2)\\nflight_crew3 = FlightCrew(flight_id=3, pilot_id=3)\\nflight_crew4 = FlightCrew(flight_id=4, pilot_id=4)\\n\\n# Ticket Test Data\\nticket1 = Ticket(flight_id=1, passenger_id=1, seat_number='12A', price=200)\\nticket2 = Ticket(flight_id=1, passenger_id=2, seat_number='12B', price=200)\\nticket3 = Ticket(flight_id=2, passenger_id=3, seat_number='14A', price=300)\\nticket4 = Ticket(flight_id=3, passenger_id=4, seat_number='16A', price=400)\",\n    \"name\": \"AirportManagementSystem\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Department\",\n            \"code\": \"class Department(Base):\\n    \\\"\\\"\\\"description: Departments manage budget allocations for Employees.\\\"\\\"\\\"\\n\\n    __tablename__ = 'departments'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n    budget = Column(Integer, nullable=False)\\n    total_salary = Column(Integer, nullable=False, default=0)  # Derived attribute for Logic Bank rule\",\n            \"description\": \"Departments manage budget allocations for Employees.\",\n            \"name\": \"Department\"\n        },\n        {\n            \"classname\": \"Employee\",\n            \"code\": \"class Employee(Base):\\n    \\\"\\\"\\\"description: Employees work under Departments and have associated salaries.\\\"\\\"\\\"\\n\\n    __tablename__ = 'employees'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n    salary = Column(Integer, nullable=False)\\n    department_id = Column(Integer, ForeignKey('departments.id'), nullable=False)\",\n            \"description\": \"Employees work under Departments and have associated salaries.\",\n            \"name\": \"Employee\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Sum Rule for Employee Salaries\",\n            \"description\": \"Derive the total salary of a department as the sum of all its employees' salaries.\",\n            \"use_case\": \"Sum of employee salaries for a department.\",\n            \"code\": \"Rule.sum(derive=Department.total_salary, as_sum_of=Employee.salary, child_role_name='employees')\"\n        },\n        {\n            \"name\": \"Constraint Rule for Department Budget\",\n            \"description\": \"Ensure that the sum of employee salaries does not exceed department budget.\",\n            \"use_case\": \"Budget enforcement for departments.\",\n            \"code\": \"Rule.constraint(validate=Department, as_condition=lambda row: row.total_salary <= row.budget, error_msg=\\\"Department's total salary ({row.total_salary}) exceeds budget ({row.budget})\\\")\"\n        }\n    ],\n    \"test_data\": \"# Test data creation\\nfrom datetime import date\\n\\n# Create Department instances\\n\\ndepartment1 = Department(name=\\\"HR\\\", budget=100000, total_salary=75000)\\ndepartment2 = Department(name=\\\"IT\\\", budget=200000, total_salary=150000)\\ndepartment3 = Department(name=\\\"Finance\\\", budget=120000, total_salary=100000)\\ndepartment4 = Department(name=\\\"Marketing\\\", budget=90000, total_salary=30000)\\n\\n# Create Employee instances\\n\\nemployee1 = Employee(name=\\\"Alice\\\", salary=25000, department_id=1)\\nemployee2 = Employee(name=\\\"Bob\\\", salary=50000, department_id=1)\\nemployee3 = Employee(name=\\\"Charlie\\\", salary=75000, department_id=2)\\nemployee4 = Employee(name=\\\"David\\\", salary=75000, department_id=2)\\n\\nemployee5 = Employee(name=\\\"Eve\\\", salary=50000, department_id=3)\\nemployee6 = Employee(name=\\\"Frank\\\", salary=50000, department_id=3)\\nemployee7 = Employee(name=\\\"Grace\\\", salary=15000, department_id=4)\\nemployee8 = Employee(name=\\\"Heidi\\\", salary=15000, department_id=4)\",\n    \"name\": \"DepartmentEmployeeSystem\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Customer\",\n            \"code\": \"from sqlalchemy import Column, Integer, String, Numeric\\nfrom sqlalchemy.orm import declarative_base\\n\\nBase = declarative_base()\\n\\nclass Customer(Base):\\n    \\\"\\\"\\\"description: Table to store customer information, including balance and credit limit.\\\"\\\"\\\"\\n    __tablename__ = 'customer'\\n    \\n    id = Column(Integer, primary_key=True)\\n    name = Column(String)\\n    balance = Column(Numeric, default=0)\\n    credit_limit = Column(Numeric)\",\n            \"description\": \"Table to store customer information, including balance and credit limit.\",\n            \"name\": \"Customer\"\n        },\n        {\n            \"classname\": \"Order\",\n            \"code\": \"from sqlalchemy import Column, Integer, Numeric, ForeignKey, Date, String\\nfrom sqlalchemy.orm import declarative_base\\n\\nBase = declarative_base()\\n\\nclass Order(Base):\\n    \\\"\\\"\\\"description: Table to store orders, linked to a customer, with a notes field.\\\"\\\"\\\"\\n    __tablename__ = 'order'\\n    \\n    id = Column(Integer, primary_key=True)\\n    customer_id = Column(Integer, ForeignKey('customer.id'))\\n    amount_total = Column(Numeric, default=0)\\n    date_shipped = Column(Date, nullable=True)\\n    notes = Column(String)\",\n            \"description\": \"Table to store orders, linked to a customer, with a notes field.\",\n            \"name\": \"Order\"\n        },\n        {\n            \"classname\": \"Item\",\n            \"code\": \"from sqlalchemy import Column, Integer, Numeric, ForeignKey\\nfrom sqlalchemy.orm import declarative_base\\n\\nBase = declarative_base()\\n\\nclass Item(Base):\\n    \\\"\\\"\\\"description: Table to store items within an order, each linked to a product.\\\"\\\"\\\"\\n    __tablename__ = 'item'\\n    \\n    id = Column(Integer, primary_key=True)\\n    order_id = Column(Integer, ForeignKey('order.id'))\\n    product_id = Column(Integer, ForeignKey('product.id'))\\n    quantity = Column(Integer)\\n    unit_price = Column(Numeric)\\n    amount = Column(Numeric, default=0) # derived as quantity * unit_price\",\n            \"description\": \"Table to store items within an order, each linked to a product.\",\n            \"name\": \"Item\"\n        },\n        {\n            \"classname\": \"Product\",\n            \"code\": \"from sqlalchemy import Column, Integer, String, Numeric\\nfrom sqlalchemy.orm import declarative_base\\n\\nBase = declarative_base()\\n\\nclass Product(Base):\\n    \\\"\\\"\\\"description: Table to store product details.\\\"\\\"\\\"\\n    __tablename__ = 'product'\\n    \\n    id = Column(Integer, primary_key=True)\\n    name = Column(String)\\n    unit_price = Column(Numeric)\",\n            \"description\": \"Table to store product details.\",\n            \"name\": \"Product\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"CustomerBalanceConstraint\",\n            \"description\": \"Ensure that the customer's balance does not exceed their credit limit.\",\n            \"use_case\": \"Credit limit enforcement.\",\n            \"code\": \"Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg=\\\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\\\")\"\n        },\n        {\n            \"name\": \"CustomerBalanceSum\",\n            \"description\": \"The customer's balance is derived as the sum of unshipped order totals.\",\n            \"use_case\": \"Calculate customer balance from orders.\",\n            \"code\": \"Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\"\n        },\n        {\n            \"name\": \"OrderAmountSum\",\n            \"description\": \"An order's amount_total is derived as the sum of its item amounts.\",\n            \"use_case\": \"Calculate total amount of an order from its items.\",\n            \"code\": \"Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\"\n        },\n        {\n            \"name\": \"ItemAmountFormula\",\n            \"description\": \"The item's amount is calculated as the quantity multiplied by the unit_price.\",\n            \"use_case\": \"Calculate item total price.\",\n            \"code\": \"Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\"\n        },\n        {\n            \"name\": \"ItemUnitPriceCopy\",\n            \"description\": \"The item's unit_price is copied from the associated product's unit_price.\",\n            \"use_case\": \"Ensure item unit price matches product's unit price.\",\n            \"code\": \"Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\"\n        },\n        {\n            \"name\": \"OrderItemCount\",\n            \"description\": \"An order's item count is maintained as the total number of items.\",\n            \"use_case\": \"Ensure orders have items before being shipped.\",\n            \"code\": \"Rule.count(derive=Order.item_count, as_count_of=Item)\"\n        },\n        {\n            \"name\": \"OrderItemCountConstraint\",\n            \"description\": \"Ensure an order has items before setting it as shipped.\",\n            \"use_case\": \"Prevent shipping of empty orders.\",\n            \"code\": \"Rule.constraint(validate=Order, as_condition=lambda row: row.item_count > 0 if row.date_shipped is not None else True, error_msg=\\\"Order has no items on shipping date\\\")\"\n        }\n    ],\n    \"test_data\": \"from datetime import date\\n\\n# Customer Test Data\\ncustomer1 = Customer(id=1, name='Alice', balance=300, credit_limit=1000)\\ncustomer2 = Customer(id=2, name='Bob', balance=150, credit_limit=500)\\ncustomer3 = Customer(id=3, name='Charlie', balance=0, credit_limit=300)\\ncustomer4 = Customer(id=4, name='Dana', balance=50, credit_limit=200)\\n\\n# Order Test Data\\norder1 = Order(id=1, customer_id=1, amount_total=300, date_shipped=None, notes='Urgent')\\norder2 = Order(id=2, customer_id=2, amount_total=150, date_shipped=date(2023,10,1), notes='Standard')\\norder3 = Order(id=3, customer_id=3, amount_total=0, date_shipped=None, notes='')\\norder4 = Order(id=4, customer_id=4, amount_total=50, date_shipped=date(2023,10,2), notes='Priority')\\n\\n# Item Test Data\\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=10, unit_price=30, amount=300)\\nitem2 = Item(id=2, order_id=2, product_id=2, quantity=5, unit_price=30, amount=150)\\nitem3 = Item(id=3, order_id=4, product_id=3, quantity=1, unit_price=50, amount=50)\\nitem4 = Item(id=4, order_id=4, product_id=4, quantity=0, unit_price=0, amount=0)\\n\\n# Product Test Data\\nproduct1 = Product(id=1, name='Widget', unit_price=30)\\nproduct2 = Product(id=2, name='Gadget', unit_price=30)\\nproduct3 = Product(id=3, name='Thingamajig', unit_price=50)\\nproduct4 = Product(id=4, name='Doodad', unit_price=15)\",\n    \"name\": \"CustomerOrderSystem\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Customer\",\n            \"code\": \"class Customer(Base):\\n    \\\"\\\"\\\"\\n    description: Stores customer information, accounting for balances and credit limits.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'customer'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String(50))\\n    balance = Column(Integer, default=0)  # Derived as sum_of Orders.amount_total where date_shipped is null\\n    credit_limit = Column(Integer)\",\n            \"description\": \"Stores customer information, accounting for balances and credit limits.\",\n            \"name\": \"Customer\"\n        },\n        {\n            \"classname\": \"Order\",\n            \"code\": \"class Order(Base):\\n    \\\"\\\"\\\"\\n    description: Manages customer orders, including their total amounts and shipping dates.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'order'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    customer_id = Column(Integer, ForeignKey('customer.id'))\\n    date_shipped = Column(Date, nullable=True)\\n    amount_total = Column(Integer, default=0)  # Derived as sum_of Items.amount\\n    notes = Column(Text)\\n\\n    # No relationship setup, use customer_id directly for data linkage\",\n            \"description\": \"Manages customer orders, including their total amounts and shipping dates.\",\n            \"name\": \"Order\"\n        },\n        {\n            \"classname\": \"Item\",\n            \"code\": \"class Item(Base):\\n    \\\"\\\"\\\"\\n    description: Contains details of items within orders, tracking quantities and pricing.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'item'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    order_id = Column(Integer, ForeignKey('order.id'))\\n    product_id = Column(Integer, ForeignKey('product.id'))\\n    quantity = Column(Integer)\\n    unit_price = Column(Integer)  # Copied from Product.unit_price\\n    amount = Column(Integer, default=0)  # Derived as quantity * unit_price\\n\\n    # No relationship setup, use order_id and product_id for data linkage\",\n            \"description\": \"Contains details of items within orders, tracking quantities and pricing.\",\n            \"name\": \"Item\"\n        },\n        {\n            \"classname\": \"Product\",\n            \"code\": \"class Product(Base):\\n    \\\"\\\"\\\"\\n    description: Catalogs available products with associated pricing.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'product'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String(50))\\n    unit_price = Column(Integer)\",\n            \"description\": \"Catalogs available products with associated pricing.\",\n            \"name\": \"Product\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Customer Balance Constraint\",\n            \"description\": \"Ensures a customer's balance does not exceed their credit limit.\",\n            \"use_case\": \"The Customer's balance is less than the credit limit.\",\n            \"code\": \"Rule.constraint(validate=Customer,\\n                as_condition=lambda row: row.balance <= row.credit_limit,\\n                error_msg=\\\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\\\")\"\n        },\n        {\n            \"name\": \"Customer Balance Calculation\",\n            \"description\": \"Calculates customer's balance as the sum of order total amounts where date shipped is null.\",\n            \"use_case\": \"The Customer's balance is the sum of the Order amount_total where date_shipped is null.\",\n            \"code\": \"Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\"\n        },\n        {\n            \"name\": \"Order Amount Total Calculation\",\n            \"description\": \"Calculates order's total amount as the sum of item amounts.\",\n            \"use_case\": \"The Order's amount_total is the sum of the Item amount.\",\n            \"code\": \"Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\"\n        },\n        {\n            \"name\": \"Item Amount Calculation\",\n            \"description\": \"Calculates item's amount as the product of quantity and unit price.\",\n            \"use_case\": \"The Item amount is the quantity * unit_price.\",\n            \"code\": \"Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\"\n        },\n        {\n            \"name\": \"Item Unit Price Copy\",\n            \"description\": \"Copies unit price from product pricing into item details.\",\n            \"use_case\": \"The Item unit_price is copied from the Product unit_price.\",\n            \"code\": \"Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\"\n        }\n    ],\n    \"test_data\": \"# Creating products\\nproduct1 = Product(id=1, name='Gadget', unit_price=100)\\nproduct2 = Product(id=2, name='Widget', unit_price=150)\\nproduct3 = Product(id=3, name='Doodad', unit_price=200)\\nproduct4 = Product(id=4, name='Thingamajig', unit_price=250)\\n\\n# Creating customers\\ncustomer1 = Customer(id=1, name='Alice', balance=0, credit_limit=300)\\ncustomer2 = Customer(id=2, name='Bob', balance=0, credit_limit=500)\\ncustomer3 = Customer(id=3, name='Charlie', balance=0, credit_limit=700)\\ncustomer4 = Customer(id=4, name='Diana', balance=0, credit_limit=900)\\n\\n# Creating orders\\norder1 = Order(id=1, customer_id=1, date_shipped=None, amount_total=200, notes='First order')\\norder2 = Order(id=2, customer_id=2, date_shipped=None, amount_total=300, notes='Second order')\\norder3 = Order(id=3, customer_id=3, date_shipped=None, amount_total=400, notes='Third order')\\norder4 = Order(id=4, customer_id=4, date_shipped=date(2023, 11, 20), amount_total=500, notes='Fourth order')\\n\\n# Creating items\\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=2, unit_price=100, amount=200)\\nitem2 = Item(id=2, order_id=2, product_id=2, quantity=2, unit_price=150, amount=300)\\nitem3 = Item(id=3, order_id=3, product_id=3, quantity=2, unit_price=200, amount=400)\\nitem4 = Item(id=4, order_id=4, product_id=4, quantity=2, unit_price=250, amount=500)\",\n    \"name\": \"OrderManagementSystem\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Student\",\n            \"code\": \"class Student(Base):\\n    \\\"\\\"\\\" description: Table storing student information \\\"\\\"\\\"\\n    __tablename__ = 'student'\\n    \\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String)\\n    can_graduate = Column(Boolean)\\n    probation_count = Column(Integer, default=0)\\n    sick_days_total = Column(Integer, default=0)\",\n            \"description\": \"Table storing student information\",\n            \"name\": \"Student\"\n        },\n        {\n            \"classname\": \"Probation\",\n            \"code\": \"class Probation(Base):\\n    \\\"\\\"\\\" description: Table storing probation records for students \\\"\\\"\\\"\\n    __tablename__ = 'probation'\\n    \\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    student_id = Column(Integer, ForeignKey('student.id'), nullable=False)\\n    date = Column(Date)\",\n            \"description\": \"Table storing probation records for students\",\n            \"name\": \"Probation\"\n        },\n        {\n            \"classname\": \"SickDay\",\n            \"code\": \"class SickDay(Base):\\n    \\\"\\\"\\\" description: Table storing sick days records for students \\\"\\\"\\\"\\n    __tablename__ = 'sick_day'\\n    \\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    student_id = Column(Integer, ForeignKey('student.id'), nullable=False)\\n    date = Column(Date)\",\n            \"description\": \"Table storing sick days records for students\",\n            \"name\": \"SickDay\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"derived_probation_count\",\n            \"description\": \"Count the number of probations for each student.\",\n            \"use_case\": \"Maintain an up-to-date count of probation entries belonging to a student.\",\n            \"code\": \"Rule.count(derive=Student.probation_count, as_count_of=Probation, where=None)\"\n        },\n        {\n            \"name\": \"derived_sick_days_total\",\n            \"description\": \"Sum the total number of sick days for each student.\",\n            \"use_case\": \"Maintain an up-to-date sum of sick day entries for students.\",\n            \"code\": \"Rule.count(derive=Student.sick_days_total, as_count_of=SickDay, where=None)\"\n        },\n        {\n            \"name\": \"graduation_constraint\",\n            \"description\": \"Ensure a student can graduate only if they have less than 2 probations and less than 100 sick days.\",\n            \"use_case\": \"Enforce graduation readiness based on probation and sick day criteria.\",\n            \"code\": \"Rule.constraint(validate=Student, as_condition=lambda row: row.probation_count < 2 and row.sick_days_total < 100, error_msg=\\\"Student cannot graduate with {row.probation_count} probations and {row.sick_days_total} sick days.\\\")\"\n        }\n    ],\n    \"test_data\": \"from datetime import date\\n\\nStudent1 = Student(id=1, name=\\\"Alice\\\", can_graduate=True, probation_count=1, sick_days_total=3)\\nStudent2 = Student(id=2, name=\\\"Bob\\\", can_graduate=False, probation_count=2, sick_days_total=104)\\nStudent3 = Student(id=3, name=\\\"Charlie\\\", can_graduate=True, probation_count=0, sick_days_total=0)\\nStudent4 = Student(id=4, name=\\\"Diana\\\", can_graduate=False, probation_count=3, sick_days_total=95)\\n\\nProbation1 = Probation(id=1, student_id=1, date=date(2022, 7, 20))\\nProbation2 = Probation(id=2, student_id=2, date=date(2023, 1, 9))\\nProbation3 = Probation(id=3, student_id=2, date=date(2023, 3, 15))\\nProbation4 = Probation(id=4, student_id=4, date=date(2023, 5, 22))\\n\\nSickDay1 = SickDay(id=1, student_id=1, date=date(2023, 2, 15))\\nSickDay2 = SickDay(id=2, student_id=2, date=date(2023, 4, 10))\\nSickDay3 = SickDay(id=3, student_id=2, date=date(2023, 6, 5))\\nSickDay4 = SickDay(id=4, student_id=2, date=date(2023, 7, 12))\\n\",\n    \"name\": \"Student Graduation Monitoring System\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Applicant\",\n            \"code\": \"class Applicant(Base):\\n    \\\"\\\"\\\"\\n    description: Represents an applicant who can have felonies and bankruptcies.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'applicant'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String)\\n    is_hirable = Column(Boolean)\\n    bankruptcy_count = Column(Integer, default=0)\\n    felony_count = Column(Integer, default=0)\",\n            \"description\": \"Represents an applicant who can have felonies and bankruptcies.\",\n            \"name\": \"Applicant\"\n        },\n        {\n            \"classname\": \"Felony\",\n            \"code\": \"class Felony(Base):\\n    \\\"\\\"\\\"\\n    description: Represents a felony committed by an applicant.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'felony'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    applicant_id = Column(Integer, ForeignKey('applicant.id'))\\n    date_committed = Column(Date)\\n    description = Column(String)\",\n            \"description\": \"Represents a felony committed by an applicant.\",\n            \"name\": \"Felony\"\n        },\n        {\n            \"classname\": \"Bankruptcy\",\n            \"code\": \"class Bankruptcy(Base):\\n    \\\"\\\"\\\"\\n    description: Represents a bankruptcy case related to an applicant.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'bankruptcy'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    applicant_id = Column(Integer, ForeignKey('applicant.id'))\\n    date_filed = Column(Date)\\n    case_number = Column(String)\",\n            \"description\": \"Represents a bankruptcy case related to an applicant.\",\n            \"name\": \"Bankruptcy\"\n        },\n        {\n            \"classname\": \"ApplicantRule\",\n            \"code\": \"class ApplicantRule(Base):\\n    \\\"\\\"\\\"\\n    description: Represents additional derived attributes or rules for applicants.\\n    \\\"\\\"\\\"\\n    __tablename__ = 'applicant_rule'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    applicant_id = Column(Integer, ForeignKey('applicant.id'))\\n    is_hirable = Column(Boolean)\\n    bankruptcy_count = Column(Integer)\\n    felony_count = Column(Integer)\",\n            \"description\": \"Represents additional derived attributes or rules for applicants.\",\n            \"name\": \"ApplicantRule\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Constraint Rule - Bankruptcy\",\n            \"description\": \"Signal error if an applicant is marked as hirable and has more than 3 bankruptcies.\",\n            \"use_case\": \"Signal error if is-hirable is true and there are more than 3 bankruptcies.\",\n            \"code\": \"Rule.constraint(validate=Applicant,\\n                as_condition=lambda row: not (row.is_hirable and row.bankruptcy_count > 3),\\n                error_msg=\\\"Applicant with {row.bankruptcy_count} bankruptcies is not hirable.\\\")\"\n        },\n        {\n            \"name\": \"Constraint Rule - Felonies\",\n            \"description\": \"Signal error if an applicant is marked as hirable and has more than 2 felonies.\",\n            \"use_case\": \"Signal error if is-hirable is true and there are more than 2 felonies.\",\n            \"code\": \"Rule.constraint(validate=Applicant,\\n                as_condition=lambda row: not (row.is_hirable and row.felony_count > 2),\\n                error_msg=\\\"Applicant with {row.felony_count} felonies is not hirable.\\\")\"\n        },\n        {\n            \"name\": \"Count Rule - Bankruptcy\",\n            \"description\": \"Counts bankruptcies for each applicant.\",\n            \"use_case\": \"Count bankruptcies related to each applicant.\",\n            \"code\": \"Rule.count(derive=Applicant.bankruptcy_count, as_count_of=Bankruptcy, child_role_name='applicant')\"\n        },\n        {\n            \"name\": \"Count Rule - Felony\",\n            \"description\": \"Counts felonies for each applicant.\",\n            \"use_case\": \"Count felonies related to each applicant.\",\n            \"code\": \"Rule.count(derive=Applicant.felony_count, as_count_of=Felony, child_role_name='applicant')\"\n        }\n    ],\n    \"test_data\": \"from datetime import date\\n\\napplicant1 = Applicant(name='John Doe', is_hirable=True, bankruptcy_count=0, felony_count=0)\\napplicant2 = Applicant(name='Jane Smith', is_hirable=False, bankruptcy_count=0, felony_count=0)\\napplicant3 = Applicant(name='Robert Brown', is_hirable=True, bankruptcy_count=0, felony_count=0)\\napplicant4 = Applicant(name='Laura Wilson', is_hirable=False, bankruptcy_count=0, felony_count=0)\\n\\nfelony1 = Felony(applicant_id=1, date_committed=date(2020, 5, 20), description='Theft')\\nfelony2 = Felony(applicant_id=2, date_committed=date(2019, 6, 8), description='Fraud')\\nfelony3 = Felony(applicant_id=1, date_committed=date(2021, 7, 18), description='Assault')\\nfelony4 = Felony(applicant_id=3, date_committed=date(2022, 12, 24), description='Burglary')\\n\\nbankruptcy1 = Bankruptcy(applicant_id=1, date_filed=date(2021, 3, 15), case_number=\\\"BK123456\\\")\\nbankruptcy2 = Bankruptcy(applicant_id=3, date_filed=date(2020, 8, 11), case_number=\\\"BK654321\\\")\\nbankruptcy3 = Bankruptcy(applicant_id=3, date_filed=date(2021, 4, 25), case_number=\\\"BK789012\\\")\\nbankruptcy4 = Bankruptcy(applicant_id=2, date_filed=date(2022, 1, 30), case_number=\\\"BK345678\\\")\",\n    \"name\": \"ApplicantEligibilityLogic\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n=Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints)\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n="}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Student\",\n            \"code\": \"class Student(Base):\\n    \\\"\\\"\\\"description: Students have Grades and belong to Clubs.\\\"\\\"\\\"\\n    __tablename__ = 'students'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n    gpa = Column(Float, nullable=False)\\n    eligible_for_honor_society = Column(Boolean, default=False)\\n    service_activity_count = Column(Integer, default=0)\\n    club_name = Column(String)\\n    \\n    # Foreign keys\\n    club_id = Column(Integer, ForeignKey('clubs.id'))\\n\\n    # Additional derived attributes if needed\\n    def __init__(self, name, gpa, eligible_for_honor_society=False, service_activity_count=0, club_name=None):\\n        self.name = name\\n        self.gpa = gpa\\n        self.eligible_for_honor_society = eligible_for_honor_society\\n        self.service_activity_count = service_activity_count\\n        self.club_name = club_name\\n\",\n            \"description\": \"Students have Grades and belong to Clubs.\",\n            \"name\": \"Student\"\n        },\n        {\n            \"classname\": \"Club\",\n            \"code\": \"class Club(Base):\\n    \\\"\\\"\\\"description: Clubs that students can join.\\\"\\\"\\\"\\n    __tablename__ = 'clubs'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String, nullable=False)\\n\\n    def __init__(self, name):\\n        self.name = name\\n\",\n            \"description\": \"Clubs that students can join.\",\n            \"name\": \"Club\"\n        },\n        {\n            \"classname\": \"StudentClub\",\n            \"code\": \"class StudentClub(Base):\\n    \\\"\\\"\\\"description: Link table between Students and Clubs.\\\"\\\"\\\"\\n    __tablename__ = 'student_clubs'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    student_id = Column(Integer, ForeignKey('students.id'))\\n    club_id = Column(Integer, ForeignKey('clubs.id'))\\n\\n    def __init__(self, student_id, club_id):\\n        self.student_id = student_id\\n        self.club_id = club_id\\n\",\n            \"description\": \"Link table between Students and Clubs.\",\n            \"name\": \"StudentClub\"\n        },\n        {\n            \"classname\": \"Grade\",\n            \"code\": \"class Grade(Base):\\n    \\\"\\\"\\\"description: Records grades of students.\\\"\\\"\\\"\\n    __tablename__ = 'grades'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    student_id = Column(Integer, ForeignKey('students.id'))\\n    grade = Column(String, nullable=False)\\n\\n    def __init__(self, student_id, grade):\\n        self.student_id = student_id\\n        self.grade = grade\\n\",\n            \"description\": \"Records grades of students.\",\n            \"name\": \"Grade\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Copy Rule for Student Club Name\",\n            \"description\": \"Copy the club name to the student's club name.\",\n            \"use_case\": \"Copy the name from Club to Student Club\",\n            \"code\": \"Rule.copy(derive=Student.club_name, from_parent=Club.name)\"\n        },\n        {\n            \"name\": \"Count Service Activities\",\n            \"description\": \"Count the service activities (clubs with 'service' in name).\",\n            \"use_case\": \"Count of Student Clubs where name contains 'service'.\",\n            \"code\": \"Rule.count(derive=Student.service_activity_count, as_count_of=StudentClub, where=lambda row: 'service' in row.club_name)\"\n        },\n        {\n            \"name\": \"Constraint for Honor Society Eligibility\",\n            \"description\": \"Ensure students eligible for honor society meet criteria.\",\n            \"use_case\": \"Signal error if student honor society eligibility is true but criteria not met.\",\n            \"code\": \"Rule.constraint(validate=Student, as_condition=lambda row: not (row.eligible_for_honor_society and (row.gpa < 3.5 or row.service_activity_count < 2)), error_msg=\\\"Eligibility requirements not met for honor society\\\")\"\n        }\n    ],\n    \"test_data\": \"# Student Data\\nstudent1 = Student(name='Alice Johnson', gpa=3.6, eligible_for_honor_society=True, service_activity_count=3, club_name='Green Service Club')\\nstudent2 = Student(name='Bob Smith', gpa=2.8, eligible_for_honor_society=False, service_activity_count=1, club_name='Math Club')\\nstudent3 = Student(name='Charlie Brown', gpa=3.9, eligible_for_honor_society=True, service_activity_count=2, club_name='Science Service Club')\\nstudent4 = Student(name='Dorothy Gale', gpa=3.2, eligible_for_honor_society=False, service_activity_count=0, club_name=None)\\n\\n# Club Data\\nclub1 = Club(name='Green Service Club')\\nclub2 = Club(name='Math Club')\\nclub3 = Club(name='Science Service Club')\\nclub4 = Club(name='Chess Club')\\n\\n# StudentClub Data\\nstudent_club1 = StudentClub(student_id=1, club_id=1)\\nstudent_club2 = StudentClub(student_id=1, club_id=3)\\nstudent_club3 = StudentClub(student_id=2, club_id=2)\\nstudent_club4 = StudentClub(student_id=3, club_id=3)\\n\\n# Grade Data\\ngrade1 = Grade(student_id=1, grade='A')\\ngrade2 = Grade(student_id=2, grade='B')\\ngrade3 = Grade(student_id=3, grade='A')\\ngrade4 = Grade(student_id=4, grade='C')\",\n    \"name\": \"StudentClubsHonorSocietyRule\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints).  Conditions may not contains sum or count python functions - these must be used to declare additional columns and sum/count rules.\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nFor \"more than\" constraints, create columns with count rules:\n\nPrompt Reject Employees with more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n\nFor \"any\" constraints, create columns with count rules:\n\nPrompt Reject Employees with any class 5 Felonies or more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.class_5_felony_count, as_count_of=Felonies, where=class>5)\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.class_5_felony_count > 0 or row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints).  Conditions may not contains sum or count python functions - these must be used to declare additional columns and sum/count rules.\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nFor \"more than\" constraints, create columns with count rules:\n\nPrompt Reject Employees with more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n\nFor \"any\" constraints, create columns with count rules:\n\nPrompt Reject Employees with any class 5 Felonies or more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.class_5_felony_count, as_count_of=Felonies, where=class>5)\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.class_5_felony_count > 0 or row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Product\",\n            \"code\": \"class Product(Base):\\n    \\\"\\\"\\\"description: Table to store product information including orderability and associated notices.\\\"\\\"\\\"\\n\\n    __tablename__ = 'product'\\n\\n    id = Column(Integer, autoincrement=True, primary_key=True)\\n    name = Column(String, nullable=False)\\n    orderable = Column(Boolean, nullable=False)\\n    notice_count = Column(Integer, nullable=False, default=0)  # derived attribute for Logic Bank rule\\n    severity_5_notice_count = Column(Integer, nullable=False, default=0)  # derived attribute for Logic Bank rule\",\n            \"description\": \"Table to store product information including orderability and associated notices.\",\n            \"name\": \"Product\"\n        },\n        {\n            \"classname\": \"Notice\",\n            \"code\": \"class Notice(Base):\\n    \\\"\\\"\\\"description: Table to store notices associated with products and their severity.\\\"\\\"\\\"\\n\\n    __tablename__ = 'notice'\\n\\n    id = Column(Integer, autoincrement=True, primary_key=True)\\n    product_id = Column(Integer, ForeignKey('product.id'))\\n    severity = Column(Integer, nullable=False)\\n    description = Column(String, nullable=True)\",\n            \"description\": \"Table to store notices associated with products and their severity.\",\n            \"name\": \"Notice\"\n        },\n        {\n            \"classname\": \"Order\",\n            \"code\": \"class Order(Base):\\n    \\\"\\\"\\\"description: Table to record orders of products.\\\"\\\"\\\"\\n\\n    __tablename__ = 'order'\\n\\n    id = Column(Integer, autoincrement=True, primary_key=True)\\n    product_id = Column(Integer, ForeignKey('product.id'))\\n    order_date = Column(Date, nullable=False)\\n    quantity = Column(Integer, nullable=False)\",\n            \"description\": \"Table to record orders of products.\",\n            \"name\": \"Order\"\n        },\n        {\n            \"classname\": \"OrderDetail\",\n            \"code\": \"class OrderDetail(Base):\\n    \\\"\\\"\\\"description: Table to store details of each order line item.\\\"\\\"\\\"\\n\\n    __tablename__ = 'order_detail'\\n\\n    id = Column(Integer, autoincrement=True, primary_key=True)\\n    order_id = Column(Integer, ForeignKey('order.id'))\\n    product_id = Column(Integer, ForeignKey('product.id'))\\n    quantity = Column(Integer, nullable=False)\\n    amount = Column(Integer)  # derived attribute for Logic Bank formula\",\n            \"description\": \"Table to store details of each order line item.\",\n            \"name\": \"OrderDetail\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Product Notice Constraints\",\n            \"description\": \"Reject Products if they are orderable and have any severity 5 Notices or more than 3 Notices.\",\n            \"use_case\": \"Validation rules are needed to ensure product orderability does not exist under critical notice conditions.\",\n            \"code\": \"Rule.count(derive=Product.notice_count, as_count_of=Notice)\\nRule.count(derive=Product.severity_5_notice_count, as_count_of=Notice, where=lambda row: row.severity == 5)\\nRule.constraint(validate=Product,\\n                as_condition=lambda row: not row.orderable or (row.severity_5_notice_count == 0 and row.notice_count <= 3),\\n                error_msg=\\\"Product is orderable with conflicting Notices (severity 5 or more than 3)\\\")\"\n        }\n    ],\n    \"test_data\": \"from datetime import date\\n\\n# Test data for Product\\nproduct1 = Product(id=1, name='Gadget', orderable=True, notice_count=2, severity_5_notice_count=1)\\nproduct2 = Product(id=2, name='Widget', orderable=False, notice_count=1, severity_5_notice_count=0)\\nproduct3 = Product(id=3, name='Thingamajig', orderable=True, notice_count=0, severity_5_notice_count=0)\\nproduct4 = Product(id=4, name='Doodad', orderable=True, notice_count=4, severity_5_notice_count=0)\\n\\n# Test data for Notice\\nnotice1 = Notice(id=1, product_id=1, severity=5, description='Critical failure')\\nnotice2 = Notice(id=2, product_id=1, severity=2, description='Minor issue')\\nnotice3 = Notice(id=3, product_id=2, severity=1, description='Low priority')\\nnotice4 = Notice(id=4, product_id=4, severity=4, description='High priority')\\n\\n# Test data for Order\\norder1 = Order(id=1, product_id=1, order_date=date(2023, 1, 1), quantity=5)\\norder2 = Order(id=2, product_id=2, order_date=date(2023, 2, 15), quantity=10)\\norder3 = Order(id=3, product_id=3, order_date=date(2023, 3, 5), quantity=7)\\norder4 = Order(id=4, product_id=4, order_date=date(2023, 4, 10), quantity=3)\\n\\n# Test data for OrderDetail\\norder_detail1 = OrderDetail(id=1, order_id=1, product_id=1, quantity=2, amount=100)\\norder_detail2 = OrderDetail(id=2, order_id=2, product_id=2, quantity=4, amount=200)\\norder_detail3 = OrderDetail(id=3, order_id=3, product_id=3, quantity=3, amount=150)\\norder_detail4 = OrderDetail(id=4, order_id=4, product_id=4, quantity=1, amount=50)\",\n    \"name\": \"ProductNoticeEnforcement\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints).  Conditions may not contains sum or count python functions - these must be used to declare additional columns and sum/count rules.\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column.\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy; create this column in the parent if it does not already exist.\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nFor \"more than\" constraints, create columns with count rules:\n\nPrompt Reject Employees with more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n\nFor \"any\" constraints, create columns with count rules:\n\nPrompt Reject Employees with any class 5 Felonies or more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.class_5_felony_count, as_count_of=Felonies, where=class>5)\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.class_5_felony_count > 0 or row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\nFormulas can reference parent values in 2 versions - choose formula vs copy as follows:\n    Prompt (formula version) - use the formula version unless copy is explicitly noted:\n        Item.ready = Order.ready\n    Response\n        Rule.formula(derive=Item.ready, as_expression=lambda row: row.order.ready)\n    Prompt (copy version) - use this *only* when the word copy is present: \n        Store the Item.unit_price as a copy from Product.unit_price\n    Response\n        Rule.copy(derive=Item.ready, from_parent=Order.ready)\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints).  Conditions may not contains sum or count python functions - these must be used to declare additional columns and sum/count rules.\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column.\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy; create this column in the parent if it does not already exist.\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nFor \"more than\" constraints, create columns with count rules:\n\nPrompt Reject Employees with more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n\nFor \"any\" constraints, create columns with count rules:\n\nPrompt Reject Employees with any class 5 Felonies or more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.class_5_felony_count, as_count_of=Felonies, where=class>5)\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.class_5_felony_count > 0 or row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\nFormulas can reference parent values in 2 versions - choose formula vs copy as follows:\n    Prompt (formula version) - use the formula version unless copy is explicitly noted:\n        Item.ready = Order.ready\n    Response\n        Rule.formula(derive=Item.ready, as_expression=lambda row: row.order.ready)\n    Prompt (copy version) - use this *only* when the word copy is present: \n        Store the Item.unit_price as a copy from Product.unit_price\n    Response\n        Rule.copy(derive=Item.ready, from_parent=Order.ready)\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Customer\",\n            \"code\": \"class Customer(Base):\\n    \\\"\\\"\\\"\\n    description: Represents a customer in the system\\n    \\\"\\\"\\\"\\n    __tablename__ = 'customer'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String(50))\\n    balance = Column(Integer, default=0)\\n    credit_limit = Column(Integer)\",\n            \"description\": \"Represents a customer in the system\",\n            \"name\": \"Customer\"\n        },\n        {\n            \"classname\": \"Order\",\n            \"code\": \"class Order(Base):\\n    \\\"\\\"\\\"\\n    description: Represents an order placed by a customer\\n    \\\"\\\"\\\"\\n    __tablename__ = 'order'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    customer_id = Column(Integer, ForeignKey('customer.id'))\\n    date_shipped = Column(DateTime, nullable=True)\\n    amount_total = Column(Integer, default=0)\\n    notes = Column(String(100), nullable=True)\\n    ready = Column(Boolean, default=False)\\n    item_count = Column(Integer, default=0)\",\n            \"description\": \"Represents an order placed by a customer\",\n            \"name\": \"Order\"\n        },\n        {\n            \"classname\": \"Item\",\n            \"code\": \"class Item(Base):\\n    \\\"\\\"\\\"\\n    description: Represents an item in an order\\n    \\\"\\\"\\\"\\n    __tablename__ = 'item'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    order_id = Column(Integer, ForeignKey('order.id'))\\n    product_id = Column(Integer, ForeignKey('product.id'))\\n    quantity = Column(Integer)\\n    unit_price = Column(Integer)\\n    amount = Column(Integer, default=0)\\n    ready = Column(Boolean, default=False)\",\n            \"description\": \"Represents an item in an order\",\n            \"name\": \"Item\"\n        },\n        {\n            \"classname\": \"Product\",\n            \"code\": \"class Product(Base):\\n    \\\"\\\"\\\"\\n    description: Represents a product available for purchase\\n    \\\"\\\"\\\"\\n    __tablename__ = 'product'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String(50))\\n    quantity_on_hand = Column(Integer)\\n    total_ordered = Column(Integer, default=0)\\n    reorder_required = Column(Boolean, default=False)\",\n            \"description\": \"Represents a product available for purchase\",\n            \"name\": \"Product\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Customer Balance Constraint\",\n            \"description\": \"Ensure customer balance does not exceed credit limit\",\n            \"use_case\": \"Check Credit for ready orders\",\n            \"code\": \"Rule.constraint(validate=Customer,\\n                as_condition=lambda row: row.balance <= row.credit_limit,\\n                error_msg=\\\"balance ({row.balance}) exceeds credit ({row.credit_limit})\\\")\"\n        },\n        {\n            \"name\": \"Sum Customer Balance\",\n            \"description\": \"Derive customer balance from order amounts\",\n            \"use_case\": \"Check Credit for ready orders\",\n            \"code\": \"Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total,\\n         where=lambda row: row.date_shipped is None and row.ready is True)\"\n        },\n        {\n            \"name\": \"Sum Order Amount Total\",\n            \"description\": \"Derive order amount total as sum of item amounts\",\n            \"use_case\": \"Check Credit for ready orders\",\n            \"code\": \"Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\"\n        },\n        {\n            \"name\": \"Formula for Item Amount\",\n            \"description\": \"Calculate item amount from quantity and unit_price\",\n            \"use_case\": \"Check Credit for ready orders\",\n            \"code\": \"Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\"\n        },\n        {\n            \"name\": \"Copy Item Unit Price\",\n            \"description\": \"Copy item unit price from product\",\n            \"use_case\": \"Check Credit for ready orders\",\n            \"code\": \"Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\"\n        },\n        {\n            \"name\": \"Formula for Item Ready\",\n            \"description\": \"Set item ready status as order ready status\",\n            \"use_case\": \"Compute Products ordered\",\n            \"code\": \"Rule.formula(derive=Item.ready, as_expression=lambda row: row.order.ready)\"\n        },\n        {\n            \"name\": \"Sum Product Total Ordered\",\n            \"description\": \"Sum of item quantities where ready is true for the product\",\n            \"use_case\": \"Compute Products ordered\",\n            \"code\": \"Rule.sum(derive=Product.total_ordered, as_sum_of=Item.quantity, where=lambda row: row.ready == True)\"\n        },\n        {\n            \"name\": \"Product Reorder Required Constraint\",\n            \"description\": \"Check if reorder is required based on quantity on hand and total ordered\",\n            \"use_case\": \"Compute Products ordered\",\n            \"code\": \"Rule.constraint(validate=Product,\\n                as_condition=lambda row: row.quantity_on_hand <= row.total_ordered,\\n                error_msg=\\\"Reorder required for product {row.name}\\\")\"\n        },\n        {\n            \"name\": \"Count of Order Items\",\n            \"description\": \"Count the number of items in an order\",\n            \"use_case\": \"No Empty Orders\",\n            \"code\": \"Rule.count(derive=Order.item_count, as_count_of=Item)\"\n        },\n        {\n            \"name\": \"Order Ship Constraint\",\n            \"description\": \"Ensure an order has at least one item before shipment\",\n            \"use_case\": \"No Empty Orders\",\n            \"code\": \"Rule.constraint(validate=Order,\\n                as_condition=lambda row: not (row.date_shipped is not None and row.item_count == 0),\\n                error_msg=\\\"Cannot ship an empty order\\\")\"\n        }\n    ],\n    \"test_data\": \"from datetime import date\\n\\n# Test Data for Customer\\ncustomer1 = Customer(id=1, name=\\\"John Doe\\\", balance=100, credit_limit=500)\\ncustomer2 = Customer(id=2, name=\\\"Jane Smith\\\", balance=200, credit_limit=700)\\ncustomer3 = Customer(id=3, name=\\\"Alice Johnson\\\", balance=150, credit_limit=400)\\ncustomer4 = Customer(id=4, name=\\\"Bob Brown\\\", balance=50, credit_limit=300)\\n\\n# Test Data for Product\\nproduct1 = Product(id=1, name=\\\"Widget\\\", quantity_on_hand=100, total_ordered=0, reorder_required=False)\\nproduct2 = Product(id=2, name=\\\"Gadget\\\", quantity_on_hand=200, total_ordered=0, reorder_required=False)\\nproduct3 = Product(id=3, name=\\\"Thingamajig\\\", quantity_on_hand=150, total_ordered=0, reorder_required=False)\\nproduct4 = Product(id=4, name=\\\"Contraption\\\", quantity_on_hand=250, total_ordered=0, reorder_required=False)\\n\\n# Test Data for Order\\norder1 = Order(id=1, customer_id=1, date_shipped=None, amount_total=0, notes=\\\"Urgent\\\", ready=True, item_count=0)\\norder2 = Order(id=2, customer_id=2, date_shipped=None, amount_total=0, notes=\\\"Handle with care\\\", ready=False, item_count=0)\\norder3 = Order(id=3, customer_id=3, date_shipped=None, amount_total=0, notes=\\\"\\\", ready=True, item_count=0)\\norder4 = Order(id=4, customer_id=4, date_shipped=None, amount_total=0, notes=\\\"\\\", ready=False, item_count=0)\\n\\n# Test Data for Item\\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=5, unit_price=10, amount=50, ready=True)\\nitem2 = Item(id=2, order_id=1, product_id=2, quantity=3, unit_price=20, amount=60, ready=True)\\nitem3 = Item(id=3, order_id=3, product_id=3, quantity=2, unit_price=15, amount=30, ready=True)\\nitem4 = Item(id=4, order_id=2, product_id=4, quantity=6, unit_price=25, amount=150, ready=False)\\n\",\n    \"name\": \"OrderManagement\"\n}"}]}
{"messages": [{"role": "system", "content": "You are a data modelling expert and python software architect who expands on user input ideas. You create data models with at least 4 tables"}, {"role": "user", "content": "Here is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints).  Conditions may not contains sum or count python functions - these must be used to declare additional columns and sum/count rules.\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nFor \"more than\" constraints, create columns with count rules:\n\nPrompt Reject Employees with more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n\nFor \"any\" constraints, create columns with count rules:\n\nPrompt Reject Employees with any class 5 Felonies or more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.class_5_felony_count, as_count_of=Felonies, where=class>5)\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.class_5_felony_count > 0 or row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\nHere is the simplified API for LogicBank:\n\nCreate a function called declare_logic(), consisting of calls to Rule methods.\n\nDo not generate import statements.\n\nIf you create sum, count or formula LogicBank rules, you MUST create a corresponding column in the data model.\n\nUse only the methods provided below.\n\nclass Rule:\n    \"\"\"Invoke these functions to declare rules in the created declare_logic function.  \"\"\"\n\n    @staticmethod\n    def sum(derive: Column, as_sum_of: any, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as sum of designated child column, optional where\n\n        Example\n            Prompt\n                Customer.Balance = Sum(Order.amount_total where date_shipped is null)\n            Response\n                Rule.sum(derive=Customer.Balance, as_sum_of=Order.AmountTotal,\n                    where=lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_sum_of: name of child <class.attribute> being summed\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are summed.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Sum(derive, as_sum_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def count(derive: Column, as_count_of: object, where: any = None, child_role_name: str = \"\", insert_parent: bool=False):\n        \"\"\"\n        Derive parent column as count of designated child rows\n\n        Example\n            Prompt\n                Customer.UnPaidOrders = count(Orders where ShippedDate is None)\n            Response\n                Rule.count(derive=Customer.UnPaidOrders, as_count_of=Order,\n                    where=Lambda row: row.ShippedDate is None)\n\n        Args:\n            derive: name of parent <class.attribute> being derived\n            as_count_of: name of child <class> being counted\n            child_role_name: parent's child accessor attribute (required only for disambiguation)\n            where: optional where clause, designates which child rows are counted.  Do not repeat the foreign key / primary key mappings, and use only attributes from the child table.\n            insert_parent: create parent if it does not exist.  Do not use unless directly requested.\n        \"\"\"\n        return Count(derive, as_count_of, where, child_role_name, insert_parent)\n\n    @staticmethod\n    def constraint(validate: object,\n                   calling: Callable = None,\n                   as_condition: any = None,\n                   error_msg: str = \"(error_msg not provided)\",\n                   error_attributes=None):\n        \"\"\"\n        Constraints declare condition that must be true for all commits\n\n        Example\n            Prompt\n                Customer.balance <= credit_limit\n            Response  \n                Rule.constraint(validate=Customer,\n                                as_condition=lambda row: row.Balance <= row.CreditLimit,\n                                error_msg=\"balance ({row.Balance}) exceeds credit ({row.CreditLimit})\")\n\n        Args:\n            validate: name of mapped <class>\n            as_condition: lambda, passed row (simple constraints).  Conditions may not contains sum or count python functions - these must be used to declare additional columns and sum/count rules.\n            error_msg: string, with {row.attribute} replacements\n            error_attributes: list of attributes\n\n        \"\"\"\n        if error_attributes is None:\n            error_attributes = []\n        return Constraint(validate=validate, as_condition=as_condition,\n                          error_attributes=error_attributes, error_msg=error_msg)\n\n    @staticmethod\n    def parent_check(validate: object,\n                     error_msg: str = \"(error_msg not provided)\",\n                     enable: bool = True):\n        \"\"\"\n        Parent Checks ensure that non-null foreign keys are present in parent class\n\n        Example\n           Rule.parent_check(validate=Customer, enable=True, error_msg=\"Missing Parent\")\n\n        Parent_check failures raise ConstraintException, e.g.:\n            try:\n                session.commit()\n            except ConstraintException as ce:\n                print(\"Constraint raised: \" + str(ce))\n\n        Args:\n            validate: name of mapped class\n            error_msg: message included in exception (can have {} syntax)\n            enable: True (default) = enable, False means disable (tolerate orphans)\n\n        Note: False not recommended - for existing databases with bad data\n            Behavior is undefined for other rules (sum, count, parent references, etc)\n\n        \"\"\"\n        return ParentCheck(validate=validate, error_msg=error_msg, enable=enable)\n\n    @staticmethod\n    def formula(derive: Column,\n                as_expression: Callable = None,\n                no_prune: bool = False):\n        \"\"\"\n        Formulas declare column value, based on current and parent rows\n\n        Example\n            Prompt\n                Item.amount = quantity * unit_price\n            Response\n                Rule.formula(derive=OrderDetail.Amount,\n                             as_expression=lambda row: row.UnitPrice * row.Quantity)\n\n        Args:\n            derive: <class.attribute> being derived\n            as_expression: lambda, passed row (for syntax checking)\n            no_prune: disable pruning (rarely used, default False)\n        \"\"\"\n        return Formula(derive=derive,\n                       as_expression=as_expression,\n                       no_prune=no_prune)\n\n    @staticmethod\n    def copy(derive: Column, from_parent: any):\n        \"\"\"\n        Copy declares child column copied from parent column\n\n        Example\n            Prompt\n                Store the Item.unit_price as a copy from Product.unit_price\n            Response\n                Rule.copy(derive=OrderDetail.UnitPrice, from_parent=Product.UnitPrice)\n\n        Args:\n            derive: <class.attribute> being copied into\n            from_parent: <parent-class.attribute> source of copy\n        \"\"\"\n        return Copy(derive=derive, from_parent=from_parent)\n\n\nExpanded example:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. Customer.balance <= credit_limit\n        2. Customer.balance = Sum(Order.amount_total where date_shipped is null)\n        3. Order.amount_total = Sum(Item.amount)\n        4. Item.amount = quantity * unit_price\n        5. Store the Item.unit_price as a copy from Product.unit_price\n\nResponse:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\n\nEquivalent expanded example using informal syntax:\n\nPrompt:\n\n    Use Logic Bank to enforce the Check Credit requirement (do not generate check constraints):\n        1. The Customer's balance is less than the credit limit\n        2. The Customer's balance is the sum of the Order amount_total where date_shipped is null\n        3. The Order's amount_total is the sum of the Item amount\n        4. The Item amount is the quantity * unit_price\n        5. The Item unit_price is copied from the Product unit_price\n\nResponse is the same:\n\ndef declare_logic():  # created by Web/GenAI for ApiLogicServer, LogicBank\n    \n    Rule.sum(derive=CustomerAccount.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)\n    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)\n    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)\n    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)\n    Rule.constraint(validate=CustomerAccount,\n                    as_condition=lambda row: row.balance <= row.credit_limit,\n                    error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")\n\nIntermediate sum/count values require a new column, with a LogicBank sum/count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate count values also require a new column, with a LogicBank count rule.  For example:\n\nPrompt:\n    The sum of the child value cannot exceed the parent limit\n\nResponse is to create 2 rules - a derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.sum(derive=Parent.value_total, as_sum_of=Child.value)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Parent,\n                    as_condition=lambda row: row.value_total <= row.limit,\n                    error_msg=\"Parent value total ({row.value_total}) exceeds limit ({row.limit})\")\n\nIntermediate sum/count values also work for counts.  For example:\n\nPrompt:\n\n    A airplane cannot have more passengers than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nPrompt:\n\n    A student cannot be an honor student unless they have mre than 2 service activities.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Student.service_activity_count, as_count_of=Activities, where='service' in name)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Student,\n                    as_condition=lambda row: row.is_honor_student and service_activity_count < 2,\n                    error_msg=\"Honor Students must have at least 2 service activities\")\n\nHere is an equivalent request:\n\nPrompt:\n\n    A airplane's passengers must be less than its seating capacity.\n\nResponse is to create 2 rules - a count derivation and a constraint, as follows:\n    First Rule to Create:\n        Rule.count(derive=Airplane.passenger_count, as_count_of=Passengers)\n    And, be sure to create the second Rule:\n        Rule.constraint(validate=Airplane,\n                    as_condition=lambda row: row.passenger_count <= row.seating_capacity,\n                    error_msg=\"Airplane value total ({row.passenger_count}) exceeds limit ({row.seating_capacity})\")\n\n\nFor \"more than\" constraints, create columns with count rules:\n\nPrompt Reject Employees with more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n\nFor \"any\" constraints, create columns with count rules:\n\nPrompt Reject Employees with any class 5 Felonies or more than 3 Felonies.\n\nResponse:\n    First Rule is to create:\n        Rule.count(derive=Employee.class_5_felony_count, as_count_of=Felonies, where=class>5)\n        Rule.count(derive=Employee.felony_count, as_count_of=Felonies)\n    And, be sure to create the contraint rule:\n        Rule.constraint(validate=Employee,\n                    as_condition=lambda row: row.class_5_felony_count > 0 or row.felony_count>3,\n                    error_msg=\"Employee has excessive Felonies\")\n\n"}, {"role": "assistant", "content": "{\n    \"models\": [\n        {\n            \"classname\": \"Teacher\",\n            \"code\": \"class Teacher(Base):\\n    \\\"\\\"\\\"description: Stores teacher information. Each teacher can be assigned to multiple courses.\\\"\\\"\\\"\\n    __tablename__ = 'teachers'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String)\\n    email = Column(String)\\n    course_count = Column(Integer, default=0)  # Corresponds to logic rule on teacher capacity control\",\n            \"description\": \"Stores teacher information. Each teacher can be assigned to multiple courses.\",\n            \"name\": \"Teacher\"\n        },\n        {\n            \"classname\": \"Course\",\n            \"code\": \"class Course(Base):\\n    \\\"\\\"\\\"description: Stores course information. Each course can have multiple offerings.\\\"\\\"\\\"\\n    __tablename__ = 'courses'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    title = Column(String)\\n    charge = Column(Integer)\\n    teacher_id = Column(Integer, ForeignKey('teachers.id'))\",\n            \"description\": \"Stores course information. Each course can have multiple offerings.\",\n            \"name\": \"Course\"\n        },\n        {\n            \"classname\": \"Student\",\n            \"code\": \"class Student(Base):\\n    \\\"\\\"\\\"description: Stores student information. Each student can enroll in multiple offerings.\\\"\\\"\\\"\\n    __tablename__ = 'students'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    name = Column(String)\\n    email = Column(String)\\n    budget = Column(Integer)\\n    enrollment_count = Column(Integer, default=0)  # Corresponds to logic rule on student enrollments\\n    total_charges = Column(Integer, default=0)  # Corresponds to sum of charges for budget control\",\n            \"description\": \"Stores student information. Each student can enroll in multiple offerings.\",\n            \"name\": \"Student\"\n        },\n        {\n            \"classname\": \"Offering\",\n            \"code\": \"class Offering(Base):\\n    \\\"\\\"\\\"description: Represents an offering of a course, with enrollments.\\\"\\\"\\\"\\n    __tablename__ = 'offerings'\\n\\n    id = Column(Integer, primary_key=True, autoincrement=True)\\n    course_id = Column(Integer, ForeignKey('courses.id'))\\n    student_id = Column(Integer, ForeignKey('students.id'))\\n    charge = Column(Integer)  # Copied from Course charge to Offering charge\",\n            \"description\": \"Represents an offering of a course, with enrollments.\",\n            \"name\": \"Offering\"\n        }\n    ],\n    \"rules\": [\n        {\n            \"name\": \"Teacher Course Capacity\",\n            \"description\": \"Ensures a teacher is not assigned more than 5 courses.\",\n            \"use_case\": \"capacity\",\n            \"code\": \"Rule.count(derive=Teacher.course_count, as_count_of=Course)\\nRule.constraint(validate=Teacher,\\n                as_condition=lambda row: row.course_count <= 5,\\n                error_msg=\\\"Teacher has been assigned more than 5 courses\\\")\"\n        },\n        {\n            \"name\": \"Student Enrollment Capacity\",\n            \"description\": \"Ensures a student does not enroll in more than 6 courses.\",\n            \"use_case\": \"capacity\",\n            \"code\": \"Rule.count(derive=Student.enrollment_count, as_count_of=Offering)\\nRule.constraint(validate=Student,\\n                as_condition=lambda row: row.enrollment_count <= 6,\\n                error_msg=\\\"Student enrollment exceeds the allowed 6 courses\\\")\"\n        },\n        {\n            \"name\": \"Course Charge Copy\",\n            \"description\": \"Copies the charge from the course to the offering.\",\n            \"use_case\": \"budget_control\",\n            \"code\": \"Rule.copy(derive=Offering.charge, from_parent=Course.charge)\"\n        },\n        {\n            \"name\": \"Student Budget Control\",\n            \"description\": \"Ensures total charges of a student\\u2019s enrollments do not exceed their budget.\",\n            \"use_case\": \"budget_control\",\n            \"code\": \"Rule.sum(derive=Student.total_charges, as_sum_of=Offering.charge)\\nRule.constraint(validate=Student,\\n                as_condition=lambda row: row.total_charges <= row.budget,\\n                error_msg=\\\"Student's enrollment charges exceed budget\\\")\"\n        }\n    ],\n    \"test_data\": \"# Create test data for Teachers\\nteacher1 = Teacher(name=\\\"Alice Smith\\\", email=\\\"alice@example.com\\\", course_count=2)\\nteacher2 = Teacher(name=\\\"Bob Jones\\\", email=\\\"bob@example.com\\\", course_count=4)\\nteacher3 = Teacher(name=\\\"Carol White\\\", email=\\\"carol@example.com\\\", course_count=1)\\nteacher4 = Teacher(name=\\\"Dave Brown\\\", email=\\\"dave@example.com\\\", course_count=0)\\n\\n# Create test data for Courses\\ncourse1 = Course(title=\\\"Math 101\\\", charge=150, teacher_id=1)\\ncourse2 = Course(title=\\\"Physics 101\\\", charge=200, teacher_id=1)\\ncourse3 = Course(title=\\\"Chemistry 101\\\", charge=150, teacher_id=2)\\ncourse4 = Course(title=\\\"Biology 101\\\", charge=100, teacher_id=3)\\n\\n# Create test data for Students\\nstudent1 = Student(name=\\\"Eve Black\\\", email=\\\"eve@example.com\\\", budget=800, enrollment_count=3, total_charges=450)\\nstudent2 = Student(name=\\\"Frank Green\\\", email=\\\"frank@example.com\\\", budget=400, enrollment_count=1, total_charges=150)\\nstudent3 = Student(name=\\\"Grace Blue\\\", email=\\\"grace@example.com\\\", budget=600, enrollment_count=2, total_charges=300)\\nstudent4 = Student(name=\\\"Hank Yellow\\\", email=\\\"hank@example.com\\\", budget=1000, enrollment_count=0, total_charges=0)\\n\\n# Create test data for Offerings\\noffering1 = Offering(course_id=1, student_id=1, charge=150)\\noffering2 = Offering(course_id=2, student_id=1, charge=200)\\noffering3 = Offering(course_id=3, student_id=2, charge=150)\\noffering4 = Offering(course_id=1, student_id=3, charge=150)\",\n    \"name\": \"EducationalSystem\"\n}"}]}
