Create a system with customers, orders, items and products.

Include a notes field for orders.

LogicBank 

Use Case: enforce the Check Credit for ready orders:
1. Customer.balance <= credit_limit
2. Customer.balance = Sum(Order.amount_total where date_shipped is null and ready is True)
3. Order.amount_total = Sum(Item.amount)
4. Item.amount = quantity * unit_price
5. Store the Item.unit_price as a copy from Product.unit_price

Use Case: Compute Products ordered
1. Item.ready = Order.ready
2. Product.total_ordered = sum(Item.quantity) where ready == True
3. Product.reorder_required = quantity_on_hand <= total_ordered

Use Case: No Empty Orders
1. Order.item_count = Count(Items)
2. When setting the date_shipped, item_count must be > 0.



    # Logic from GenAI: (or, use your IDE w/ code completion)

    # Logic Bank rules to enforce balance constraints and derivations for customers.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None and row.ready is True);
    Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg="Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})")

    # Sum the items to calculate order's total amount.
    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)

    # Calculate item amount based on quantity and unit price.
    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)

    # Copy unit price from product to item.
    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)

    # Set item ready state based on order ready state.
    Rule.formula(derive=Item.ready, as_expression=lambda row: row.order.ready)

    # Calculate total products ordered when ready.
    Rule.sum(derive=Product.total_ordered, as_sum_of=Item.quantity, where=lambda row: row.ready == True)

    # Determine if reorder is required based on total ordered.
    Rule.formula(derive=Product.reorder_required, as_expression=lambda row: row.quantity_on_hand <= row.total_ordered)

    # Count items in an order and ensure no empty orders when shipped.
    Rule.count(derive=Order.item_count, as_count_of=Item);
    Rule.constraint(validate=Order, as_condition=lambda row: row.date_shipped is not None and row.item_count > 0, error_msg="Cannot ship an order with no items")

    # End Logic from GenAI

