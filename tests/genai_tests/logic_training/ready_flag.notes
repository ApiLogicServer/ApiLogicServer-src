Create a system with customers, orders, items and products.

Include a notes field for orders.

LogicBank 

Use Case: enforce the Check Credit for ready orders:
1. Customer.balance <= credit_limit
2. Customer.balance = Sum(Order.amount_total where date_shipped is null and ready is True)
3. Order.amount_total = Sum(Item.amount)
4. Item.amount = quantity * unit_price
5. Store the Item.unit_price as a copy from Product.unit_price

Use Case: Compute Products ordered
1. Item.ready = Order.ready
2. Product.total_ordered = sum(Item.quantity) where ready == True
3. Product.reorder_required = quantity_on_hand <= total_ordered

Use Case: No Empty Orders
1. Order.item_count = Count(Items)
2. When setting the date_shipped, item_count must be > 0.



    # Logic from GenAI: (or, use your IDE w/ code completion)

    # Ensure customer balance does not exceed credit limit
    Rule.constraint(validate=Customer,
                as_condition=lambda row: row.balance <= row.credit_limit,
                error_msg="balance ({row.balance}) exceeds credit ({row.credit_limit})")

    # Derive customer balance from order amounts
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total,
         where=lambda row: row.date_shipped is None and row.ready is True)

    # Derive order amount total as sum of item amounts
    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)

    # Calculate item amount from quantity and unit_price
    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)

    # Copy item unit price from product
    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)

    # Set item ready status as order ready status
    Rule.formula(derive=Item.ready, as_expression=lambda row: row.order.ready)

    # Sum of item quantities where ready is true for the product
    Rule.sum(derive=Product.total_ordered, as_sum_of=Item.quantity, where=lambda row: row.ready == True)

    # Check if reorder is required based on quantity on hand and total ordered
    Rule.constraint(validate=Product,
                as_condition=lambda row: row.quantity_on_hand <= row.total_ordered,
                error_msg="Reorder required for product {row.name}")

    # Count the number of items in an order
    Rule.count(derive=Order.item_count, as_count_of=Item)

    # Ensure an order has at least one item before shipment
    Rule.constraint(validate=Order,
                as_condition=lambda row: not (row.date_shipped is not None and row.item_count == 0),
                error_msg="Cannot ship an empty order")

    # End Logic from GenAI

