Create a system with customers, orders, items and products.

Include a notes field for orders.

Use LogicBank to enforce the Check Credit requirement:
    1. The Customer's balance is less than the credit limit
    2. The Customer's balance is the sum of the Order amount_total where date_shipped is null
    3. The Order's amount_total is the sum of the Item amount
    4. The Item amount is the quantity * unit_price
    5. The Item unit_price is copied from the Product unit_price

Use Case: No Empty Orders
When setting the date_shipped, there must be Items.


Creates logic:

    # Logic from GenAI: (or, use your IDE w/ code completion)

    # Ensure the customer's balance does not exceed their credit limit.
    Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg="Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})")

    # Derive the customer balance as the sum of order amounts where the date_shipped is null.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)

    # Derive the order amount total as the sum of item amounts.
    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)

    # Calculate the item amount as quantity times unit price.
    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)

    # Copies the unit price from the product to the item.
    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)

    # Enforce that an order must have items before being shipped.
    Rule.constraint(validate=Order, as_condition=lambda row: row.amount_total > 0 or row.date_shipped is None, error_msg="Cannot ship an order without items.")

    # End Logic from GenAI
