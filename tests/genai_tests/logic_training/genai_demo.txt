Create a system with customers, orders, items and products.

Include a notes field for orders.

Use LogicBank to enforce the Check Credit Use Case:
1. Customer.balance <= credit_limit
2. Customer.balance = Sum(Order.amount_total where date_shipped is null)
3. Order.amount_total = Sum(Item.amount)
4. Item.amount = quantity * unit_price
5. Store the Item.unit_price as a copy from Product.unit_price

Use Case: No Empty Orders
1. Order.item_count = Count(Items)
2. When setting the date_shipped, item_count must be > 0.

Creates Logic:

    # Logic from GenAI: (or, use your IDE w/ code completion)

    # Ensure customer balance does not exceed credit limit.
    Rule.constraint(validate=Customer,
                as_condition=lambda row: row.balance <= row.credit_limit,
                error_msg="Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})")

    # Derive the customer's balance as the sum of order amounts where not shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total,
         where=lambda row: row.date_shipped is None)

    # Derive the order's total amount as the sum of its items' amounts.
    Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)

    # Calculate item amount based on quantity and unit price.
    Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)

    # Copy unit_price from Product to Item.
    Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)

    # Derive the count of items in the order.
    Rule.count(derive=Order.item_count, as_count_of=Item)

    # Ensure orders have items before being shipped.
    Rule.constraint(validate=Order,
                as_condition=lambda row: row.date_shipped is not None and row.item_count > 0,
                error_msg="Cannot ship an order with no items.")

    # End Logic from GenAI
