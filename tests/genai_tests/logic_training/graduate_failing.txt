Students have probations and sick days.

LogicBank
A Student can graduate unless there are more than 2 probations, or 100 sick days.

(terrible test data)

a little ambiguous - "is eligible" is a contraint, or an attr?



Rephrase as follows:

Students have probations and sick days.

LogicBank
A Student can be marked as can-graduate only if there are less than 2 probations, and less than 100 sick days.



Better, but it is not seeing this as a 'state' transition:

    # Rule to determine if a student can graduate based on probation and sick days.
    Rule.constraint(validate=Student, as_condition=lambda row: row.probation_count < 2 and row.sick_days_total < 100, error_msg="Student cannot graduate due to probation count or sick days.")



Rephrase as follows (and, learning, denote prior as 'same response')

Students have probations and sick days.

LogicBank
Signal an error if a Student's can-graduate is True, and there are more 2 probations, or more than 100 sick days.


This generated logic that is  1) invalid "where" on counts, and   2) constraint failed to mention can-graduate

    # Logic from GenAI: (or, use your IDE w/ code completion)

    # Derive student probation count from probation records.
    Rule.count(derive=Student.probations, as_count_of=Probation, where=lambda row: row.student_id == row.Student.id)

    # Derive student sick day count from sick day records.
    Rule.count(derive=Student.sick_days, as_count_of=SickDay, where=lambda row: row.student_id == row.Student.id)

    # Ensure students can graduate if they have less than 2 probations and less than 100 sick days.
    Rule.constraint(validate=Student, as_condition=lambda row: (row.probations < 2 and row.sick_days < 100), error_msg="Student cannot graduate due to excessive probations ({row.probations}) or sick days ({row.sick_days}).")

    # End Logic from GenAI
