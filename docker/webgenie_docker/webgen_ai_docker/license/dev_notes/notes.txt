The following commands have proved useful:

    # troubleshooting

    # Get the host name of the tnas device 
    uname -n

    # exec into the running container
    docker exec -it webgenai /bin/bash

    # modify the internal host name for target host name
    sed -i 's/ localhost/ tnas-appliance.local/g' /etc/nginx/wg.conf

    nginx -s reload

    # check processes running in container
    ss -lntl

    # cat the wg.conf
    cat /etc/nginx/wg.conf

    # start webgini interactive mode
    cd /opt/webgenai
    bash arun.sh

    # check the Projects endpoint
    curl localhost/api/Project

This explores an approach to licensing enforcement on docker start

license-generator creates a license (add such code into license portal, later)

user places license in webg_config
license_checker validates it.

license_checker is added to webg image, invoked on start in license/startup.sh before invoking arun.sh
dockerfile startup: CMD ["bash", "-c", "/home/license/startup.sh"]

Run from Manager with:
docker run -it --rm --name webgenie -p 8282:80  --env-file ./system/genai/webg_local/webg_config/web_genai.txt -v ./system/genai/webg_local/webg_temp:/tmp  -v ./system/genai/webg_local/webg_config:/config -v ./system/genai/webg_local/webg_projects:/opt/projects apilogicserver/web_genai

3/6
    - image tagged with hash, and now includes docker cli 
    - but Got permission denied while trying to connect to the Docker daemon 
        - docker socket permissions - probably not req'd
            ls -l /var/run/docker.sock should have...
                srw-rw---- 1 root docker 0 Mar  6 12:34 /var/run/docker.sock
            sudo chmod 666 /var/run/docker.sock
        - run as user root solved it

    - now see if container can find its hash
        
WebGenAI Startup 0.1 
Tags for apilogicserver/web_genai:
HASH.1bf8415e11f5ad8d0e97bb44a78625575714bc97ef50f5ac106334fb90c40a3e
latest
HASH.788317db692f7dc69a37b603cf4ef0678f0a97a78d3e6cc4a4293fe3cb9ea416


# for testing, exit here
if [ $# -eq 0 ]; then
    echo "No arguments provided"
    exit 0
fi

valhuber
the context for these tests: we are trying to build tamper protection for apilogicserver/web_genai, by creating a tag at build time of the container hash, and then when the container is started, verify the container hash matches the tag.

The created tag appears to be consistent - if I run hash.sh, it reproduces the value.

The problem is shown in the terminal window - when I run the container startup.sh script, the container hash it finds (b8b...) does not match the tag (HASH.955...)

docker images...
docker rmi xxx -f

https://jfrog.com/devops-tools/article/3-steps-to-securing-your-docker-container-deployments/

https://www.geeksforgeeks.org/docker-security-tools-to-secure-docker-container-images/


update 3/11
    * according to all reports, you cannot seal the container - it's always updateable
    * support removed, saved to: docker/webgenie_docker/webgen_ai_docker/license/z-tamper-tags-failed


update 3/13
    * license server: http://ec2-50-19-38-47.compute-1.amazonaws.com/registration.html
        * phone # is optional
        * maybe combine manager / local webG setup?  what was plan for genai-org projects?
    * signup
        * special links for each partner (eg, link in T/Master app store)
        * default link in startup.sh

update 3/19
    * seeing "Failed to move project"
    * removed license, unprotected dirs, ran from mgr: still fails

update 3/21
    * working fine locally, deployed to docker hub (with debug update)
        * but failing with nginx config not complete on TerraMaster
    * still testing, but appears wg start can be as simple as:
        * mkdir webgenie
        * cd webgenie
        * cp <docker-compose.yml> webgenie
        * update the 2 licenses at end
        * docker compose up

update 3/32
    * docker/webgenie_docker/webgen_ai_docker/nginx/wg.conf
        * server_name localhost;  -->  server_name ~^(.*)$;
        * seems to work locally