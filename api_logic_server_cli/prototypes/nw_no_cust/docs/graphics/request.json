[
    {
        "role": "user",
        "content": "You are a data modelling expert and python software architect who expands on user input ideas. \n\n<responseFormat>\nclass Rule(BaseModel):\n    name: str\n    description: str\n    use_case: str # specified use case or requirement name (use 'General' if missing)\n    entity: str # the entity being constrained or derived\n    code: str # logicbank rule code\n    \nclass Model(BaseModel):\n    classname: str\n    code: str # sqlalchemy model code\n    sqlite_create: str # sqlite create table statement\n    description: str\n    name: str\n\nclass TestDataRow(BaseModel):\n    test_data_row_variable: str  # the Python test data row variable\n    code: str  # Python code to create a test data row instance\n\nclass Graphic(BaseModel):\n    sqlalchemy_query: str  # sqlalchemy query using group by, returns result = { \"result\": [ (\"name\", \"value\")  ] }\n    sql_query: str  # sql query using group by, returns result = { \"result\": [ (\"name\", \"value\")  ] }\n    classes_used: str # comma-delimited list of classes used in sqlalchemy_query\n    name: str  # suggested Python name for sqlalchemy_query\n    html_code: str # create a java script app to show a bar chart from sqlalchemy_query result\n\nclass WGResult(BaseModel):  # must match system/genai/prompt_inserts/response_format.prompt\n    # response: str # result\n    models : List[Model] # list of sqlalchemy classes in the response\n    rules : List[Rule] # list rule declarations\n    graphics: List[Graphic] # list of Graphic objects\n    test_data: str\n    test_data_rows: List[TestDataRow]  # list of test data rows\n    test_data_sqlite: str # test data as sqlite INSERT statements\n    name: str  # suggest a short name for the project\n\nFormat the response as a WGResult.\n\n</responseFormat>\n\n\nCreate WGResult Graphics for prompts like 'graph sales by region'.\n    * use 'sales by region' to create a WGResult Graphic.sqlalchemy_query\n    * Be sure to use class names, not table names\n    * for example, using Northwind:\n        # SQLAlchemy query for Sales by Category\n        sales_by_category = (\n            session.query(\n                Category.CategoryName,\n                func.sum(OrderDetail.Quantity * OrderDetail.UnitPrice * (1 - OrderDetail.Discount)).label(\"TotalSales\")\n            )\n            .join(Product, category.Id == Product.CategoryId)\n            .join(OrderDetail, Product.Id == OrderDetail.ProductId)\n            .join(Order, OrderDetail.OrderId == Order.Id)\n            .filter(Order.ShippedDate.isnot(None))  # Consider only shipped orders\n            .group_by(Category.CategoryName)\n            .order_by(func.sum(OrderDetail.Quantity * OrderDetail.UnitPrice * (1 - OrderDetail.Discount)).desc())\n        )\n\n# coding: utf-8\n\nfrom sqlalchemy import DECIMAL, DateTime  # API Logic Server GenAI assist\n\nfrom sqlalchemy import Boolean, Column, DECIMAL, Date, Double, ForeignKey, ForeignKeyConstraint, Integer, String, Table, Text, text\n\nfrom sqlalchemy.orm import relationship\n\nfrom sqlalchemy.ext.declarative import declarative_base\n\n\n\n########################################################################################################################\n\n# Classes describing database for SqlAlchemy ORM, initially created by schema introspection.\n\n#\n\n# Alter this file per your database maintenance policy\n\n#    See https://apilogicserver.github.io/Docs/Project-Rebuild/#rebuilding\n\n#\n\n# Created:  March 25, 2025 19:54:24\n\n# Database: sqlite:////Users/val/dev/ApiLogicServer/ApiLogicServer-dev/build_and_test/ApiLogicServer/samples/nw_sample_nocust/database/db.sqlite\n\n# Dialect:  sqlite\n\n#\n\n# mypy: ignore-errors\n\n########################################################################################################################\n\n \n\nfrom database.system.SAFRSBaseX import SAFRSBaseX, TestBase\n\nfrom flask_login import UserMixin\n\nimport safrs, flask_sqlalchemy, os\n\nfrom safrs import jsonapi_attr\n\nfrom flask_sqlalchemy import SQLAlchemy\n\nfrom sqlalchemy.orm import relationship\n\nfrom sqlalchemy.orm import Mapped\n\nfrom sqlalchemy.sql.sqltypes import NullType\n\nfrom typing import List\n\n\n\ndb = SQLAlchemy() \n\nBase = declarative_base()  # type: flask_sqlalchemy.model.DefaultMeta\n\nmetadata = Base.metadata\n\n\n\n#NullType = db.String  # datatype fixup\n\n#TIMESTAMP= db.TIMESTAMP\n\n\n\nfrom sqlalchemy.dialects.sqlite import *\n\n\n\nif os.getenv('APILOGICPROJECT_NO_FLASK') is None or os.getenv('APILOGICPROJECT_NO_FLASK') == 'None':\n\n    Base = SAFRSBaseX   # enables rules to be used outside of Flask, e.g., test data loading\n\nelse:\n\n    Base = TestBase     # ensure proper types, so rules work for data loading\n\n    print('*** Models.py Using TestBase ***')\n\n\n\n\n\n\n\nclass Category(Base):  # type: ignore\n\n    __tablename__ = 'CategoryTableNameTest'\n\n    _s_collection_name = 'Category'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    CategoryName_ColumnName = Column(String(8000))\n\n    Description = Column(String(8000))\n\n    Client_id = Column(Integer)\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass Customer(Base):  # type: ignore\n\n    __tablename__ = 'Customer'\n\n    _s_collection_name = 'Customer'  # type: ignore\n\n\n\n    Id = Column(String(8000), primary_key=True)\n\n    CompanyName = Column(String(8000))\n\n    ContactName = Column(String(8000))\n\n    ContactTitle = Column(String(8000))\n\n    Address = Column(String(8000))\n\n    City = Column(String(8000))\n\n    Region = Column(String(8000))\n\n    PostalCode = Column(String(8000))\n\n    Country = Column(String(8000))\n\n    Phone = Column(String(8000))\n\n    Fax = Column(String(8000))\n\n    Balance : DECIMAL = Column(DECIMAL)\n\n    CreditLimit : DECIMAL = Column(DECIMAL)\n\n    OrderCount = Column(Integer, server_default=text(\"0\"))\n\n    UnpaidOrderCount = Column(Integer, server_default=text(\"0\"))\n\n    Client_id = Column(Integer)\n\n    allow_client_generated_ids = True\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"Customer\")\n\n\n\n\n\n\n\nclass CustomerDemographic(Base):  # type: ignore\n\n    __tablename__ = 'CustomerDemographic'\n\n    _s_collection_name = 'CustomerDemographic'  # type: ignore\n\n\n\n    Id = Column(String(8000), primary_key=True)\n\n    CustomerDesc = Column(String(8000))\n\n    allow_client_generated_ids = True\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass Department(Base):  # type: ignore\n\n    __tablename__ = 'Department'\n\n    _s_collection_name = 'Department'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    DepartmentId = Column(ForeignKey('Department.Id'))\n\n    DepartmentName = Column(String(100))\n\n    SecurityLevel = Column(Integer, server_default=text(\"0\"))\n\n\n\n    # parent relationships (access parent)\n\n    Department : Mapped[\"Department\"] = relationship(remote_side=[Id], back_populates=(\"DepartmentList\"))\n\n\n\n    # child relationships (access children)\n\n    DepartmentList : Mapped[List[\"Department\"]] = relationship(back_populates=\"Department\")\n\n    EmployeeList : Mapped[List[\"Employee\"]] = relationship(foreign_keys='[Employee.OnLoanDepartmentId]', back_populates=\"OnLoanDepartment\")\n\n    WorksForEmployeeList : Mapped[List[\"Employee\"]] = relationship(foreign_keys='[Employee.WorksForDepartmentId]', back_populates=\"WorksForDepartment\")\n\n\n\n\n\n\n\nclass Location(Base):  # type: ignore\n\n    __tablename__ = 'Location'\n\n    _s_collection_name = 'Location'  # type: ignore\n\n\n\n    country = Column(String(50), primary_key=True)\n\n    city = Column(String(50), primary_key=True)\n\n    notes = Column(String(256))\n\n    allow_client_generated_ids = True\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"Location\")\n\n\n\n\n\n\n\nclass Product(Base):  # type: ignore\n\n    __tablename__ = 'Product'\n\n    _s_collection_name = 'Product'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    ProductName = Column(String(8000))\n\n    SupplierId = Column(Integer, nullable=False)\n\n    CategoryId = Column(Integer, nullable=False)\n\n    QuantityPerUnit = Column(String(8000))\n\n    UnitPrice : DECIMAL = Column(DECIMAL, nullable=False)\n\n    UnitsInStock = Column(Integer, nullable=False)\n\n    UnitsOnOrder = Column(Integer, nullable=False)\n\n    ReorderLevel = Column(Integer, nullable=False)\n\n    Discontinued = Column(Integer, nullable=False)\n\n    UnitsShipped = Column(Integer)\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n    OrderDetailList : Mapped[List[\"OrderDetail\"]] = relationship(back_populates=\"Product\")\n\n\n\n\n\n\n\nt_ProductDetails_View = Table(\n\n    'ProductDetails_View', metadata,\n\n    Column('Id', Integer),\n\n    Column('ProductName', String(8000)),\n\n    Column('SupplierId', Integer),\n\n    Column('CategoryId', Integer),\n\n    Column('QuantityPerUnit', String(8000)),\n\n    Column('UnitPrice', DECIMAL),\n\n    Column('UnitsInStock', Integer),\n\n    Column('UnitsOnOrder', Integer),\n\n    Column('ReorderLevel', Integer),\n\n    Column('Discontinued', Integer),\n\n    Column('UnitsShipped', Integer),\n\n    Column('CategoryName_ColumnName', String(8000)),\n\n    Column('CategoryDescription', String(8000)),\n\n    Column('SupplierName', String(8000)),\n\n    Column('SupplierRegion', String(8000))\n\n)\n\n\n\n\n\nclass Region(Base):  # type: ignore\n\n    __tablename__ = 'Region'\n\n    _s_collection_name = 'Region'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    RegionDescription = Column(String(8000))\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass SampleDBVersion(Base):  # type: ignore\n\n    __tablename__ = 'SampleDBVersion'\n\n    _s_collection_name = 'SampleDBVersion'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    Notes = Column(String(800))\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass Shipper(Base):  # type: ignore\n\n    __tablename__ = 'Shipper'\n\n    _s_collection_name = 'Shipper'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    CompanyName = Column(String(8000))\n\n    Phone = Column(String(8000))\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass Supplier(Base):  # type: ignore\n\n    __tablename__ = 'Supplier'\n\n    _s_collection_name = 'Supplier'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    CompanyName = Column(String(8000))\n\n    ContactName = Column(String(8000))\n\n    ContactTitle = Column(String(8000))\n\n    Address = Column(String(8000))\n\n    City = Column(String(8000))\n\n    Region = Column(String(8000))\n\n    PostalCode = Column(String(8000))\n\n    Country = Column(String(8000))\n\n    Phone = Column(String(8000))\n\n    Fax = Column(String(8000))\n\n    HomePage = Column(String(8000))\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass Territory(Base):  # type: ignore\n\n    __tablename__ = 'Territory'\n\n    _s_collection_name = 'Territory'  # type: ignore\n\n\n\n    Id = Column(String(8000), primary_key=True)\n\n    TerritoryDescription = Column(String(8000))\n\n    RegionId = Column(Integer, nullable=False)\n\n    allow_client_generated_ids = True\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n    EmployeeTerritoryList : Mapped[List[\"EmployeeTerritory\"]] = relationship(back_populates=\"Territory\")\n\n\n\n\n\n\n\nclass Union(Base):  # type: ignore\n\n    __tablename__ = 'Union'\n\n    _s_collection_name = 'Union'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    Name = Column(String(80))\n\n\n\n    # parent relationships (access parent)\n\n\n\n    # child relationships (access children)\n\n    EmployeeList : Mapped[List[\"Employee\"]] = relationship(back_populates=\"Union\")\n\n\n\n\n\n\n\nclass Employee(Base):  # type: ignore\n\n    __tablename__ = 'Employee'\n\n    _s_collection_name = 'Employee'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    LastName = Column(String(8000))\n\n    FirstName = Column(String(8000))\n\n    Title = Column(String(8000))\n\n    TitleOfCourtesy = Column(String(8000))\n\n    BirthDate = Column(String(8000))\n\n    HireDate = Column(String(8000))\n\n    Address = Column(String(8000))\n\n    City = Column(String(8000))\n\n    Region = Column(String(8000))\n\n    PostalCode = Column(String(8000))\n\n    Country = Column(String(8000))\n\n    HomePhone = Column(String(8000))\n\n    Extension = Column(String(8000))\n\n    Notes = Column(String(8000))\n\n    ReportsTo = Column(Integer, index=True)\n\n    PhotoPath = Column(String(8000))\n\n    EmployeeType = Column(String(16), server_default=text(\"Salaried\"))\n\n    Salary : DECIMAL = Column(DECIMAL)\n\n    WorksForDepartmentId = Column(ForeignKey('Department.Id'))\n\n    OnLoanDepartmentId = Column(ForeignKey('Department.Id'))\n\n    UnionId = Column(ForeignKey('Union.Id'))\n\n    Dues : DECIMAL = Column(DECIMAL)\n\n    Email = Column(Text)\n\n\n\n    # parent relationships (access parent)\n\n    OnLoanDepartment : Mapped[\"Department\"] = relationship(foreign_keys='[Employee.OnLoanDepartmentId]', back_populates=(\"EmployeeList\"))\n\n    Union : Mapped[\"Union\"] = relationship(back_populates=(\"EmployeeList\"))\n\n    WorksForDepartment : Mapped[\"Department\"] = relationship(foreign_keys='[Employee.WorksForDepartmentId]', back_populates=(\"WorksForEmployeeList\"))\n\n\n\n    # child relationships (access children)\n\n    EmployeeAuditList : Mapped[List[\"EmployeeAudit\"]] = relationship(back_populates=\"Employee\")\n\n    EmployeeTerritoryList : Mapped[List[\"EmployeeTerritory\"]] = relationship(back_populates=\"Employee\")\n\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"Employee\")\n\n\n\n\n\n\n\nclass EmployeeAudit(Base):  # type: ignore\n\n    __tablename__ = 'EmployeeAudit'\n\n    _s_collection_name = 'EmployeeAudit'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    Title = Column(String)\n\n    Salary : DECIMAL = Column(DECIMAL)\n\n    LastName = Column(String)\n\n    FirstName = Column(String)\n\n    EmployeeId = Column(ForeignKey('Employee.Id'))\n\n    CreatedOn = Column(Text)\n\n    UpdatedOn = Column(Text)\n\n    CreatedBy = Column(Text)\n\n    UpdatedBy = Column(Text)\n\n\n\n    # parent relationships (access parent)\n\n    Employee : Mapped[\"Employee\"] = relationship(back_populates=(\"EmployeeAuditList\"))\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass EmployeeTerritory(Base):  # type: ignore\n\n    __tablename__ = 'EmployeeTerritory'\n\n    _s_collection_name = 'EmployeeTerritory'  # type: ignore\n\n\n\n    Id = Column(String(8000), primary_key=True)\n\n    EmployeeId = Column(ForeignKey('Employee.Id'), nullable=False)\n\n    TerritoryId = Column(ForeignKey('Territory.Id'))\n\n    allow_client_generated_ids = True\n\n\n\n    # parent relationships (access parent)\n\n    Employee : Mapped[\"Employee\"] = relationship(back_populates=(\"EmployeeTerritoryList\"))\n\n    Territory : Mapped[\"Territory\"] = relationship(back_populates=(\"EmployeeTerritoryList\"))\n\n\n\n    # child relationships (access children)\n\n\n\n\n\n\n\nclass Order(Base):  # type: ignore\n\n    __tablename__ = 'Order'\n\n    _s_collection_name = 'Order'  # type: ignore\n\n    __table_args__ = (\n\n        ForeignKeyConstraint(['Country', 'City'], ['Location.country', 'Location.city']),\n\n    )\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    CustomerId = Column(ForeignKey('Customer.Id'), nullable=False, index=True)\n\n    EmployeeId = Column(ForeignKey('Employee.Id'), nullable=False, index=True)\n\n    OrderDate = Column(String(8000))\n\n    RequiredDate = Column(Date)\n\n    ShippedDate = Column(String(8000))\n\n    ShipVia = Column(Integer)\n\n    Freight : DECIMAL = Column(DECIMAL, server_default=text(\"0\"))\n\n    ShipName = Column(String(8000))\n\n    ShipAddress = Column(String(8000))\n\n    ShipCity = Column(String(8000))\n\n    ShipRegion = Column(String(8000))\n\n    ShipPostalCode = Column(String(8000))\n\n    ShipCountry = Column(String(8000))\n\n    AmountTotal : DECIMAL = Column(DECIMAL(10, 2))\n\n    Country = Column(String(50))\n\n    City = Column(String(50))\n\n    Ready = Column(Boolean)\n\n    OrderDetailCount = Column(Integer, server_default=text(\"0\"))\n\n    CloneFromOrder = Column(ForeignKey('Order.Id'))\n\n\n\n    # parent relationships (access parent)\n\n    Order : Mapped[\"Order\"] = relationship(remote_side=[Id], back_populates=(\"OrderList\"))\n\n    Location : Mapped[\"Location\"] = relationship(back_populates=(\"OrderList\"))\n\n    Customer : Mapped[\"Customer\"] = relationship(back_populates=(\"OrderList\"))\n\n    Employee : Mapped[\"Employee\"] = relationship(back_populates=(\"OrderList\"))\n\n\n\n    # child relationships (access children)\n\n    OrderList : Mapped[List[\"Order\"]] = relationship(back_populates=\"Order\")\n\n    OrderDetailList : Mapped[List[\"OrderDetail\"]] = relationship(back_populates=\"Order\")\n\n\n\n\n\n\n\nclass OrderDetail(Base):  # type: ignore\n\n    __tablename__ = 'OrderDetail'\n\n    _s_collection_name = 'OrderDetail'  # type: ignore\n\n\n\n    Id = Column(Integer, primary_key=True)\n\n    OrderId = Column(ForeignKey('Order.Id'), nullable=False, index=True)\n\n    ProductId = Column(ForeignKey('Product.Id'), nullable=False, index=True)\n\n    UnitPrice : DECIMAL = Column(DECIMAL)\n\n    Quantity = Column(Integer, server_default=text(\"1\"), nullable=False)\n\n    Discount = Column(Double, server_default=text(\"0\"))\n\n    Amount : DECIMAL = Column(DECIMAL)\n\n    ShippedDate = Column(String(8000))\n\n\n\n    # parent relationships (access parent)\n\n    Order : Mapped[\"Order\"] = relationship(back_populates=(\"OrderDetailList\"))\n\n    Product : Mapped[\"Product\"] = relationship(back_populates=(\"OrderDetailList\"))\n\n\n\n    # child relationships (access children)\n\nGraph Sales by Category"
    }
]