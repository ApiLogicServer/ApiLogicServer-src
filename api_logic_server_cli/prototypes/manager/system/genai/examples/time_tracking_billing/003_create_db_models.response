{
    "models": [
        {
            "classname": "Client",
            "code": "class Client(Base):\n    __tablename__ = 'client'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n    email = Column(String, nullable=False)\n    phone = Column(String, nullable=False)\n    total_hours = Column(DECIMAL(10, 2), default=0)\n    total_amount = Column(DECIMAL(10, 2), default=0)\n    budget_amount = Column(DECIMAL(10, 2), default=0)\n    is_over_budget = Column(Boolean, default=False)",
            "description": "Model representing clients for billing.",
            "name": "Client"
        },
        {
            "classname": "Project",
            "code": "class Project(Base):\n    __tablename__ = 'project'\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(Integer, ForeignKey('client.id'))\n    name = Column(String, nullable=False)\n    total_project_hours = Column(DECIMAL(10, 2), default=0)\n    total_project_amount = Column(DECIMAL(10, 2), default=0)\n    project_budget_amount = Column(DECIMAL(10, 2), default=0)\n    is_over_budget = Column(Boolean, default=False)",
            "description": "Model representing projects under a client.",
            "name": "Project"
        },
        {
            "classname": "Invoice",
            "code": "class Invoice(Base):\n    __tablename__ = 'invoice'\n\n    id = Column(Integer, primary_key=True)\n    invoice_date = Column(DateTime, nullable=False)\n    project_id = Column(Integer, ForeignKey('project.id'))\n    invoice_amount = Column(DECIMAL(10, 2), default=0)\n    payment_total = Column(DECIMAL(10, 2), default=0)\n    invoice_balance = Column(DECIMAL(10, 2), default=0)\n    is_paid = Column(Boolean, default=False)",
            "description": "Model representing invoices for projects.",
            "name": "Invoice"
        },
        {
            "classname": "Task",
            "code": "class Task(Base):\n    __tablename__ = 'task'\n\n    id = Column(Integer, primary_key=True)\n    project_id = Column(Integer, ForeignKey('project.id'))\n    name = Column(String, nullable=False)\n    description = Column(String, nullable=True)\n    total_task_hours_worked = Column(DECIMAL(10, 2), default=0)\n    total_task_amount_billed = Column(DECIMAL(10, 2), default=0)\n    task_budget_hours = Column(DECIMAL(10, 2), default=0)\n    is_over_budget = Column(Boolean, default=False)\n    invoice_id = Column(Integer, ForeignKey('invoice.id'))",
            "description": "Model representing tasks under a project.",
            "name": "Task"
        },
        {
            "classname": "Person",
            "code": "class Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(Integer, ForeignKey('client.id'))\n    name = Column(String, nullable=False)\n    email = Column(String, nullable=False)\n    phone = Column(String, nullable=False)\n    billing_rate = Column(DECIMAL(10, 2), default=0)\n    total_hours_entered = Column(DECIMAL(10, 2), default=0)\n    total_amount_billed = Column(DECIMAL(10, 2), default=0)",
            "description": "Model representing personnel working with clients.",
            "name": "Person"
        },
        {
            "classname": "Timesheet",
            "code": "class Timesheet(Base):\n    __tablename__ = 'timesheet'\n\n    id = Column(Integer, primary_key=True)\n    task_id = Column(Integer, ForeignKey('task.id'))\n    person_id = Column(Integer, ForeignKey('person.id'))\n    date_worked = Column(DateTime, nullable=False)\n    hours_worked = Column(DECIMAL(10, 2), default=0)\n    month = Column(Integer)\n    year = Column(Integer)\n    billing_rate = Column(DECIMAL(10, 2), default=0)\n    total_amount_billed = Column(DECIMAL(10, 2), default=0)",
            "description": "Model representing timesheets for tasks.",
            "name": "Timesheet"
        },
        {
            "classname": "Payment",
            "code": "class Payment(Base):\n    __tablename__ = 'payment'\n\n    id = Column(Integer, primary_key=True)\n    invoice_id = Column(Integer, ForeignKey('invoice.id'))\n    payment_amount = Column(DECIMAL(10, 2), default=0)\n    payment_date = Column(Date, nullable=False)\n    notes = Column(String, nullable=True)",
            "description": "Model representing payments made against invoices.",
            "name": "Payment"
        }
    ],
    "rules": [
        {
            "name": "Sum Client Total Hours",
            "description": "Total Hours is the sum of Project total project hours",
            "use_case": "Client",
            "entity": "Client",
            "code": "Rule.sum(derive=Client.total_hours, as_sum_of=Project.total_project_hours)"
        },
        {
            "name": "Sum Client Total Amount",
            "description": "Total Amount is the sum of Project total amount",
            "use_case": "Client",
            "entity": "Client",
            "code": "Rule.sum(derive=Client.total_amount, as_sum_of=Project.total_project_amount)"
        },
        {
            "name": "Formula: Client Is Over Budget",
            "description": "Is Over Budget is true when total amount exceeds budget amount",
            "use_case": "Client",
            "entity": "Client",
            "code": "Rule.formula(derive=Client.is_over_budget, as_expression=lambda row: row.total_amount > row.budget_amount)"
        },
        {
            "name": "Sum Project Total Project Hours",
            "description": "Total project hours is the sum of Task total task hours worked",
            "use_case": "Project",
            "entity": "Project",
            "code": "Rule.sum(derive=Project.total_project_hours, as_sum_of=Task.total_task_hours_worked)"
        },
        {
            "name": "Sum Project Total Project Amount",
            "description": "Total project amount is the sum of Task total amount billed",
            "use_case": "Project",
            "entity": "Project",
            "code": "Rule.sum(derive=Project.total_project_amount, as_sum_of=Task.total_task_amount_billed)"
        },
        {
            "name": "Formula: Project Is Over Budget",
            "description": "Is Over Budget when total project amount exceeds project budget amount",
            "use_case": "Project",
            "entity": "Project",
            "code": "Rule.formula(derive=Project.is_over_budget, as_expression=lambda row: row.total_project_amount > row.project_budget_amount)"
        },
        {
            "name": "Sum Task Total Task Hours Worked",
            "description": "Total task hours worked is the sum of the Timesheet hours worked",
            "use_case": "Task",
            "entity": "Task",
            "code": "Rule.sum(derive=Task.total_task_hours_worked, as_sum_of=Timesheet.hours_worked)"
        },
        {
            "name": "Sum Task Total Task Amount Billed",
            "description": "Total task amount billed is the sum of the Timesheet total amount billed",
            "use_case": "Task",
            "entity": "Task",
            "code": "Rule.sum(derive=Task.total_task_amount_billed, as_sum_of=Timesheet.total_amount_billed)"
        },
        {
            "name": "Formula: Task Is Over Budget",
            "description": "Formula: is Over Budget when total task hours worked exceeds task budget hours",
            "use_case": "Task",
            "entity": "Task",
            "code": "Rule.formula(derive=Task.is_over_budget, as_expression=lambda row: row.total_task_hours_worked > row.task_budget_hours)"
        },
        {
            "name": "Copy Timesheet Billing Rate",
            "description": "Copy billing rate from Person billing rate",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.copy(derive=Timesheet.billing_rate, from_parent=Person.billing_rate)"
        },
        {
            "name": "Formula Timesheet Total Amount Billed",
            "description": "The total amount billed is the Person billing rate times hours worked",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.formula(derive=Timesheet.total_amount_billed, as_expression=lambda row: row.billing_rate * row.hours_worked)"
        },
        {
            "name": "Timesheet Hours Constraint",
            "description": "Hours worked must be greater than 0 and less than 15",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.constraint(validate=Timesheet, as_condition=lambda row: 0 < row.hours_worked < 15, error_msg='Hours worked must be > 0 and < 15')"
        },
        {
            "name": "Sum Person Total Hours Entered",
            "description": "Total Hours entered is sum of timesheet hours worked",
            "use_case": "Person",
            "entity": "Person",
            "code": "Rule.sum(derive=Person.total_hours_entered, as_sum_of=Timesheet.hours_worked)"
        },
        {
            "name": "Formula Person Total Amount Billed",
            "description": "Total amount billed is total hours entered times billing rate",
            "use_case": "Person",
            "entity": "Person",
            "code": "Rule.formula(derive=Person.total_amount_billed, as_expression=lambda row: row.total_hours_entered * row.billing_rate)"
        },
        {
            "name": "Person Billing Rate Constraint",
            "description": "Billing rate must be greater than 0 and less than 200",
            "use_case": "Person",
            "entity": "Person",
            "code": "Rule.constraint(validate=Person, as_condition=lambda row: 0 < row.billing_rate < 200, error_msg='Billing rate must be > 0 and < 200')"
        },
        {
            "name": "Sum Invoice Invoice Amount",
            "description": "Invoice Amount is the sum of Task total amount billed",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.sum(derive=Invoice.invoice_amount, as_sum_of=Task.total_task_amount_billed)"
        },
        {
            "name": "Sum Invoice Payment Total",
            "description": "Payment total is the sum of Payment",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.sum(derive=Invoice.payment_total, as_sum_of=Payment.payment_amount)"
        },
        {
            "name": "Formula Invoice Balance",
            "description": "Invoice balance is invoice amount less payment total",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.formula(derive=Invoice.invoice_balance, as_expression=lambda row: row.invoice_amount - row.payment_total)"
        },
        {
            "name": "Formula Invoice Is Paid",
            "description": "Invoice is paid when invoice balance is zero",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.formula(derive=Invoice.is_paid, as_expression=lambda row: row.invoice_balance == 0)"
        }
    ],
    "test_data": "# Test data for Client\nclient1 = Client(id=1, name=\"Acme Corp\", email=\"acme@acme.com\", phone=\"123-456-7890\", total_hours=20, total_amount=5000, budget_amount=10000)\nclient2 = Client(id=2, name=\"Beta LLC\", email=\"beta@beta.com\", phone=\"987-654-3210\", total_hours=15, total_amount=3000, budget_amount=5000)\nclient3 = Client(id=3, name=\"Gamma Industries\", email=\"gamma@gamma.com\", phone=\"456-123-6789\", total_hours=30, total_amount=12000, budget_amount=15000)\nclient4 = Client(id=4, name=\"Delta Services\", email=\"delta@delta.com\", phone=\"789-321-6540\", total_hours=45, total_amount=9000, budget_amount=20000)\n\n# Test data for Project\nproject1 = Project(id=1, client_id=1, name=\"Project X\", total_project_hours=50, total_project_amount=8000, project_budget_amount=10000)\nproject2 = Project(id=2, client_id=1, name=\"Project Y\", total_project_hours=25, total_project_amount=4000, project_budget_amount=7000)\nproject3 = Project(id=3, client_id=2, name=\"Project Z\", total_project_hours=30, total_project_amount=3000, project_budget_amount=4000)\nproject4 = Project(id=4, client_id=3, name=\"Project Alpha\", total_project_hours=60, total_project_amount=15000, project_budget_amount=20000)\n\n# Test data for Invoice\ninvoice1 = Invoice(id=1, project_id=1, invoice_date=date(2023, 2, 15), invoice_amount=5000, payment_total=3000, invoice_balance=2000)\ninvoice2 = Invoice(id=2, project_id=2, invoice_date=date(2023, 3, 20), invoice_amount=1000, payment_total=1000, invoice_balance=0)\ninvoice3 = Invoice(id=3, project_id=3, invoice_date=date(2023, 4, 11), invoice_amount=2000, payment_total=1500, invoice_balance=500)\ninvoice4 = Invoice(id=4, project_id=4, invoice_date=date(2023, 5, 9), invoice_amount=7000, payment_total=5000, invoice_balance=2000)\n\n# Test data for Task\ntask1 = Task(id=1, project_id=1, name=\"Design Phase\", description=\"Initial design work\", total_task_hours_worked=15, total_task_amount_billed=1500, task_budget_hours=20)\ntask2 = Task(id=2, project_id=2, name=\"Development Phase\", description=\"Coding and implementation\", total_task_hours_worked=30, total_task_amount_billed=3000, task_budget_hours=40)\ntask3 = Task(id=3, project_id=3, name=\"Testing Phase\", description=\"QA and testing\", total_task_hours_worked=10, total_task_amount_billed=1000, task_budget_hours=15)\ntask4 = Task(id=4, project_id=4, name=\"Deployment Phase\", description=\"Deployment and support\", total_task_hours_worked=20, total_task_amount_billed=2000, task_budget_hours=25)\n\n# Test data for Person\nperson1 = Person(id=1, client_id=1, name=\"Alice Smith\", email=\"alice@example.com\", phone=\"111-222-3333\", billing_rate=50, total_hours_entered=10, total_amount_billed=500)\nperson2 = Person(id=2, client_id=2, name=\"Bob Brown\", email=\"bob@example.com\", phone=\"444-555-6666\", billing_rate=75, total_hours_entered=8, total_amount_billed=600)\nperson3 = Person(id=3, client_id=3, name=\"Charlie Johnson\", email=\"charlie@example.com\", phone=\"777-888-9999\", billing_rate=60, total_hours_entered=12, total_amount_billed=720)\nperson4 = Person(id=4, client_id=4, name=\"Dana White\", email=\"dana@example.com\", phone=\"123-987-6543\", billing_rate=85, total_hours_entered=15, total_amount_billed=1275)\n\n# Test data for Timesheet\ntimesheet1 = Timesheet(id=1, task_id=1, person_id=1, date_worked=date(2023, 1, 10), hours_worked=5, month=1, year=2023, billing_rate=50, total_amount_billed=250)\ntimesheet2 = Timesheet(id=2, task_id=1, person_id=2, date_worked=date(2023, 1, 12), hours_worked=4, month=1, year=2023, billing_rate=75, total_amount_billed=300)\ntimesheet3 = Timesheet(id=3, task_id=2, person_id=3, date_worked=date(2023, 2, 15), hours_worked=8, month=2, year=2023, billing_rate=60, total_amount_billed=480)\ntimesheet4 = Timesheet(id=4, task_id=3, person_id=4, date_worked=date(2023, 3, 20), hours_worked=7, month=3, year=2023, billing_rate=85, total_amount_billed=595)\n\n# Test data for Payment\npayment1 = Payment(id=1, invoice_id=1, payment_amount=1000, payment_date=date(2023, 4, 1), notes=\"First payment\")\npayment2 = Payment(id=2, invoice_id=2, payment_amount=1000, payment_date=date(2023, 4, 5), notes=\"Full settlement\")\npayment3 = Payment(id=3, invoice_id=3, payment_amount=500, payment_date=date(2023, 4, 10), notes=\"Partial payment\")\npayment4 = Payment(id=4, invoice_id=4, payment_amount=2000, payment_date=date(2023, 4, 15), notes=\"Advance payment\")",
    "test_data_rows": [
        {
            "test_data_row_variable": "client1",
            "code": "client1 = Client(id=1, name=\"Acme Corp\", email=\"acme@acme.com\", phone=\"123-456-7890\", total_hours=20, total_amount=5000, budget_amount=10000)"
        },
        {
            "test_data_row_variable": "client2",
            "code": "client2 = Client(id=2, name=\"Beta LLC\", email=\"beta@beta.com\", phone=\"987-654-3210\", total_hours=15, total_amount=3000, budget_amount=5000)"
        },
        {
            "test_data_row_variable": "client3",
            "code": "client3 = Client(id=3, name=\"Gamma Industries\", email=\"gamma@gamma.com\", phone=\"456-123-6789\", total_hours=30, total_amount=12000, budget_amount=15000)"
        },
        {
            "test_data_row_variable": "client4",
            "code": "client4 = Client(id=4, name=\"Delta Services\", email=\"delta@delta.com\", phone=\"789-321-6540\", total_hours=45, total_amount=9000, budget_amount=20000)"
        },
        {
            "test_data_row_variable": "project1",
            "code": "project1 = Project(id=1, client_id=1, name=\"Project X\", total_project_hours=50, total_project_amount=8000, project_budget_amount=10000)"
        },
        {
            "test_data_row_variable": "project2",
            "code": "project2 = Project(id=2, client_id=1, name=\"Project Y\", total_project_hours=25, total_project_amount=4000, project_budget_amount=7000)"
        },
        {
            "test_data_row_variable": "project3",
            "code": "project3 = Project(id=3, client_id=2, name=\"Project Z\", total_project_hours=30, total_project_amount=3000, project_budget_amount=4000)"
        },
        {
            "test_data_row_variable": "project4",
            "code": "project4 = Project(id=4, client_id=3, name=\"Project Alpha\", total_project_hours=60, total_project_amount=15000, project_budget_amount=20000)"
        },
        {
            "test_data_row_variable": "invoice1",
            "code": "invoice1 = Invoice(id=1, project_id=1, invoice_date=date(2023, 2, 15), invoice_amount=5000, payment_total=3000, invoice_balance=2000)"
        },
        {
            "test_data_row_variable": "invoice2",
            "code": "invoice2 = Invoice(id=2, project_id=2, invoice_date=date(2023, 3, 20), invoice_amount=1000, payment_total=1000, invoice_balance=0)"
        },
        {
            "test_data_row_variable": "invoice3",
            "code": "invoice3 = Invoice(id=3, project_id=3, invoice_date=date(2023, 4, 11), invoice_amount=2000, payment_total=1500, invoice_balance=500)"
        },
        {
            "test_data_row_variable": "invoice4",
            "code": "invoice4 = Invoice(id=4, project_id=4, invoice_date=date(2023, 5, 9), invoice_amount=7000, payment_total=5000, invoice_balance=2000)"
        },
        {
            "test_data_row_variable": "task1",
            "code": "task1 = Task(id=1, project_id=1, name=\"Design Phase\", description=\"Initial design work\", total_task_hours_worked=15, total_task_amount_billed=1500, task_budget_hours=20)"
        },
        {
            "test_data_row_variable": "task2",
            "code": "task2 = Task(id=2, project_id=2, name=\"Development Phase\", description=\"Coding and implementation\", total_task_hours_worked=30, total_task_amount_billed=3000, task_budget_hours=40)"
        },
        {
            "test_data_row_variable": "task3",
            "code": "task3 = Task(id=3, project_id=3, name=\"Testing Phase\", description=\"QA and testing\", total_task_hours_worked=10, total_task_amount_billed=1000, task_budget_hours=15)"
        },
        {
            "test_data_row_variable": "task4",
            "code": "task4 = Task(id=4, project_id=4, name=\"Deployment Phase\", description=\"Deployment and support\", total_task_hours_worked=20, total_task_amount_billed=2000, task_budget_hours=25)"
        },
        {
            "test_data_row_variable": "person1",
            "code": "person1 = Person(id=1, client_id=1, name=\"Alice Smith\", email=\"alice@example.com\", phone=\"111-222-3333\", billing_rate=50, total_hours_entered=10, total_amount_billed=500)"
        },
        {
            "test_data_row_variable": "person2",
            "code": "person2 = Person(id=2, client_id=2, name=\"Bob Brown\", email=\"bob@example.com\", phone=\"444-555-6666\", billing_rate=75, total_hours_entered=8, total_amount_billed=600)"
        },
        {
            "test_data_row_variable": "person3",
            "code": "person3 = Person(id=3, client_id=3, name=\"Charlie Johnson\", email=\"charlie@example.com\", phone=\"777-888-9999\", billing_rate=60, total_hours_entered=12, total_amount_billed=720)"
        },
        {
            "test_data_row_variable": "person4",
            "code": "person4 = Person(id=4, client_id=4, name=\"Dana White\", email=\"dana@example.com\", phone=\"123-987-6543\", billing_rate=85, total_hours_entered=15, total_amount_billed=1275)"
        },
        {
            "test_data_row_variable": "timesheet1",
            "code": "timesheet1 = Timesheet(id=1, task_id=1, person_id=1, date_worked=date(2023, 1, 10), hours_worked=5, month=1, year=2023, billing_rate=50, total_amount_billed=250)"
        },
        {
            "test_data_row_variable": "timesheet2",
            "code": "timesheet2 = Timesheet(id=2, task_id=1, person_id=2, date_worked=date(2023, 1, 12), hours_worked=4, month=1, year=2023, billing_rate=75, total_amount_billed=300)"
        },
        {
            "test_data_row_variable": "timesheet3",
            "code": "timesheet3 = Timesheet(id=3, task_id=2, person_id=3, date_worked=date(2023, 2, 15), hours_worked=8, month=2, year=2023, billing_rate=60, total_amount_billed=480)"
        },
        {
            "test_data_row_variable": "timesheet4",
            "code": "timesheet4 = Timesheet(id=4, task_id=3, person_id=4, date_worked=date(2023, 3, 20), hours_worked=7, month=3, year=2023, billing_rate=85, total_amount_billed=595)"
        },
        {
            "test_data_row_variable": "payment1",
            "code": "payment1 = Payment(id=1, invoice_id=1, payment_amount=1000, payment_date=date(2023, 4, 1), notes=\"First payment\")"
        },
        {
            "test_data_row_variable": "payment2",
            "code": "payment2 = Payment(id=2, invoice_id=2, payment_amount=1000, payment_date=date(2023, 4, 5), notes=\"Full settlement\")"
        },
        {
            "test_data_row_variable": "payment3",
            "code": "payment3 = Payment(id=3, invoice_id=3, payment_amount=500, payment_date=date(2023, 4, 10), notes=\"Partial payment\")"
        },
        {
            "test_data_row_variable": "payment4",
            "code": "payment4 = Payment(id=4, invoice_id=4, payment_amount=2000, payment_date=date(2023, 4, 15), notes=\"Advance payment\")"
        }
    ],
    "test_data_sqlite": "CREATE TABLE client (\n    id INTEGER PRIMARY KEY,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL,\n    phone TEXT NOT NULL,\n    total_hours DECIMAL(10,2) DEFAULT 0,\n    total_amount DECIMAL(10,2) DEFAULT 0,\n    budget_amount DECIMAL(10,2) DEFAULT 0,\n    is_over_budget BOOLEAN DEFAULT FALSE\n);\n\nINSERT INTO client (id, name, email, phone, total_hours, total_amount, budget_amount, is_over_budget)\nVALUES (1, 'Acme Corp', 'acme@acme.com', '123-456-7890', 20, 5000, 10000, 0),\n       (2, 'Beta LLC', 'beta@beta.com', '987-654-3210', 15, 3000, 5000, 0),\n       (3, 'Gamma Industries', 'gamma@gamma.com', '456-123-6789', 30, 12000, 15000, 0),\n       (4, 'Delta Services', 'delta@delta.com', '789-321-6540', 45, 9000, 20000, 0);\n\nCREATE TABLE project (\n    id INTEGER PRIMARY KEY,\n    client_id INTEGER,\n    name TEXT NOT NULL,\n    total_project_hours DECIMAL(10,2) DEFAULT 0,\n    total_project_amount DECIMAL(10,2) DEFAULT 0,\n    project_budget_amount DECIMAL(10,2) DEFAULT 0,\n    is_over_budget BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(client_id) REFERENCES client(id)\n);\n\nINSERT INTO project (id, client_id, name, total_project_hours, total_project_amount, project_budget_amount, is_over_budget)\nVALUES (1, 1, 'Project X', 50, 8000, 10000, 0),\n       (2, 1, 'Project Y', 25, 4000, 7000, 0),\n       (3, 2, 'Project Z', 30, 3000, 4000, 0),\n       (4, 3, 'Project Alpha', 60, 15000, 20000, 0);\n\nCREATE TABLE invoice (\n    id INTEGER PRIMARY KEY,\n    project_id INTEGER,\n    invoice_date DATE NOT NULL,\n    invoice_amount DECIMAL(10,2) DEFAULT 0,\n    payment_total DECIMAL(10,2) DEFAULT 0,\n    invoice_balance DECIMAL(10,2) DEFAULT 0,\n    is_paid BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY(project_id) REFERENCES project(id)\n);\n\nINSERT INTO invoice (id, project_id, invoice_date, invoice_amount, payment_total, invoice_balance, is_paid)\nVALUES (1, 1, '2023-02-15', 5000, 3000, 2000, 0),\n       (2, 2, '2023-03-20', 1000, 1000, 0, 1),\n       (3, 3, '2023-04-11', 2000, 1500, 500, 0),\n       (4, 4, '2023-05-09', 7000, 5000, 2000, 0);\n\nCREATE TABLE task (\n    id INTEGER PRIMARY KEY,\n    project_id INTEGER,\n    name TEXT NOT NULL,\n    description TEXT,\n    total_task_hours_worked DECIMAL(10,2) DEFAULT 0,\n    total_task_amount_billed DECIMAL(10,2) DEFAULT 0,\n    task_budget_hours DECIMAL(10,2) DEFAULT 0,\n    is_over_budget BOOLEAN DEFAULT FALSE,\n    invoice_id INTEGER,\n    FOREIGN KEY(project_id) REFERENCES project(id),\n    FOREIGN KEY(invoice_id) REFERENCES invoice(id)\n);\n\nINSERT INTO task (id, project_id, name, description, total_task_hours_worked, total_task_amount_billed, task_budget_hours, is_over_budget, invoice_id)\nVALUES (1, 1, 'Design Phase', 'Initial design work', 15, 1500, 20, 0, NULL),\n       (2, 2, 'Development Phase', 'Coding and implementation', 30, 3000, 40, 0, NULL),\n       (3, 3, 'Testing Phase', 'QA and testing', 10, 1000, 15, 0, NULL),\n       (4, 4, 'Deployment Phase', 'Deployment and support', 20, 2000, 25, 0, NULL);\n\nCREATE TABLE person (\n    id INTEGER PRIMARY KEY,\n    client_id INTEGER,\n    name TEXT NOT NULL,\n    email TEXT NOT NULL,\n    phone TEXT NOT NULL,\n    billing_rate DECIMAL(10,2) DEFAULT 0,\n    total_hours_entered DECIMAL(10,2) DEFAULT 0,\n    total_amount_billed DECIMAL(10,2) DEFAULT 0,\n    FOREIGN KEY(client_id) REFERENCES client(id)\n);\n\nINSERT INTO person (id, client_id, name, email, phone, billing_rate, total_hours_entered, total_amount_billed)\nVALUES (1, 1, 'Alice Smith', 'alice@example.com', '111-222-3333', 50, 10, 500),\n       (2, 2, 'Bob Brown', 'bob@example.com', '444-555-6666', 75, 8, 600),\n       (3, 3, 'Charlie Johnson', 'charlie@example.com', '777-888-9999', 60, 12, 720),\n       (4, 4, 'Dana White', 'dana@example.com', '123-987-6543', 85, 15, 1275);\n\nCREATE TABLE timesheet (\n    id INTEGER PRIMARY KEY,\n    task_id INTEGER,\n    person_id INTEGER,\n    date_worked DATE NOT NULL,\n    hours_worked DECIMAL(10,2) DEFAULT 0,\n    month INTEGER,\n    year INTEGER,\n    billing_rate DECIMAL(10,2) DEFAULT 0,\n    total_amount_billed DECIMAL(10,2) DEFAULT 0,\n    FOREIGN KEY(task_id) REFERENCES task(id),\n    FOREIGN KEY(person_id) REFERENCES person(id)\n);\n\nINSERT INTO timesheet (id, task_id, person_id, date_worked, hours_worked, month, year, billing_rate, total_amount_billed)\nVALUES (1, 1, 1, '2023-01-10', 5, 1, 2023, 50, 250),\n       (2, 1, 2, '2023-01-12', 4, 1, 2023, 75, 300),\n       (3, 2, 3, '2023-02-15', 8, 2, 2023, 60, 480),\n       (4, 3, 4, '2023-03-20', 7, 3, 2023, 85, 595);\n\nCREATE TABLE payment (\n    id INTEGER PRIMARY KEY,\n    invoice_id INTEGER,\n    payment_amount DECIMAL(10,2) DEFAULT 0,\n    payment_date DATE NOT NULL,\n    notes TEXT,\n    FOREIGN KEY(invoice_id) REFERENCES invoice(id)\n);\n\nINSERT INTO payment (id, invoice_id, payment_amount, payment_date, notes)\nVALUES (1, 1, 1000, '2023-04-01', 'First payment'),\n       (2, 2, 1000, '2023-04-05', 'Full settlement'),\n       (3, 3, 500, '2023-04-10', 'Partial payment'),\n       (4, 4, 2000, '2023-04-15', 'Advance payment');",
    "name": "Time_Tracker_and_Billing_System"
}