{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    __tablename__ = 'customer'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True)\n    credit_limit = Column(Integer)\n    balance = Column(Integer)\n    ",
            "description": "Model for customers, ensuring unique names and supporting logic for balance computation.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    __tablename__ = 'order'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customer.id'), nullable=False)\n    date_shipped = Column(DateTime)\n    amount_total = Column(Integer)\n    notes = Column(String)\n    ",
            "description": "Model for orders, with a reference to customers, a notes field, and computed total amount for logic enforcement.",
            "name": "Order"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    __tablename__ = 'product'\n\n    id = Column(Integer, primary_key=True)\n    unit_price = Column(Integer)\n    \n    ",
            "description": "Model for products, storing unit prices to be copied to items.",
            "name": "Product"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    __tablename__ = 'item'\n\n    id = Column(Integer, primary_key=True)\n    order_id = Column(Integer, ForeignKey('order.id'))\n    product_id = Column(Integer, ForeignKey('product.id'))\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Integer)\n    amount = Column(Integer)\n    ",
            "description": "Model for items, referencing orders and products, using unit_price copied from products and calculated amount.",
            "name": "Item"
        }
    ],
    "rules": [
        {
            "name": "Customer Balance Constraint",
            "description": "Ensures that a Customer's balance does not exceed its credit limit.",
            "use_case": "Check Credit",
            "entity": "Customer",
            "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.balance <= row.credit_limit,\n                error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        },
        {
            "name": "Customer Balance Computation",
            "description": "Calculates Customer's balance as sum of Order amounts where date_shipped is null.",
            "use_case": "Check Credit",
            "entity": "Customer",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, \n          where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Order Amount Total",
            "description": "Calculates Order amount_total as sum of Item amounts.",
            "use_case": "Check Credit",
            "entity": "Order",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Item Amount Calculation",
            "description": "Calculates Item's amount as the product of quantity and unit_price.",
            "use_case": "Check Credit",
            "entity": "Item",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Item Unit Price Copy",
            "description": "Copies Product's unit_price to item's unit_price.",
            "use_case": "Check Credit",
            "entity": "Item",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)"
        }
    ],
    "test_data": "# Test Customers\ntest_customer_1 = Customer(id=1, name=\"Customer A\", credit_limit=5000, balance=0)\ntest_customer_2 = Customer(id=2, name=\"Customer B\", credit_limit=6000, balance=0)\ntest_customer_3 = Customer(id=3, name=\"Customer C\", credit_limit=7000, balance=0)\ntest_customer_4 = Customer(id=4, name=\"Customer D\", credit_limit=8000, balance=0)\n\n# Test Products\ntest_product_1 = Product(id=1, unit_price=10)\ntest_product_2 = Product(id=2, unit_price=15)\ntest_product_3 = Product(id=3, unit_price=20)\ntest_product_4 = Product(id=4, unit_price=25)\n\n# Test Orders\ntest_order_1 = Order(id=1, customer_id=1, date_shipped=None, amount_total=0, notes=\"First order\")\ntest_order_2 = Order(id=2, customer_id=2, date_shipped=None, amount_total=0, notes=\"Second order\")\ntest_order_3 = Order(id=3, customer_id=3, date_shipped=None, amount_total=0, notes=\"Third order\")\ntest_order_4 = Order(id=4, customer_id=4, date_shipped=None, amount_total=0, notes=\"Fourth order\")\n\n# Test Items\ntest_item_1 = Item(id=1, order_id=1, product_id=1, quantity=2, unit_price=10, amount=20)\ntest_item_2 = Item(id=2, order_id=2, product_id=2, quantity=3, unit_price=15, amount=45)\ntest_item_3 = Item(id=3, order_id=3, product_id=3, quantity=4, unit_price=20, amount=80)\ntest_item_4 = Item(id=4, order_id=4, product_id=4, quantity=5, unit_price=25, amount=125)",
    "test_data_rows": [
        {
            "test_data_row_variable": "test_customer_1",
            "code": "test_customer_1 = Customer(id=1, name=\"Customer A\", credit_limit=5000, balance=0)"
        },
        {
            "test_data_row_variable": "test_customer_2",
            "code": "test_customer_2 = Customer(id=2, name=\"Customer B\", credit_limit=6000, balance=0)"
        },
        {
            "test_data_row_variable": "test_customer_3",
            "code": "test_customer_3 = Customer(id=3, name=\"Customer C\", credit_limit=7000, balance=0)"
        },
        {
            "test_data_row_variable": "test_customer_4",
            "code": "test_customer_4 = Customer(id=4, name=\"Customer D\", credit_limit=8000, balance=0)"
        },
        {
            "test_data_row_variable": "test_product_1",
            "code": "test_product_1 = Product(id=1, unit_price=10)"
        },
        {
            "test_data_row_variable": "test_product_2",
            "code": "test_product_2 = Product(id=2, unit_price=15)"
        },
        {
            "test_data_row_variable": "test_product_3",
            "code": "test_product_3 = Product(id=3, unit_price=20)"
        },
        {
            "test_data_row_variable": "test_product_4",
            "code": "test_product_4 = Product(id=4, unit_price=25)"
        },
        {
            "test_data_row_variable": "test_order_1",
            "code": "test_order_1 = Order(id=1, customer_id=1, date_shipped=None, amount_total=0, notes=\"First order\")"
        },
        {
            "test_data_row_variable": "test_order_2",
            "code": "test_order_2 = Order(id=2, customer_id=2, date_shipped=None, amount_total=0, notes=\"Second order\")"
        },
        {
            "test_data_row_variable": "test_order_3",
            "code": "test_order_3 = Order(id=3, customer_id=3, date_shipped=None, amount_total=0, notes=\"Third order\")"
        },
        {
            "test_data_row_variable": "test_order_4",
            "code": "test_order_4 = Order(id=4, customer_id=4, date_shipped=None, amount_total=0, notes=\"Fourth order\")"
        },
        {
            "test_data_row_variable": "test_item_1",
            "code": "test_item_1 = Item(id=1, order_id=1, product_id=1, quantity=2, unit_price=10, amount=20)"
        },
        {
            "test_data_row_variable": "test_item_2",
            "code": "test_item_2 = Item(id=2, order_id=2, product_id=2, quantity=3, unit_price=15, amount=45)"
        },
        {
            "test_data_row_variable": "test_item_3",
            "code": "test_item_3 = Item(id=3, order_id=3, product_id=3, quantity=4, unit_price=20, amount=80)"
        },
        {
            "test_data_row_variable": "test_item_4",
            "code": "test_item_4 = Item(id=4, order_id=4, product_id=4, quantity=5, unit_price=25, amount=125)"
        }
    ],
    "test_data_sqlite": "-- Test Customers\nINSERT INTO customer (id, name, credit_limit, balance) VALUES (1, 'Customer A', 5000, 0);\nINSERT INTO customer (id, name, credit_limit, balance) VALUES (2, 'Customer B', 6000, 0);\nINSERT INTO customer (id, name, credit_limit, balance) VALUES (3, 'Customer C', 7000, 0);\nINSERT INTO customer (id, name, credit_limit, balance) VALUES (4, 'Customer D', 8000, 0);\n\n-- Test Products\nINSERT INTO product (id, unit_price) VALUES (1, 10);\nINSERT INTO product (id, unit_price) VALUES (2, 15);\nINSERT INTO product (id, unit_price) VALUES (3, 20);\nINSERT INTO product (id, unit_price) VALUES (4, 25);\n\n-- Test Orders\nINSERT INTO \"order\" (id, customer_id, date_shipped, amount_total, notes) VALUES (1, 1, NULL, 0, 'First order');\nINSERT INTO \"order\" (id, customer_id, date_shipped, amount_total, notes) VALUES (2, 2, NULL, 0, 'Second order');\nINSERT INTO \"order\" (id, customer_id, date_shipped, amount_total, notes) VALUES (3, 3, NULL, 0, 'Third order');\nINSERT INTO \"order\" (id, customer_id, date_shipped, amount_total, notes) VALUES (4, 4, NULL, 0, 'Fourth order');\n\n-- Test Items\nINSERT INTO item (id, order_id, product_id, quantity, unit_price, amount) VALUES (1, 1, 1, 2, 10, 20);\nINSERT INTO item (id, order_id, product_id, quantity, unit_price, amount) VALUES (2, 2, 2, 3, 15, 45);\nINSERT INTO item (id, order_id, product_id, quantity, unit_price, amount) VALUES (3, 3, 3, 4, 20, 80);\nINSERT INTO item (id, order_id, product_id, quantity, unit_price, amount) VALUES (4, 4, 4, 5, 25, 125);",
    "name": "Order Management System"
}