To implement the logic specified using LogicBank, we need to add LogicBank-specific rules and logic to ensure the business constraints and calculations are enforced. Below is an extended version of your existing script to include LogicBank.

First, ensure you have the `logicbank` package installed. You can install it using:
```bash
pip install logicbank
```

Now, let's enhance the script to include the required logic using LogicBank:

1. Adjust the model definitions to support LogicBank hooks.
2. Define the logic rules using LogicBank.

Here is the adjusted script:

```python
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, DECIMAL, DateTime, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from logic_bank.logic_bank import LogicBank
from decimal import Decimal
import datetime
import sys
import pkg_resources

Base = declarative_base()
engine = create_engine('sqlite:///system/genai/temp/create_db_models.sqlite')

class CustomerAccount(Base):
    """description: Table to store customer account information"""
    __tablename__ = 'customer_accounts'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    balance = Column(DECIMAL(10, 2), nullable=True, default=0.00)
    credit_limit = Column(DECIMAL(10, 2), nullable=False)

    orders = relationship("Order", back_populates="customer")

class Product(Base):
    """description: Table to store product information"""
    __tablename__ = 'products'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)
    unit_price = Column(DECIMAL(10, 2), nullable=False)

    items = relationship("Item", back_populates="product")

class SalesRep(Base):
    """description: Table to store sales representative information"""
    __tablename__ = 'sales_reps'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False)

class Order(Base):
    """description: Table to store order information"""
    __tablename__ = 'orders'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    customer_id = Column(Integer, ForeignKey('customer_accounts.id'), nullable=False)
    salesrep_id = Column(Integer, ForeignKey('sales_reps.id'), nullable=False)
    date_shipped = Column(DateTime, nullable=True)
    notes = Column(String, nullable=True)

    customer = relationship("CustomerAccount", back_populates="orders")
    items = relationship("Item", back_populates="order")

class Item(Base):
    """description: Table to store order item information"""
    __tablename__ = 'items'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    order_id = Column(Integer, ForeignKey('orders.id'), nullable=False)
    product_id = Column(Integer, ForeignKey('products.id'), nullable=False)
    quantity = Column(Integer, nullable=False)
    unit_price = Column(DECIMAL(10, 2), nullable=False)

    order = relationship("Order", back_populates="items")
    product = relationship("Product", back_populates="items")

def rule_decorators():
    from logic_bank.rule_bank import rule_decorator
    from logic_bank.rule_type import rule_types

    @rule_decorator.rule(rule_types.compute)
    def amount(self, row: Item, old_row: Item) -> Decimal:
        row.amount = row.quantity * row.unit_price

    @rule_decorator.rule(rule_types.copy)
    def copy_unit_price(self, row: Item, old_row: Item):
        row.unit_price = row.product.unit_price

    @rule_decorator.rule(rule_types.summarize)
    def order_amount_total(self, row: Item, old_row: Item):
        row.order.amount_total = sum(item.amount for item in row.order.items)

    @rule_decorator.rule(rule_types.formula)
    def customer_balance(self, row: Order, old_row: Order):
        row.customer.balance = sum(
            order.amount_total
            for order in row.customer.orders if not order.date_shipped
        )

    @rule_decorator.rule(rule_types.constraint)
    def check_balance(self, row: CustomerAccount, old_row: CustomerAccount):
        assert row.balance <= row.credit_limit, \
            "Customer balance exceeds credit limit"


# Instantiate LogicBank and provide Rules
LogicBank.activate(sessionmaker(bind=engine), initial_session=session, rules=rule_decorators)

# Create the database tables
Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

# Insert test data
product1 = Product(name='Product A', unit_price=Decimal('10.00'))
product2 = Product(name='Product B', unit_price=Decimal('20.00'))
session.add(product1)
session.add(product2)

customer1 = CustomerAccount(name='Customer A', balance=Decimal('0.00'), credit_limit=Decimal('100.00'))
customer2 = CustomerAccount(name='Customer B', balance=Decimal('0.00'), credit_limit=Decimal('200.00'))
session.add(customer1)
session.add(customer2)
session.commit()

salesrep1 = SalesRep(name='SalesRep A')
salesrep2 = SalesRep(name='SalesRep B')
session.add(salesrep1)
session.add(salesrep2)
session.commit()

order1 = Order(customer_id=customer1.id, salesrep_id=salesrep1.id, date_shipped=None, notes='First order')
order2 = Order(customer_id=customer2.id, salesrep_id=salesrep2.id, date_shipped=datetime.datetime.now(), notes='Second order')
session.add(order1)
session.add(order2)
session.commit()

item1 = Item(order_id=order1.id, product_id=product1.id, quantity=2)
item2 = Item(order_id=order1.id, product_id=product2.id, quantity=1)
item3 = Item(order_id=order2.id, product_id=product1.id, quantity=3)
session.add(item1)
session.add(item2)
session.add(item3)
session.commit()

session.close()
```

In this script:
1. Defined necessary relationships for LogicBank.
2. Used decorators from `logicbank.rule_bank.rule_decorator` to specify each rule.
3. Activated LogicBank with the rules provided using `LogicBank.activate`.

Each of the constraints and computations is now enforced by LogicBank when data is manipulated via SQLAlchemy sessions.