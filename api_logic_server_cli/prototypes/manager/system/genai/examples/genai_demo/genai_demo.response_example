{
    "models": [
        {
            "classname": "Customer",
            "code": "from sqlalchemy import Column, Integer, String, Float\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\nclass Customer(Base):\n    \"\"\"description: Stores customer details, such as balance and credit limit.\"\"\"\n    __tablename__ = 'customer'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String, nullable=False)\n    balance = Column(Float, default=0.0)\n    credit_limit = Column(Float, nullable=False)",
            "description": "Stores customer details, such as balance and credit limit.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\nclass Order(Base):\n    \"\"\"description: Represents a customer's order, with total amount and optional shipping date.\"\"\"\n    __tablename__ = 'order'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    customer_id = Column(Integer, ForeignKey('customer.id'))\n    amount_total = Column(Float, default=0.0)\n    date_shipped = Column(DateTime, nullable=True)\n    notes = Column(String, nullable=True)",
            "description": "Represents a customer's order, with total amount and optional shipping date.",
            "name": "Order"
        },
        {
            "classname": "Item",
            "code": "from sqlalchemy import Column, Integer, Float, ForeignKey\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\nclass Item(Base):\n    \"\"\"description: Stores details about items within an order, including quantity and unit price.\"\"\"\n    __tablename__ = 'item'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(Integer, ForeignKey('order.id'))\n    product_id = Column(Integer, ForeignKey('product.id'))\n    amount = Column(Float, default=0.0)\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Float, nullable=False)",
            "description": "Stores details about items within an order, including quantity and unit price.",
            "name": "Item"
        },
        {
            "classname": "Product",
            "code": "from sqlalchemy import Column, Integer, String, Float\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n    \"\"\"description: Catalog of products available for purchase.\"\"\"\n    __tablename__ = 'product'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String, nullable=False)\n    unit_price = Column(Float, nullable=False)",
            "description": "Catalog of products available for purchase.",
            "name": "Product"
        }
    ],
    "rules": [
        {
            "name": "Customer Balance Constraint",
            "description": "Ensures that a customer's balance does not exceed their credit limit.",
            "code": "Rule.constraint(validate=Customer,\n                as_condition=lambda row: row.balance <= row.credit_limit,\n                error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        },
        {
            "name": "Customer Balance Calculation",
            "description": "Calculates the customer's balance as the sum of their orders' total amounts where orders have not been shipped.",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Order Amount Total Calculation",
            "description": "Calculates the order's amount total as the sum of all item amounts in the order.",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Item Amount Calculation",
            "description": "Calculates the item amount as the product of quantity and unit price.",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Item Unit Price Copy",
            "description": "Copies the unit price from the product to the item.",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.unit_price)"
        }
    ],
    "test_data": "## Test Data\n\n# Products\nproduct1 = Product(id=1, name='Product 1', unit_price=10.0)\nproduct2 = Product(id=2, name='Product 2', unit_price=15.0)\n\n# Customers\ncustomer1 = Customer(id=1, name='Alice', balance=0.0, credit_limit=100.0)\ncustomer2 = Customer(id=2, name='Bob', balance=0.0, credit_limit=150.0)\n\n# Orders\norder1 = Order(id=1, customer_id=1, amount_total=0.0, notes='Order 1 for Alice')\norder2 = Order(id=2, customer_id=2, amount_total=0.0, notes='Order 2 for Bob')\norder3 = Order(id=3, customer_id=1, amount_total=0.0, notes='Another order for Alice', date_shipped=None)\n\n# Items\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=2, unit_price=10.0, amount=20.0)\nitem2 = Item(id=2, order_id=1, product_id=2, quantity=1, unit_price=15.0, amount=15.0)\nitem3 = Item(id=3, order_id=2, product_id=2, quantity=3, unit_price=15.0, amount=45.0)\nitem4 = Item(id=4, order_id=3, product_id=1, quantity=5, unit_price=10.0, amount=50.0)\n\n# Since the logic is not enforced via LogicBank for this demo, we manually calculate derived values:\n# Order 1 Total for Alice: 20.0 + 15.0 = 35.0\norder1.amount_total = item1.amount + item2.amount\n# Order 2 Total for Bob: 45.0\norder2.amount_total = item3.amount\n# Order 3 Total for Alice, not shipped yet: 50.0\norder3.amount_total = item4.amount\n# Customer Balance for Alice: 35.0 (order 1) + 50.0 (order 3, not shipped)\ncustomer1.balance = order1.amount_total + order3.amount_total\n# Customer Balance for Bob: 45.0\ncustomer2.balance = order2.amount_total"
}