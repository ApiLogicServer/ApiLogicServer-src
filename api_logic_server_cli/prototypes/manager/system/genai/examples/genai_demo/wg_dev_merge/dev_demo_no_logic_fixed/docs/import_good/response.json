{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    \"\"\"\n    Represents a customer in the system.\n    \"\"\"\n    __tablename__ = 'customers'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), unique=True)\n    email = Column(String(50))\n    balance = Column(Integer)\n    credit_limit = Column(Integer)\n\n    # child relationships\n    OrderList: Mapped[List[\"Order\"]] = relationship(back_populates=\"customer\")",
            "description": "Model for Customer data, representing customers in the system.",
            "name": "Customer"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    \"\"\"\n    Represents a product available for purchase.\n    \"\"\"\n    __tablename__ = 'products'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n    price = Column(Integer)\n    carbon_neutral = Column(Boolean)\n\n    # child relationships\n    ItemList: Mapped[List[\"Item\"]] = relationship(back_populates=\"product\")",
            "description": "Model for Product data, representing products.",
            "name": "Product"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    \"\"\"\n    Represents an order made by a customer.\n    \"\"\"\n    __tablename__ = 'orders'\n\n    id = Column(Integer, primary_key=True)\n    customer_id = Column(ForeignKey('customers.id'), nullable=False)\n    order_date = Column(DateTime)\n    notes = Column(String(255))\n    total_amount = Column(Integer)\n\n    # parent relationships\n    customer: Mapped[\"Customer\"] = relationship(back_populates=\"OrderList\")\n\n    # child relationships\n    ItemList: Mapped[List[\"Item\"]] = relationship(back_populates=\"order\")",
            "description": "Model for Order data, representing orders placed by customers.",
            "name": "Order"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    \"\"\"\n    Represents an item included in an order.\n    \"\"\"\n    __tablename__ = 'items'\n\n    id = Column(Integer, primary_key=True)\n    order_id = Column(ForeignKey('orders.id'))\n    product_id = Column(ForeignKey('products.id'))\n    quantity = Column(Integer, nullable=False)\n    price = Column(Integer)\n    amount = Column(Integer)\n    unit_price = Column(Integer)\n\n    # parent relationships\n    order: Mapped[\"Order\"] = relationship(back_populates=\"ItemList\")\n    product: Mapped[\"Product\"] = relationship(back_populates=\"ItemList\")",
            "description": "Model for Item data, representing items in an order.",
            "name": "Item"
        }
    ],
    "rules": [],
    "test_data": "# Test Data for Customer\ncustomer1 = Customer(id=1, name=\"John Doe\", email=\"john.doe@example.com\", balance=1000, credit_limit=5000)\ncustomer2 = Customer(id=2, name=\"Jane Smith\", email=\"jane.smith@example.com\", balance=1500, credit_limit=7000)\n\n# Test Data for Product\nproduct1 = Product(id=1, name=\"Widget\", price=20, carbon_neutral=True)\nproduct2 = Product(id=2, name=\"Gadget\", price=30, carbon_neutral=False)\n\n# Test Data for Order\norder1 = Order(id=1, customer_id=1, order_date=date(2023, 5, 10), notes=\"Urgent\", total_amount=200)\norder2 = Order(id=2, customer_id=2, order_date=date(2023, 5, 12), notes=\"Regular\", total_amount=450)\n\n# Test Data for Item\nitem1 = Item(id=1, order_id=1, product_id=1, quantity=5, price=20, amount=100, unit_price=20)\nitem2 = Item(id=2, order_id=2, product_id=2, quantity=10, price=30, amount=300, unit_price=30)",
    "test_data_rows": [
        {
            "test_data_row_variable": "customer1",
            "code": "customer1 = Customer(id=1, name=\"John Doe\", email=\"john.doe@example.com\", balance=1000, credit_limit=5000)"
        },
        {
            "test_data_row_variable": "customer2",
            "code": "customer2 = Customer(id=2, name=\"Jane Smith\", email=\"jane.smith@example.com\", balance=1500, credit_limit=7000)"
        },
        {
            "test_data_row_variable": "product1",
            "code": "product1 = Product(id=1, name=\"Widget\", price=20, carbon_neutral=True)"
        },
        {
            "test_data_row_variable": "product2",
            "code": "product2 = Product(id=2, name=\"Gadget\", price=30, carbon_neutral=False)"
        },
        {
            "test_data_row_variable": "order1",
            "code": "order1 = Order(id=1, customer_id=1, order_date=date(2023, 5, 10), notes=\"Urgent\", total_amount=200)"
        },
        {
            "test_data_row_variable": "order2",
            "code": "order2 = Order(id=2, customer_id=2, order_date=date(2023, 5, 12), notes=\"Regular\", total_amount=450)"
        },
        {
            "test_data_row_variable": "item1",
            "code": "item1 = Item(id=1, order_id=1, product_id=1, quantity=5, price=20, amount=100, unit_price=20)"
        },
        {
            "test_data_row_variable": "item2",
            "code": "item2 = Item(id=2, order_id=2, product_id=2, quantity=10, price=30, amount=300, unit_price=30)"
        }
    ],
    "test_data_sqlite": "INSERT INTO customers (id, name, email, balance, credit_limit) VALUES (1, 'John Doe', 'john.doe@example.com', 1000, 5000);\nINSERT INTO customers (id, name, email, balance, credit_limit) VALUES (2, 'Jane Smith', 'jane.smith@example.com', 1500, 7000);\nINSERT INTO products (id, name, price, carbon_neutral) VALUES (1, 'Widget', 20, 1);\nINSERT INTO products (id, name, price, carbon_neutral) VALUES (2, 'Gadget', 30, 0);\nINSERT INTO orders (id, customer_id, order_date, notes, total_amount) VALUES (1, 1, '2023-05-10', 'Urgent', 200);\nINSERT INTO orders (id, customer_id, order_date, notes, total_amount) VALUES (2, 2, '2023-05-12', 'Regular', 450);\nINSERT INTO items (id, order_id, product_id, quantity, price, amount, unit_price) VALUES (1, 1, 1, 5, 20, 100, 20);\nINSERT INTO items (id, order_id, product_id, quantity, price, amount, unit_price) VALUES (2, 2, 2, 10, 30, 300, 30);",
    "name": "E-CommerceSystem"
}