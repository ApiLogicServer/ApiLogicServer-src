{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    \"\"\"description: Represents customers in the system, including credit limits and balances.\"\"\"\n    __tablename__ = 'customer'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    email = Column(String)\n    credit_limit = Column(Integer)\n    balance = Column(Integer)",
            "sqlite_create": "CREATE TABLE customer (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    credit_limit INTEGER,\n    balance INTEGER\n);",
            "description": "Table for storing information about customers, including their credit limits and balances.",
            "name": "Customer"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    \"\"\"description: Represents orders placed by customers, including total amounts and shipment dates.\"\"\"\n    __tablename__ = 'order'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    customer_id = Column(Integer, ForeignKey('customer.id'))\n    order_date = Column(DateTime)\n    date_shipped = Column(DateTime)\n    notes = Column(String)\n    amount_total = Column(Integer)",
            "sqlite_create": "CREATE TABLE order (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    customer_id INTEGER,\n    order_date DATETIME,\n    date_shipped DATETIME,\n    notes TEXT,\n    amount_total INTEGER,\n    FOREIGN KEY(customer_id) REFERENCES customer(id)\n);",
            "description": "Table for storing orders made by customers, with a focus on total amounts and shipment status.",
            "name": "Order"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    \"\"\"description: Represents products available in the system.\"\"\"\n    __tablename__ = 'product'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    price = Column(Integer)",
            "sqlite_create": "CREATE TABLE product (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    price INTEGER\n);",
            "description": "Table for storing products available for purchase.",
            "name": "Product"
        },
        {
            "classname": "OrderItem",
            "code": "class OrderItem(Base):\n    \"\"\"description: Represents items in an order, including their amounts and unit prices.\"\"\"\n    __tablename__ = 'order_item'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(Integer, ForeignKey('order.id'))\n    product_id = Column(Integer, ForeignKey('product.id'))\n    quantity = Column(Integer)\n    amount = Column(Integer)\n    unit_price = Column(Integer)",
            "sqlite_create": "CREATE TABLE order_item (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    order_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    amount INTEGER,\n    unit_price INTEGER,\n    FOREIGN KEY(order_id) REFERENCES order(id),\n    FOREIGN KEY(product_id) REFERENCES product(id)\n);",
            "description": "Table representing items belonging to an order, containing amount and unit price information.",
            "name": "OrderItem"
        }
    ],
    "rules": [
        {
            "name": "Balance Sum Rule",
            "description": "Customer's balance is the sum of order totals where orders are not shipped.",
            "use_case": "Calculate customer's current balance based on unsettled orders.",
            "entity": "Customer",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None)"
        },
        {
            "name": "Order Total Sum Rule",
            "description": "Order's amount total is the sum of its items' amounts.",
            "use_case": "Calculate the total amount for an order.",
            "entity": "Order",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=OrderItem.amount)"
        },
        {
            "name": "Item Amount Formula",
            "description": "Each item's amount is the product of its quantity and unit price.",
            "use_case": "Calculate the amount per item based on its quantity and unit price.",
            "entity": "OrderItem",
            "code": "Rule.formula(derive=OrderItem.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Unit Price Copy Rule",
            "description": "Copy unit price from the product to the order item.",
            "use_case": "Ensure the unit price of an item matches its product's price.",
            "entity": "OrderItem",
            "code": "Rule.copy(derive=OrderItem.unit_price, from_parent=Product.price)"
        },
        {
            "name": "Credit Constraint",
            "description": "Ensure customer's balance does not exceed their credit limit.",
            "use_case": "Enforce financial constraints based on the customer's credit.",
            "entity": "Customer",
            "code": "Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg=\"balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        }
    ],
    "test_data": "# Assuming Base is already defined\nfrom datetime import datetime, date\n\ncustomer1 = Customer(id=1, name=\"Alice Smith\", email=\"alice.smith@example.com\", credit_limit=5000, balance=0)\ncustomer2 = Customer(id=2, name=\"Bob Johnson\", email=\"bob.johnson@example.com\", credit_limit=3000, balance=0)\ncustomer3 = Customer(id=3, name=\"Carol White\", email=\"carol.white@example.com\", credit_limit=4000, balance=0)\ncustomer4 = Customer(id=4, name=\"David Brown\", email=\"david.brown@example.com\", credit_limit=2000, balance=0)\n\norder1 = Order(id=1, customer_id=1, order_date=date(2023, 11, 1), date_shipped=None, notes=\"Urgent order\", amount_total=1000)\norder2 = Order(id=2, customer_id=2, order_date=date(2023, 11, 2), date_shipped=None, notes=\"Gift wrap\", amount_total=2000)\norder3 = Order(id=3, customer_id=3, order_date=date(2023, 11, 3), date_shipped=date(2023, 11, 4), notes=\"Standard shipping\", amount_total=500)\norder4 = Order(id=4, customer_id=4, order_date=date(2023, 11, 2), date_shipped=None, notes=\"Express delivery\", amount_total=0)\n\nproduct1 = Product(id=1, name=\"Laptop\", price=1500)\nproduct2 = Product(id=2, name=\"Smartphone\", price=600)\nproduct3 = Product(id=3, name=\"Tablet\", price=300)\nproduct4 = Product(id=4, name=\"Monitor\", price=200)\n\norder_item1 = OrderItem(id=1, order_id=1, product_id=1, quantity=1, amount=1500, unit_price=1500)\norder_item2 = OrderItem(id=2, order_id=2, product_id=2, quantity=3, amount=1800, unit_price=600)\norder_item3 = OrderItem(id=3, order_id=3, product_id=3, quantity=2, amount=600, unit_price=300)\norder_item4 = OrderItem(id=4, order_id=4, product_id=4, quantity=5, amount=1000, unit_price=200)\n",
    "test_data_rows": [
        {
            "test_data_row_variable": "customer1",
            "code": "customer1 = Customer(id=1, name=\"Alice Smith\", email=\"alice.smith@example.com\", credit_limit=5000, balance=0)"
        },
        {
            "test_data_row_variable": "customer2",
            "code": "customer2 = Customer(id=2, name=\"Bob Johnson\", email=\"bob.johnson@example.com\", credit_limit=3000, balance=0)"
        },
        {
            "test_data_row_variable": "customer3",
            "code": "customer3 = Customer(id=3, name=\"Carol White\", email=\"carol.white@example.com\", credit_limit=4000, balance=0)"
        },
        {
            "test_data_row_variable": "customer4",
            "code": "customer4 = Customer(id=4, name=\"David Brown\", email=\"david.brown@example.com\", credit_limit=2000, balance=0)"
        },
        {
            "test_data_row_variable": "order1",
            "code": "order1 = Order(id=1, customer_id=1, order_date=date(2023, 11, 1), date_shipped=None, notes=\"Urgent order\", amount_total=1000)"
        },
        {
            "test_data_row_variable": "order2",
            "code": "order2 = Order(id=2, customer_id=2, order_date=date(2023, 11, 2), date_shipped=None, notes=\"Gift wrap\", amount_total=2000)"
        },
        {
            "test_data_row_variable": "order3",
            "code": "order3 = Order(id=3, customer_id=3, order_date=date(2023, 11, 3), date_shipped=date(2023, 11, 4), notes=\"Standard shipping\", amount_total=500)"
        },
        {
            "test_data_row_variable": "order4",
            "code": "order4 = Order(id=4, customer_id=4, order_date=date(2023, 11, 2), date_shipped=None, notes=\"Express delivery\", amount_total=0)"
        },
        {
            "test_data_row_variable": "product1",
            "code": "product1 = Product(id=1, name=\"Laptop\", price=1500)"
        },
        {
            "test_data_row_variable": "product2",
            "code": "product2 = Product(id=2, name=\"Smartphone\", price=600)"
        },
        {
            "test_data_row_variable": "product3",
            "code": "product3 = Product(id=3, name=\"Tablet\", price=300)"
        },
        {
            "test_data_row_variable": "product4",
            "code": "product4 = Product(id=4, name=\"Monitor\", price=200)"
        },
        {
            "test_data_row_variable": "order_item1",
            "code": "order_item1 = OrderItem(id=1, order_id=1, product_id=1, quantity=1, amount=1500, unit_price=1500)"
        },
        {
            "test_data_row_variable": "order_item2",
            "code": "order_item2 = OrderItem(id=2, order_id=2, product_id=2, quantity=3, amount=1800, unit_price=600)"
        },
        {
            "test_data_row_variable": "order_item3",
            "code": "order_item3 = OrderItem(id=3, order_id=3, product_id=3, quantity=2, amount=600, unit_price=300)"
        },
        {
            "test_data_row_variable": "order_item4",
            "code": "order_item4 = OrderItem(id=4, order_id=4, product_id=4, quantity=5, amount=1000, unit_price=200)"
        }
    ],
    "test_data_sqlite": "INSERT INTO customer (id, name, email, credit_limit, balance) VALUES (1, 'Alice Smith', 'alice.smith@example.com', 5000, 0);\nINSERT INTO customer (id, name, email, credit_limit, balance) VALUES (2, 'Bob Johnson', 'bob.johnson@example.com', 3000, 0);\nINSERT INTO customer (id, name, email, credit_limit, balance) VALUES (3, 'Carol White', 'carol.white@example.com', 4000, 0);\nINSERT INTO customer (id, name, email, credit_limit, balance) VALUES (4, 'David Brown', 'david.brown@example.com', 2000, 0);\n\nINSERT INTO order (id, customer_id, order_date, date_shipped, notes, amount_total) VALUES (1, 1, '2023-11-01', NULL, 'Urgent order', 1000);\nINSERT INTO order (id, customer_id, order_date, date_shipped, notes, amount_total) VALUES (2, 2, '2023-11-02', NULL, 'Gift wrap', 2000);\nINSERT INTO order (id, customer_id, order_date, date_shipped, notes, amount_total) VALUES (3, 3, '2023-11-03', '2023-11-04', 'Standard shipping', 500);\nINSERT INTO order (id, customer_id, order_date, date_shipped, notes, amount_total) VALUES (4, 4, '2023-11-02', NULL, 'Express delivery', 0);\n\nINSERT INTO product (id, name, price) VALUES (1, 'Laptop', 1500);\nINSERT INTO product (id, name, price) VALUES (2, 'Smartphone', 600);\nINSERT INTO product (id, name, price) VALUES (3, 'Tablet', 300);\nINSERT INTO product (id, name, price) VALUES (4, 'Monitor', 200);\n\nINSERT INTO order_item (id, order_id, product_id, quantity, amount, unit_price) VALUES (1, 1, 1, 1, 1500, 1500);\nINSERT INTO order_item (id, order_id, product_id, quantity, amount, unit_price) VALUES (2, 2, 2, 3, 1800, 600);\nINSERT INTO order_item (id, order_id, product_id, quantity, amount, unit_price) VALUES (3, 3, 3, 2, 600, 300);\nINSERT INTO order_item (id, order_id, product_id, quantity, amount, unit_price) VALUES (4, 4, 4, 5, 1000, 200);",
    "name": "OrderManagementSystem"
}