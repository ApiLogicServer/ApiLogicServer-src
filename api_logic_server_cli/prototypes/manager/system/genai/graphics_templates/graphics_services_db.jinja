from database import models
import logging
from safrs import jsonapi_attr
from sqlalchemy.orm import relationship, remote, foreign
from functools import wraps # This convenience func preserves name and docstring
import decimal as decimal
from sqlalchemy import extract, func
from flask import request, jsonify
from safrs import jsonapi_rpc, SAFRSAPI
import safrs

"""
Graphics methods for database classes, created when: 
* `als genai create` contains prompts like: 'Graph Sales by Category', etc.
* `als add-graphics` --using the docs/graphics directory

Called by api/api_discovery/dashboard_services.py when admin app loaded

You typically do not alter this file - rebuilt on als genai--graphics.

"""

app_logger = logging.getLogger(__name__)


def add_method(cls):
  """
  Decorator to add method to class, e.g., db class group by query method

  Thanks to: https://mgarod.medium.com/dynamically-add-a-method-to-a-class-in-python-c49204b85bd6
  """
  def decorator(func):
    @wraps(func) 
    def wrapper(self, *args, **kwargs): 
      return func(*args, **kwargs)
    
    setattr(cls, func.__name__, wrapper)
    # Note we are not binding func, but wrapper which accepts self but does exactly the same as func
    return func # returning func means func can still be used normally
  return decorator

##############################
# generated services follow
##############################


