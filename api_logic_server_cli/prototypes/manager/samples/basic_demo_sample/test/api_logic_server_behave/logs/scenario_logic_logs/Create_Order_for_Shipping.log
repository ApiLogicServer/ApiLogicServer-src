
Create Order for Shipping - amount 540
 - 2025-10-20 08:59:10,486 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109af8c00) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,488 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: ShipTest 1760975950487, balance: 0, credit_limit: 2000, email: None, email_opt_out: None  row: 0x109ecb350  session: 0x109af8c00  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,488 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: ShipTest 1760975950487, balance: 0, credit_limit: 2000, email: None, email_opt_out: None  row: 0x109ecb350  session: 0x109af8c00  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,488 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109af8c00)   										 - 2025-10-20 08:59:10,488 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109af8c00)   										 - 2025-10-20 08:59:10,489 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,489 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109af8c00))       	 - 2025-10-20 08:59:10,489 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109afb350) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,492 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test order for shipping, customer_id: 52, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x109ec9350  session: 0x109afb350  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,492 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Test order for shipping, customer_id: 52, CreatedOn: 2025-10-20 08:59:10.492188, date_shipped: None, amount_total: None  row: 0x109ec9350  session: 0x109afb350  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,492 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test order for shipping, customer_id: 52, CreatedOn: 2025-10-20 08:59:10.492188, date_shipped: None, amount_total: 0  row: 0x109ec9350  session: 0x109afb350  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,492 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109afb350)   										 - 2025-10-20 08:59:10,492 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109afb350)   										 - 2025-10-20 08:59:10,493 - logic_logger - INFO
..Order[38] {AfterFlush Event} id: 38, notes: Test order for shipping, customer_id: 52, CreatedOn: 2025-10-20 08:59:10.492188, date_shipped: None, amount_total: 0  row: 0x109ec9350  session: 0x109afb350  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,493 - logic_logger - INFO
..Order[38] {Sending Order to Shipping [Note: **Kafka not enabled** ]} id: 38, notes: Test order for shipping, customer_id: 52, CreatedOn: 2025-10-20 08:59:10.492188, date_shipped: None, amount_total: 0  row: 0x109ec9350  session: 0x109afb350  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,493 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,493 - logic_logger - INFO
  Customer		## - 2025-10-20 08:59:10,493 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where # Derive the customer's balance as the sum of order totals where not yet shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x108a1ccc0>)		## - 2025-10-20 08:59:10,493 - logic_logger - INFO
  Order		## - 2025-10-20 08:59:10,493 - logic_logger - INFO
    2. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 08:59:10,493 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109afb350))       	 - 2025-10-20 08:59:10,493 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109afb240) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,496 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 38, product_id: 2, quantity: 6, amount: None, unit_price: None  row: 0x109ecaed0  session: 0x109afb240  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,496 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 38, product_id: 2, quantity: 6, amount: None, unit_price: 90.0000000000  row: 0x109ecaed0  session: 0x109afb240  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,497 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 38, product_id: 2, quantity: 6, amount: 540.0000000000, unit_price: 90.0000000000  row: 0x109ecaed0  session: 0x109afb240  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,497 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 38, product_id: 2, quantity: 6, amount: 540.0000000000, unit_price: 90.0000000000  row: 0x109ecaed0  session: 0x109afb240  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,497 - logic_logger - INFO
....Order[38] {Update - Adjusting order: amount_total} id: 38, notes: Test order for shipping, customer_id: 52, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 540.0000000000  row: 0x109ec9e50  session: 0x109afb240  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,497 - logic_logger - INFO
......Customer[52] {Update - Adjusting customer: balance} id: 52, name: ShipTest 1760975950487, balance:  [0E-10-->] 540.0000000000, credit_limit: 2000.0000000000, email: None, email_opt_out: None  row: 0x109ee0c50  session: 0x109afb240  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,497 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109afb240)   										 - 2025-10-20 08:59:10,497 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109afb240)   										 - 2025-10-20 08:59:10,498 - logic_logger - INFO
....Order[38] {AfterFlush Event} id: 38, notes: Test order for shipping, customer_id: 52, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 540.0000000000  row: 0x109ec9e50  session: 0x109afb240  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,498 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
  Customer		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where # Derive the customer's balance as the sum of order totals where not yet shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x108a1ccc0>)		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
  Item		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
  Order		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 08:59:10,498 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 08:59:10,498 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109afb240))       	 - 2025-10-20 08:59:10,498 - logic_logger - INFO
