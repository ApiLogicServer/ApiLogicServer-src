
Test Order Setup - 2 Items
 - 2025-10-20 10:00:28,350 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10be52ad0) (sqlalchemy before_flush)			 - 2025-10-20 10:00:28,351 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: TestCustomer 1760979628350, balance: 0, credit_limit: 5000, email: None, email_opt_out: None  row: 0x10be42a50  session: 0x10be52ad0  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,352 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: TestCustomer 1760979628350, balance: 0, credit_limit: 5000, email: None, email_opt_out: None  row: 0x10be42a50  session: 0x10be52ad0  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,352 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10be52ad0)   										 - 2025-10-20 10:00:28,352 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10be52ad0)   										 - 2025-10-20 10:00:28,352 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 10:00:28,352 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10be52ad0))       	 - 2025-10-20 10:00:28,352 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10be53130) (sqlalchemy before_flush)			 - 2025-10-20 10:00:28,354 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10beab7d0  session: 0x10be53130  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,354 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20 10:00:28.354988, date_shipped: None, amount_total: None  row: 0x10beab7d0  session: 0x10be53130  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,355 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20 10:00:28.354988, date_shipped: None, amount_total: 0  row: 0x10beab7d0  session: 0x10be53130  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,355 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10be53130)   										 - 2025-10-20 10:00:28,355 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10be53130)   										 - 2025-10-20 10:00:28,355 - logic_logger - INFO
..Order[65] {AfterFlush Event} id: 65, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20 10:00:28.354988, date_shipped: None, amount_total: 0  row: 0x10beab7d0  session: 0x10be53130  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,355 - logic_logger - INFO
..Order[65] {Sending Order to Shipping [Note: **Kafka not enabled** ]} id: 65, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20 10:00:28.354988, date_shipped: None, amount_total: 0  row: 0x10beab7d0  session: 0x10be53130  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,356 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 10:00:28,356 - logic_logger - INFO
  Customer		## - 2025-10-20 10:00:28,356 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10ad6d080>)		## - 2025-10-20 10:00:28,356 - logic_logger - INFO
  Order		## - 2025-10-20 10:00:28,356 - logic_logger - INFO
    2. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 10:00:28,356 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10be53130))       	 - 2025-10-20 10:00:28,356 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10be51f20) (sqlalchemy before_flush)			 - 2025-10-20 10:00:28,358 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 65, product_id: 2, quantity: 5, amount: None, unit_price: None  row: 0x10c04e9d0  session: 0x10be51f20  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,358 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 65, product_id: 2, quantity: 5, amount: None, unit_price: 90.0000000000  row: 0x10c04e9d0  session: 0x10be51f20  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,359 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 65, product_id: 2, quantity: 5, amount: 450.0000000000, unit_price: 90.0000000000  row: 0x10c04e9d0  session: 0x10be51f20  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,359 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 65, product_id: 2, quantity: 5, amount: 450.0000000000, unit_price: 90.0000000000  row: 0x10c04e9d0  session: 0x10be51f20  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,359 - logic_logger - INFO
....Order[65] {Update - Adjusting order: amount_total} id: 65, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 450.0000000000  row: 0x10c04ed50  session: 0x10be51f20  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,359 - logic_logger - INFO
......Customer[81] {Update - Adjusting customer: balance} id: 81, name: TestCustomer 1760979628350, balance:  [0E-10-->] 450.0000000000, credit_limit: 5000.0000000000, email: None, email_opt_out: None  row: 0x10bf1e5d0  session: 0x10be51f20  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,360 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10be51f20)   										 - 2025-10-20 10:00:28,360 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10be51f20)   										 - 2025-10-20 10:00:28,360 - logic_logger - INFO
....Order[65] {AfterFlush Event} id: 65, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 450.0000000000  row: 0x10c04ed50  session: 0x10be51f20  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,361 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
  Customer		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10ad6d080>)		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
  Item		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
  Order		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 10:00:28,361 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 10:00:28,361 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10be51f20))       	 - 2025-10-20 10:00:28,361 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10be52030) (sqlalchemy before_flush)			 - 2025-10-20 10:00:28,363 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 65, product_id: 2, quantity: 5, amount: None, unit_price: None  row: 0x10c04cad0  session: 0x10be52030  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,363 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 65, product_id: 2, quantity: 5, amount: None, unit_price: 90.0000000000  row: 0x10c04cad0  session: 0x10be52030  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,364 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 65, product_id: 2, quantity: 5, amount: 450.0000000000, unit_price: 90.0000000000  row: 0x10c04cad0  session: 0x10be52030  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,364 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 65, product_id: 2, quantity: 5, amount: 450.0000000000, unit_price: 90.0000000000  row: 0x10c04cad0  session: 0x10be52030  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,364 - logic_logger - INFO
....Order[65] {Update - Adjusting order: amount_total} id: 65, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [450.0000000000-->] 900.0000000000  row: 0x10c04f8d0  session: 0x10be52030  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,364 - logic_logger - INFO
......Customer[81] {Update - Adjusting customer: balance} id: 81, name: TestCustomer 1760979628350, balance:  [450.0000000000-->] 900.0000000000, credit_limit: 5000.0000000000, email: None, email_opt_out: None  row: 0x10c0983d0  session: 0x10be52030  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,364 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10be52030)   										 - 2025-10-20 10:00:28,365 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10be52030)   										 - 2025-10-20 10:00:28,365 - logic_logger - INFO
....Order[65] {AfterFlush Event} id: 65, notes: Test order for DELETE operations, customer_id: 81, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [450.0000000000-->] 900.0000000000  row: 0x10c04f8d0  session: 0x10be52030  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,365 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 10:00:28,365 - logic_logger - INFO
  Customer		## - 2025-10-20 10:00:28,365 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10ad6d080>)		## - 2025-10-20 10:00:28,365 - logic_logger - INFO
  Item		## - 2025-10-20 10:00:28,365 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 10:00:28,365 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 10:00:28,366 - logic_logger - INFO
  Order		## - 2025-10-20 10:00:28,366 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 10:00:28,366 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 10:00:28,366 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10be52030))       	 - 2025-10-20 10:00:28,366 - logic_logger - INFO
