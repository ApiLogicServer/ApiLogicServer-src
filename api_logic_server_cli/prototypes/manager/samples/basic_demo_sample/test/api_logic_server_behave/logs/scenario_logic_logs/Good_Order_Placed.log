
Good Order Placed
 - 2025-10-17 20:02:27,808 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b681450) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,810 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Widget, unit_price: 5  row: 0x10b03a970  session: 0x10b681450  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,810 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b681450)   										 - 2025-10-17 20:02:27,810 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b681450)   										 - 2025-10-17 20:02:27,811 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,811 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b681450))       	 - 2025-10-17 20:02:27,811 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b706780) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,814 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Good order, customer_id: 6, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10a847ad0  session: 0x10b706780  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,814 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17 20:02:27.814843, date_shipped: None, amount_total: None  row: 0x10a847ad0  session: 0x10b706780  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,814 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17 20:02:27.814843, date_shipped: None, amount_total: 0  row: 0x10a847ad0  session: 0x10b706780  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,814 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b706780)   										 - 2025-10-17 20:02:27,815 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b706780)   										 - 2025-10-17 20:02:27,816 - logic_logger - INFO
..Order[6] {AfterFlush Event} id: 6, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17 20:02:27.814843, date_shipped: None, amount_total: 0  row: 0x10a847ad0  session: 0x10b706780  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,816 - logic_logger - INFO
..Order[6] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 6, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17 20:02:27.814843, date_shipped: None, amount_total: 0  row: 0x10a847ad0  session: 0x10b706780  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,816 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,816 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,816 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,816 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,816 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,816 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b706780))       	 - 2025-10-17 20:02:27,816 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b045480) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,819 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 6, product_id: 6, quantity: 10, amount: None, unit_price: None  row: 0x10b70aed0  session: 0x10b045480  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,820 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 6, product_id: 6, quantity: 10, amount: None, unit_price: 5.0000000000  row: 0x10b70aed0  session: 0x10b045480  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,821 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 6, product_id: 6, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b70aed0  session: 0x10b045480  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,821 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 6, product_id: 6, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b70aed0  session: 0x10b045480  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,821 - logic_logger - INFO
....Order[6] {Update - Adjusting order: amount_total} id: 6, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b708a50  session: 0x10b045480  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,821 - logic_logger - INFO
......Customer[6] {Update - Adjusting customer: balance} id: 6, name: Test Customer 1760756547799, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b7681d0  session: 0x10b045480  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,822 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b045480)   										 - 2025-10-17 20:02:27,822 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b045480)   										 - 2025-10-17 20:02:27,823 - logic_logger - INFO
....Order[6] {AfterFlush Event} id: 6, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b708a50  session: 0x10b045480  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,823 - logic_logger - INFO
....Order[6] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 6, notes: Good order, customer_id: 6, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b708a50  session: 0x10b045480  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,823 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,823 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,823 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b045480))       	 - 2025-10-17 20:02:27,823 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b0a48d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,831 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1760756547830, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b70af50  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,833 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1760756547830, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b70af50  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,833 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,833 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,833 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,833 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b0a48d0))       	 - 2025-10-17 20:02:27,833 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b718d10) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,836 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Filler Product, unit_price: 1  row: 0x10b03acf0  session: 0x10b718d10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,838 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b718d10)   										 - 2025-10-17 20:02:27,838 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b718d10)   										 - 2025-10-17 20:02:27,839 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,839 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b718d10))       	 - 2025-10-17 20:02:27,839 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b7199d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,842 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Filler order, customer_id: 7, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b70aad0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,842 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.842364, date_shipped: None, amount_total: None  row: 0x10b70aad0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,842 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.842364, date_shipped: None, amount_total: 0  row: 0x10b70aad0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,842 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b7199d0)   										 - 2025-10-17 20:02:27,842 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b7199d0)   										 - 2025-10-17 20:02:27,843 - logic_logger - INFO
..Order[7] {AfterFlush Event} id: 7, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.842364, date_shipped: None, amount_total: 0  row: 0x10b70aad0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,843 - logic_logger - INFO
..Order[7] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 7, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.842364, date_shipped: None, amount_total: 0  row: 0x10b70aad0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,843 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,843 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,843 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,843 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,843 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,843 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b7199d0))       	 - 2025-10-17 20:02:27,843 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b718c00) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,845 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 7, product_id: 7, quantity: 900, amount: None, unit_price: None  row: 0x10b709cd0  session: 0x10b718c00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,846 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 7, product_id: 7, quantity: 900, amount: None, unit_price: 1.0000000000  row: 0x10b709cd0  session: 0x10b718c00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,846 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 7, product_id: 7, quantity: 900, amount: 900.0000000000, unit_price: 1.0000000000  row: 0x10b709cd0  session: 0x10b718c00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,846 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 7, product_id: 7, quantity: 900, amount: 900.0000000000, unit_price: 1.0000000000  row: 0x10b709cd0  session: 0x10b718c00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,846 - logic_logger - INFO
....Order[7] {Update - Adjusting order: amount_total} id: 7, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 900.0000000000  row: 0x10b769050  session: 0x10b718c00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,846 - logic_logger - INFO
......Customer[7] {Update - Adjusting customer: balance} id: 7, name: Test Customer 1760756547830, balance:  [0E-10-->] 900.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b76a5d0  session: 0x10b718c00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,847 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b718c00)   										 - 2025-10-17 20:02:27,847 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b718c00)   										 - 2025-10-17 20:02:27,848 - logic_logger - INFO
....Order[7] {AfterFlush Event} id: 7, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 900.0000000000  row: 0x10b769050  session: 0x10b718c00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,848 - logic_logger - INFO
....Order[7] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 7, notes: Filler order, customer_id: 7, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 900.0000000000  row: 0x10b769050  session: 0x10b718c00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,848 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,848 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,848 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b718c00))       	 - 2025-10-17 20:02:27,848 - logic_logger - INFO
