
Alter Item Quantity to Exceed Credit
 - 2025-10-17 20:02:27,884 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a470) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,885 - logic_logger - INFO
..Item[8] {Update - client} id: 8, order_id: 9, product_id: 9, quantity:  [10-->] 1500, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b893a50  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,886 - logic_logger - INFO
..Item[8] {Formula amount} id: 8, order_id: 9, product_id: 9, quantity:  [10-->] 1500, amount:  [50.0000000000-->] 7500.0000000000, unit_price: 5.0000000000  row: 0x10b893a50  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,886 - logic_logger - INFO
....Order[9] {Update - Adjusting order: amount_total} id: 9, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 7500.0000000000  row: 0x10b8b8550  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,886 - logic_logger - INFO
......Customer[8] {Update - Adjusting customer: balance} id: 8, name: Test Customer 1760756547867, balance:  [50.0000000000-->] 7500.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b9150  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,887 - logic_logger - INFO
......Customer[8] {Constraint Failure: Customer balance (7500.0000000000) exceeds credit limit (1000.0000000000)} id: 8, name: Test Customer 1760756547867, balance:  [50.0000000000-->] 7500.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b9150  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,887 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
    1. Constraint Function: None 		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
    2. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,887 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,887 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a580) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,891 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1760756547889, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b892c50  session: 0x10b71a580  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,891 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1760756547889, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b892c50  session: 0x10b71a580  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,891 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a580)   										 - 2025-10-17 20:02:27,891 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a580)   										 - 2025-10-17 20:02:27,891 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,891 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a580))       	 - 2025-10-17 20:02:27,891 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a030) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,894 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Test Product, unit_price: 5  row: 0x10b88f5b0  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,894 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a030)   										 - 2025-10-17 20:02:27,894 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a030)   										 - 2025-10-17 20:02:27,895 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,895 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a030))       	 - 2025-10-17 20:02:27,895 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a360) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,897 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test order, customer_id: 9, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b709fd0  session: 0x10b71a360  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,897 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17 20:02:27.897892, date_shipped: None, amount_total: None  row: 0x10b709fd0  session: 0x10b71a360  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,897 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17 20:02:27.897892, date_shipped: None, amount_total: 0  row: 0x10b709fd0  session: 0x10b71a360  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,897 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a360)   										 - 2025-10-17 20:02:27,898 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a360)   										 - 2025-10-17 20:02:27,898 - logic_logger - INFO
..Order[10] {AfterFlush Event} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17 20:02:27.897892, date_shipped: None, amount_total: 0  row: 0x10b709fd0  session: 0x10b71a360  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,898 - logic_logger - INFO
..Order[10] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17 20:02:27.897892, date_shipped: None, amount_total: 0  row: 0x10b709fd0  session: 0x10b71a360  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,898 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,899 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,899 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,899 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,899 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,899 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a360))       	 - 2025-10-17 20:02:27,899 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a140) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,901 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 10, product_id: 10, quantity: 10, amount: None, unit_price: None  row: 0x10b708b50  session: 0x10b71a140  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,901 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 10, product_id: 10, quantity: 10, amount: None, unit_price: 5.0000000000  row: 0x10b708b50  session: 0x10b71a140  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,902 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 10, product_id: 10, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b708b50  session: 0x10b71a140  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,902 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 10, product_id: 10, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b708b50  session: 0x10b71a140  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,902 - logic_logger - INFO
....Order[10] {Update - Adjusting order: amount_total} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b769ad0  session: 0x10b71a140  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,902 - logic_logger - INFO
......Customer[9] {Update - Adjusting customer: balance} id: 9, name: Test Customer 1760756547889, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b76a0d0  session: 0x10b71a140  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,903 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a140)   										 - 2025-10-17 20:02:27,903 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a140)   										 - 2025-10-17 20:02:27,903 - logic_logger - INFO
....Order[10] {AfterFlush Event} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b769ad0  session: 0x10b71a140  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,903 - logic_logger - INFO
....Order[10] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b769ad0  session: 0x10b71a140  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,904 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,904 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,904 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a140))       	 - 2025-10-17 20:02:27,904 - logic_logger - INFO
