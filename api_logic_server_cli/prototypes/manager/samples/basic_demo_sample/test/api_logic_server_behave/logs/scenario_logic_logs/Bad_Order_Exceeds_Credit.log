
Bad Order Exceeds Credit
 - 2025-10-17 20:02:27,851 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b0a48d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,852 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Expensive Widget, unit_price: 1  row: 0x10b03acf0  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,853 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,853 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,853 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,853 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b0a48d0))       	 - 2025-10-17 20:02:27,853 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b7199d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,855 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Order exceeding credit, customer_id: 7, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b708b50  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,855 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Order exceeding credit, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.855942, date_shipped: None, amount_total: None  row: 0x10b708b50  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,855 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Order exceeding credit, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.855942, date_shipped: None, amount_total: 0  row: 0x10b708b50  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,856 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b7199d0)   										 - 2025-10-17 20:02:27,856 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b7199d0)   										 - 2025-10-17 20:02:27,856 - logic_logger - INFO
..Order[8] {AfterFlush Event} id: 8, notes: Order exceeding credit, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.855942, date_shipped: None, amount_total: 0  row: 0x10b708b50  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,856 - logic_logger - INFO
..Order[8] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 8, notes: Order exceeding credit, customer_id: 7, CreatedOn: 2025-10-17 20:02:27.855942, date_shipped: None, amount_total: 0  row: 0x10b708b50  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,856 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,856 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,856 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,857 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,857 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,857 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b7199d0))       	 - 2025-10-17 20:02:27,857 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b718e20) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,859 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 8, product_id: 8, quantity: 200, amount: None, unit_price: None  row: 0x10b70a1d0  session: 0x10b718e20  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,859 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 8, product_id: 8, quantity: 200, amount: None, unit_price: 1.0000000000  row: 0x10b70a1d0  session: 0x10b718e20  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,860 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 8, product_id: 8, quantity: 200, amount: 200.0000000000, unit_price: 1.0000000000  row: 0x10b70a1d0  session: 0x10b718e20  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,860 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 8, product_id: 8, quantity: 200, amount: 200.0000000000, unit_price: 1.0000000000  row: 0x10b70a1d0  session: 0x10b718e20  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,860 - logic_logger - INFO
....Order[8] {Update - Adjusting order: amount_total} id: 8, notes: Order exceeding credit, customer_id: 7, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 200.0000000000  row: 0x10b769c50  session: 0x10b718e20  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,860 - logic_logger - INFO
......Customer[7] {Update - Adjusting customer: balance} id: 7, name: Test Customer 1760756547830, balance:  [900.0000000000-->] 1100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b76ac50  session: 0x10b718e20  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,860 - logic_logger - INFO
......Customer[7] {Constraint Failure: Customer balance (1100.0000000000) exceeds credit limit (1000.0000000000)} id: 7, name: Test Customer 1760756547830, balance:  [900.0000000000-->] 1100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b76ac50  session: 0x10b718e20  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,861 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
    1. Constraint Function: None 		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
    2. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
    4. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,861 - logic_logger - INFO
    5. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,861 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719ae0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,868 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1760756547867, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b769a50  session: 0x10b719ae0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,869 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1760756547867, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b769a50  session: 0x10b719ae0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,869 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719ae0)   										 - 2025-10-17 20:02:27,869 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719ae0)   										 - 2025-10-17 20:02:27,869 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,869 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719ae0))       	 - 2025-10-17 20:02:27,869 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719f20) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,872 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Test Product, unit_price: 5  row: 0x10b771320  session: 0x10b719f20  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,872 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719f20)   										 - 2025-10-17 20:02:27,872 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719f20)   										 - 2025-10-17 20:02:27,872 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,872 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719f20))       	 - 2025-10-17 20:02:27,872 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a030) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,875 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test order, customer_id: 8, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b7690d0  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,875 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17 20:02:27.875432, date_shipped: None, amount_total: None  row: 0x10b7690d0  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,875 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17 20:02:27.875432, date_shipped: None, amount_total: 0  row: 0x10b7690d0  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,875 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a030)   										 - 2025-10-17 20:02:27,875 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a030)   										 - 2025-10-17 20:02:27,876 - logic_logger - INFO
..Order[9] {AfterFlush Event} id: 9, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17 20:02:27.875432, date_shipped: None, amount_total: 0  row: 0x10b7690d0  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,876 - logic_logger - INFO
..Order[9] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 9, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17 20:02:27.875432, date_shipped: None, amount_total: 0  row: 0x10b7690d0  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,876 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,876 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,876 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,876 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,876 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,876 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a030))       	 - 2025-10-17 20:02:27,876 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a250) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,879 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 9, product_id: 9, quantity: 10, amount: None, unit_price: None  row: 0x10b769ad0  session: 0x10b71a250  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,879 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 9, product_id: 9, quantity: 10, amount: None, unit_price: 5.0000000000  row: 0x10b769ad0  session: 0x10b71a250  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,879 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 9, product_id: 9, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b769ad0  session: 0x10b71a250  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,879 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 9, product_id: 9, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b769ad0  session: 0x10b71a250  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,879 - logic_logger - INFO
....Order[9] {Update - Adjusting order: amount_total} id: 9, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b892bd0  session: 0x10b71a250  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,880 - logic_logger - INFO
......Customer[8] {Update - Adjusting customer: balance} id: 8, name: Test Customer 1760756547867, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b8250  session: 0x10b71a250  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,880 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a250)   										 - 2025-10-17 20:02:27,880 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a250)   										 - 2025-10-17 20:02:27,880 - logic_logger - INFO
....Order[9] {AfterFlush Event} id: 9, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b892bd0  session: 0x10b71a250  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,881 - logic_logger - INFO
....Order[9] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 9, notes: Test order, customer_id: 8, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b892bd0  session: 0x10b71a250  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,881 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,881 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,881 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a250))       	 - 2025-10-17 20:02:27,881 - logic_logger - INFO
