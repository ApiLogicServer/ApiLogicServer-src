
Product Change - to Gadget
 - 2025-10-20 08:59:10,438 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109afb130) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,442 - logic_logger - INFO
..Item[42] {Update - client} id: 42, order_id: 36, product_id:  [2-->] 1, quantity: 2, amount: 180.0000000000, unit_price: 90.0000000000  row: 0x109ec9ad0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,442 - logic_logger - INFO
..Item[42] {copy_rules for role: product - unit_price} id: 42, order_id: 36, product_id:  [2-->] 1, quantity: 2, amount: 180.0000000000, unit_price:  [90.0000000000-->] 150.0000000000  row: 0x109ec9ad0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,442 - logic_logger - INFO
..Item[42] {Formula amount} id: 42, order_id: 36, product_id:  [2-->] 1, quantity: 2, amount:  [180.0000000000-->] 300.0000000000, unit_price:  [90.0000000000-->] 150.0000000000  row: 0x109ec9ad0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,442 - logic_logger - INFO
....Order[36] {Update - Adjusting order: amount_total} id: 36, notes: Test order for updates, customer_id: 50, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [180.0000000000-->] 300.0000000000  row: 0x109ee0dd0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,443 - logic_logger - INFO
......Customer[50] {Update - Adjusting customer: balance} id: 50, name: TestCust 1760975950423, balance:  [180.0000000000-->] 300.0000000000, credit_limit: 2000.0000000000, email: None, email_opt_out: None  row: 0x109ee0c50  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,443 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109afb130)   										 - 2025-10-20 08:59:10,443 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109afb130)   										 - 2025-10-20 08:59:10,443 - logic_logger - INFO
....Order[36] {AfterFlush Event} id: 36, notes: Test order for updates, customer_id: 50, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [180.0000000000-->] 300.0000000000  row: 0x109ee0dd0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,443 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
  Customer		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where # Derive the customer's balance as the sum of order totals where not yet shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x108a1ccc0>)		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
  Item		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
  Order		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 08:59:10,443 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 08:59:10,443 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109afb130))       	 - 2025-10-20 08:59:10,444 - logic_logger - INFO
