
Assign Product to Item
 - 2025-10-20 10:00:28,462 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10be53460) (sqlalchemy before_flush)			 - 2025-10-20 10:00:28,463 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 69, product_id: 2, quantity: 1, amount: None, unit_price: None  row: 0x10c04dfd0  session: 0x10be53460  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,463 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 69, product_id: 2, quantity: 1, amount: None, unit_price: 90.0000000000  row: 0x10c04dfd0  session: 0x10be53460  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,464 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 69, product_id: 2, quantity: 1, amount: 90.0000000000, unit_price: 90.0000000000  row: 0x10c04dfd0  session: 0x10be53460  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,464 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 69, product_id: 2, quantity: 1, amount: 90.0000000000, unit_price: 90.0000000000  row: 0x10c04dfd0  session: 0x10be53460  ins_upd_dlt: ins, initial: ins - 2025-10-20 10:00:28,464 - logic_logger - INFO
....Order[69] {Update - Adjusting order: amount_total} id: 69, notes: Order for unit price test, customer_id: 85, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 90.0000000000  row: 0x10c04d8d0  session: 0x10be53460  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,465 - logic_logger - INFO
......Customer[85] {Update - Adjusting customer: balance} id: 85, name: UnitPriceTestCustomer 1760979628452, balance:  [0E-10-->] 90.0000000000, credit_limit: 5000.0000000000, email: None, email_opt_out: None  row: 0x10c04cfd0  session: 0x10be53460  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,465 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10be53460)   										 - 2025-10-20 10:00:28,465 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10be53460)   										 - 2025-10-20 10:00:28,466 - logic_logger - INFO
....Order[69] {AfterFlush Event} id: 69, notes: Order for unit price test, customer_id: 85, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 90.0000000000  row: 0x10c04d8d0  session: 0x10be53460  ins_upd_dlt: upd, initial: upd - 2025-10-20 10:00:28,466 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
  Customer		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10ad6d080>)		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
  Item		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
  Order		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 10:00:28,466 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 10:00:28,466 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10be53460))       	 - 2025-10-20 10:00:28,466 - logic_logger - INFO
