
Create Multi-Item Order - total 390
 - 2025-10-20 08:59:10,455 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109af9d00) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,456 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: DeleteTest 1760975950455, balance: 0, credit_limit: 2000, email: None, email_opt_out: None  row: 0x109ec9dd0  session: 0x109af9d00  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,456 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: DeleteTest 1760975950455, balance: 0, credit_limit: 2000, email: None, email_opt_out: None  row: 0x109ec9dd0  session: 0x109af9d00  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,456 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109af9d00)   										 - 2025-10-20 08:59:10,457 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109af9d00)   										 - 2025-10-20 08:59:10,457 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,457 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109af9d00))       	 - 2025-10-20 08:59:10,457 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109afabe0) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,459 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test order for deletion, customer_id: 51, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x109ec99d0  session: 0x109afabe0  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,459 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20 08:59:10.459973, date_shipped: None, amount_total: None  row: 0x109ec99d0  session: 0x109afabe0  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,459 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20 08:59:10.459973, date_shipped: None, amount_total: 0  row: 0x109ec99d0  session: 0x109afabe0  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,460 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109afabe0)   										 - 2025-10-20 08:59:10,460 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109afabe0)   										 - 2025-10-20 08:59:10,461 - logic_logger - INFO
..Order[37] {AfterFlush Event} id: 37, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20 08:59:10.459973, date_shipped: None, amount_total: 0  row: 0x109ec99d0  session: 0x109afabe0  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,461 - logic_logger - INFO
..Order[37] {Sending Order to Shipping [Note: **Kafka not enabled** ]} id: 37, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20 08:59:10.459973, date_shipped: None, amount_total: 0  row: 0x109ec99d0  session: 0x109afabe0  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,461 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,461 - logic_logger - INFO
  Customer		## - 2025-10-20 08:59:10,461 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where # Derive the customer's balance as the sum of order totals where not yet shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x108a1ccc0>)		## - 2025-10-20 08:59:10,461 - logic_logger - INFO
  Order		## - 2025-10-20 08:59:10,461 - logic_logger - INFO
    2. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 08:59:10,461 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109afabe0))       	 - 2025-10-20 08:59:10,461 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109af9260) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,464 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 37, product_id: 2, quantity: 3, amount: None, unit_price: None  row: 0x109c1d1d0  session: 0x109af9260  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,464 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 37, product_id: 2, quantity: 3, amount: None, unit_price: 90.0000000000  row: 0x109c1d1d0  session: 0x109af9260  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,465 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 37, product_id: 2, quantity: 3, amount: 270.0000000000, unit_price: 90.0000000000  row: 0x109c1d1d0  session: 0x109af9260  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,465 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 37, product_id: 2, quantity: 3, amount: 270.0000000000, unit_price: 90.0000000000  row: 0x109c1d1d0  session: 0x109af9260  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,465 - logic_logger - INFO
....Order[37] {Update - Adjusting order: amount_total} id: 37, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 270.0000000000  row: 0x109ecbbd0  session: 0x109af9260  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,465 - logic_logger - INFO
......Customer[51] {Update - Adjusting customer: balance} id: 51, name: DeleteTest 1760975950455, balance:  [0E-10-->] 270.0000000000, credit_limit: 2000.0000000000, email: None, email_opt_out: None  row: 0x109ec97d0  session: 0x109af9260  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,465 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109af9260)   										 - 2025-10-20 08:59:10,465 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109af9260)   										 - 2025-10-20 08:59:10,466 - logic_logger - INFO
....Order[37] {AfterFlush Event} id: 37, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [0E-10-->] 270.0000000000  row: 0x109ecbbd0  session: 0x109af9260  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,466 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
  Customer		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where # Derive the customer's balance as the sum of order totals where not yet shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x108a1ccc0>)		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
  Item		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
  Order		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 08:59:10,466 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 08:59:10,466 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109af9260))       	 - 2025-10-20 08:59:10,466 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x109afb130) (sqlalchemy before_flush)			 - 2025-10-20 08:59:10,469 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 37, product_id: 1, quantity: 1, amount: None, unit_price: None  row: 0x109c1d950  session: 0x109afb130  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,469 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 37, product_id: 1, quantity: 1, amount: None, unit_price: 150.0000000000  row: 0x109c1d950  session: 0x109afb130  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,470 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 37, product_id: 1, quantity: 1, amount: 150.0000000000, unit_price: 150.0000000000  row: 0x109c1d950  session: 0x109afb130  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,470 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 37, product_id: 1, quantity: 1, amount: 150.0000000000, unit_price: 150.0000000000  row: 0x109c1d950  session: 0x109afb130  ins_upd_dlt: ins, initial: ins - 2025-10-20 08:59:10,470 - logic_logger - INFO
....Order[37] {Update - Adjusting order: amount_total} id: 37, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [270.0000000000-->] 420.0000000000  row: 0x109eca7d0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,470 - logic_logger - INFO
......Customer[51] {Update - Adjusting customer: balance} id: 51, name: DeleteTest 1760975950455, balance:  [270.0000000000-->] 420.0000000000, credit_limit: 2000.0000000000, email: None, email_opt_out: None  row: 0x109ecb450  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,470 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x109afb130)   										 - 2025-10-20 08:59:10,471 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x109afb130)   										 - 2025-10-20 08:59:10,471 - logic_logger - INFO
....Order[37] {AfterFlush Event} id: 37, notes: Test order for deletion, customer_id: 51, CreatedOn: 2025-10-20, date_shipped: None, amount_total:  [270.0000000000-->] 420.0000000000  row: 0x109eca7d0  session: 0x109afb130  ins_upd_dlt: upd, initial: upd - 2025-10-20 08:59:10,471 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
  Customer		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where # Derive the customer's balance as the sum of order totals where not yet shipped.
    Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x108a1ccc0>)		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
  Item		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): <function>		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
  Order		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-20 08:59:10,471 - logic_logger - INFO
    5. RowEvent Order.send_order_to_shipping() 		## - 2025-10-20 08:59:10,471 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x109afb130))       	 - 2025-10-20 08:59:10,471 - logic_logger - INFO
