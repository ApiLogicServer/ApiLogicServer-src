
Reset Shipped Includes in Balance
 - 2025-10-17 20:02:28,020 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a580) (sqlalchemy before_flush)			 - 2025-10-17 20:02:28,022 - logic_logger - INFO
..Order[14] {Update - client} id: 14, notes: Shipped order, customer_id: 14, CreatedOn: 2025-10-17, date_shipped:  [2024-01-15-->] None, amount_total: 100.0000000000  row: 0x10b8b8650  session: 0x10b71a580  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,022 - logic_logger - INFO
....Customer[14] {Update - Adjusting customer: balance} id: 14, name: Test Customer 1760756548001, balance:  [0E-10-->] 100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8ba150  session: 0x10b71a580  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,022 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a580)   										 - 2025-10-17 20:02:28,022 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a580)   										 - 2025-10-17 20:02:28,023 - logic_logger - INFO
..Order[14] {AfterFlush Event} id: 14, notes: Shipped order, customer_id: 14, CreatedOn: 2025-10-17, date_shipped:  [2024-01-15-->] None, amount_total: 100.0000000000  row: 0x10b8b8650  session: 0x10b71a580  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,023 - logic_logger - INFO
..Order[14] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 14, notes: Shipped order, customer_id: 14, CreatedOn: 2025-10-17, date_shipped:  [2024-01-15-->] None, amount_total: 100.0000000000  row: 0x10b8b8650  session: 0x10b71a580  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,023 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:28,023 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:28,023 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:28,023 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:28,023 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:28,023 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a580))       	 - 2025-10-17 20:02:28,023 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71af10) (sqlalchemy before_flush)			 - 2025-10-17 20:02:28,029 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1760756548028, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b892cd0  session: 0x10b71af10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,029 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1760756548028, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b892cd0  session: 0x10b71af10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,029 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71af10)   										 - 2025-10-17 20:02:28,029 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71af10)   										 - 2025-10-17 20:02:28,029 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:28,030 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71af10))       	 - 2025-10-17 20:02:28,030 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71aad0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:28,032 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Lifecycle Product, unit_price: 1  row: 0x10b88f700  session: 0x10b71aad0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,032 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71aad0)   										 - 2025-10-17 20:02:28,032 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71aad0)   										 - 2025-10-17 20:02:28,032 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:28,032 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71aad0))       	 - 2025-10-17 20:02:28,032 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b718af0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:28,034 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Lifecycle order, customer_id: 15, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b709bd0  session: 0x10b718af0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,035 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17 20:02:28.035055, date_shipped: None, amount_total: None  row: 0x10b709bd0  session: 0x10b718af0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,035 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17 20:02:28.035055, date_shipped: None, amount_total: 0  row: 0x10b709bd0  session: 0x10b718af0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,035 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b718af0)   										 - 2025-10-17 20:02:28,035 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b718af0)   										 - 2025-10-17 20:02:28,035 - logic_logger - INFO
..Order[15] {AfterFlush Event} id: 15, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17 20:02:28.035055, date_shipped: None, amount_total: 0  row: 0x10b709bd0  session: 0x10b718af0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,035 - logic_logger - INFO
..Order[15] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 15, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17 20:02:28.035055, date_shipped: None, amount_total: 0  row: 0x10b709bd0  session: 0x10b718af0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,035 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:28,035 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:28,035 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:28,036 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:28,036 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:28,036 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b718af0))       	 - 2025-10-17 20:02:28,036 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a470) (sqlalchemy before_flush)			 - 2025-10-17 20:02:28,038 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 15, product_id: 17, quantity: 150, amount: None, unit_price: None  row: 0x10b893b50  session: 0x10b71a470  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,038 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 15, product_id: 17, quantity: 150, amount: None, unit_price: 1.0000000000  row: 0x10b893b50  session: 0x10b71a470  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,039 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 15, product_id: 17, quantity: 150, amount: 150.0000000000, unit_price: 1.0000000000  row: 0x10b893b50  session: 0x10b71a470  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,039 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 15, product_id: 17, quantity: 150, amount: 150.0000000000, unit_price: 1.0000000000  row: 0x10b893b50  session: 0x10b71a470  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:28,039 - logic_logger - INFO
....Order[15] {Update - Adjusting order: amount_total} id: 15, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 150.0000000000  row: 0x10b8b99d0  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,039 - logic_logger - INFO
......Customer[15] {Update - Adjusting customer: balance} id: 15, name: Test Customer 1760756548028, balance:  [0E-10-->] 150.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8931d0  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,040 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a470)   										 - 2025-10-17 20:02:28,040 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a470)   										 - 2025-10-17 20:02:28,040 - logic_logger - INFO
....Order[15] {AfterFlush Event} id: 15, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 150.0000000000  row: 0x10b8b99d0  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,040 - logic_logger - INFO
....Order[15] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 15, notes: Lifecycle order, customer_id: 15, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 150.0000000000  row: 0x10b8b99d0  session: 0x10b71a470  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:28,040 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:28,041 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:28,041 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a470))       	 - 2025-10-17 20:02:28,041 - logic_logger - INFO
