
Delete Item Adjusts Balance
 - 2025-10-17 20:02:27,970 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b0a48d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,971 - logic_logger - INFO
..Item[11] {Delete - client} id: 11, order_id: 12, product_id: 13, quantity: 5, amount: 50.0000000000, unit_price: 10.0000000000  row: 0x10b76a7d0  session: 0x10b0a48d0  ins_upd_dlt: dlt, initial: dlt - 2025-10-17 20:02:27,971 - logic_logger - INFO
....Order[12] {Update - Adjusting order: amount_total} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [110.0000000000-->] 60.0000000000  row: 0x10b8b9550  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,972 - logic_logger - INFO
......Customer[12] {Update - Adjusting customer: balance} id: 12, name: Test Customer 1760756547946, balance:  [110.0000000000-->] 60.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b82d0  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,972 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,972 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,973 - logic_logger - INFO
....Order[12] {AfterFlush Event} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [110.0000000000-->] 60.0000000000  row: 0x10b8b9550  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,973 - logic_logger - INFO
....Order[12] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [110.0000000000-->] 60.0000000000  row: 0x10b8b9550  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,973 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,973 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,973 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,973 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,973 - logic_logger - INFO
    2. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,973 - logic_logger - INFO
    3. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,973 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b0a48d0))       	 - 2025-10-17 20:02:27,973 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a030) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,977 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1760756547976, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b893050  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,977 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1760756547976, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b893050  session: 0x10b71a030  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,977 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a030)   										 - 2025-10-17 20:02:27,977 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a030)   										 - 2025-10-17 20:02:27,978 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,978 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a030))       	 - 2025-10-17 20:02:27,978 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a580) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,980 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Lifecycle Product, unit_price: 1  row: 0x10b771630  session: 0x10b71a580  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,980 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a580)   										 - 2025-10-17 20:02:27,980 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a580)   										 - 2025-10-17 20:02:27,981 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,981 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a580))       	 - 2025-10-17 20:02:27,981 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71abe0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,983 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Lifecycle order, customer_id: 13, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b76a050  session: 0x10b71abe0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,983 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17 20:02:27.983365, date_shipped: None, amount_total: None  row: 0x10b76a050  session: 0x10b71abe0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,983 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17 20:02:27.983365, date_shipped: None, amount_total: 0  row: 0x10b76a050  session: 0x10b71abe0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,983 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71abe0)   										 - 2025-10-17 20:02:27,984 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71abe0)   										 - 2025-10-17 20:02:27,984 - logic_logger - INFO
..Order[13] {AfterFlush Event} id: 13, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17 20:02:27.983365, date_shipped: None, amount_total: 0  row: 0x10b76a050  session: 0x10b71abe0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,984 - logic_logger - INFO
..Order[13] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 13, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17 20:02:27.983365, date_shipped: None, amount_total: 0  row: 0x10b76a050  session: 0x10b71abe0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,984 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,984 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,984 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,984 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,984 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,984 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71abe0))       	 - 2025-10-17 20:02:27,984 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b0a48d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,987 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 13, product_id: 15, quantity: 100, amount: None, unit_price: None  row: 0x10b892e50  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,987 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 13, product_id: 15, quantity: 100, amount: None, unit_price: 1.0000000000  row: 0x10b892e50  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,987 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 13, product_id: 15, quantity: 100, amount: 100.0000000000, unit_price: 1.0000000000  row: 0x10b892e50  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,987 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 13, product_id: 15, quantity: 100, amount: 100.0000000000, unit_price: 1.0000000000  row: 0x10b892e50  session: 0x10b0a48d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,988 - logic_logger - INFO
....Order[13] {Update - Adjusting order: amount_total} id: 13, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 100.0000000000  row: 0x10b7690d0  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,988 - logic_logger - INFO
......Customer[13] {Update - Adjusting customer: balance} id: 13, name: Test Customer 1760756547976, balance:  [0E-10-->] 100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b769ed0  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,988 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,988 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b0a48d0)   										 - 2025-10-17 20:02:27,989 - logic_logger - INFO
....Order[13] {AfterFlush Event} id: 13, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 100.0000000000  row: 0x10b7690d0  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,989 - logic_logger - INFO
....Order[13] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 13, notes: Lifecycle order, customer_id: 13, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 100.0000000000  row: 0x10b7690d0  session: 0x10b0a48d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,989 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,989 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,989 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b0a48d0))       	 - 2025-10-17 20:02:27,989 - logic_logger - INFO
