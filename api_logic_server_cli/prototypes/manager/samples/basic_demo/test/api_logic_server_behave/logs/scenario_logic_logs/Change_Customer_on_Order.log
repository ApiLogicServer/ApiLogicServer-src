
Change Customer on Order
 - 2025-10-17 20:02:27,938 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71a690) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,939 - logic_logger - INFO
..Order[11] {Update - client} id: 11, notes: Order to transfer, customer_id:  [10-->] 11, CreatedOn: 2025-10-17, date_shipped: None, amount_total: 100.0000000000  row: 0x10b8932d0  session: 0x10b71a690  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,939 - logic_logger - INFO
....Customer[11] {Update - Adjusting customer: balance, balance} id: 11, name: Test Customer 2 1760756547919, balance:  [0E-10-->] 100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b76ab50  session: 0x10b71a690  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,940 - logic_logger - INFO
....Customer[10] {Update - Adjusting Old customer} id: 10, name: Test Customer 1 1760756547919, balance:  [100.0000000000-->] 0E-10, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b7699d0  session: 0x10b71a690  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,940 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71a690)   										 - 2025-10-17 20:02:27,940 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71a690)   										 - 2025-10-17 20:02:27,941 - logic_logger - INFO
..Order[11] {AfterFlush Event} id: 11, notes: Order to transfer, customer_id:  [10-->] 11, CreatedOn: 2025-10-17, date_shipped: None, amount_total: 100.0000000000  row: 0x10b8932d0  session: 0x10b71a690  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,941 - logic_logger - INFO
..Order[11] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 11, notes: Order to transfer, customer_id:  [10-->] 11, CreatedOn: 2025-10-17, date_shipped: None, amount_total: 100.0000000000  row: 0x10b8932d0  session: 0x10b71a690  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,941 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,941 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,941 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,941 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,941 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,941 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71a690))       	 - 2025-10-17 20:02:27,941 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71b460) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,947 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1760756547946, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b708b50  session: 0x10b71b460  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,947 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1760756547946, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b708b50  session: 0x10b71b460  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,947 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71b460)   										 - 2025-10-17 20:02:27,947 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71b460)   										 - 2025-10-17 20:02:27,947 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,947 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71b460))       	 - 2025-10-17 20:02:27,947 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71af10) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,950 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Product 1, unit_price: 10  row: 0x10b7718d0  session: 0x10b71af10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,950 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71af10)   										 - 2025-10-17 20:02:27,950 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71af10)   										 - 2025-10-17 20:02:27,951 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,951 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71af10))       	 - 2025-10-17 20:02:27,951 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719bf0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,953 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Product 2, unit_price: 20  row: 0x10b7711d0  session: 0x10b719bf0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,953 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719bf0)   										 - 2025-10-17 20:02:27,953 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719bf0)   										 - 2025-10-17 20:02:27,953 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,953 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719bf0))       	 - 2025-10-17 20:02:27,953 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719260) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,955 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Order with 2 items, customer_id: 12, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b709fd0  session: 0x10b719260  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,956 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17 20:02:27.956262, date_shipped: None, amount_total: None  row: 0x10b709fd0  session: 0x10b719260  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,956 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17 20:02:27.956262, date_shipped: None, amount_total: 0  row: 0x10b709fd0  session: 0x10b719260  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,956 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719260)   										 - 2025-10-17 20:02:27,956 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719260)   										 - 2025-10-17 20:02:27,957 - logic_logger - INFO
..Order[12] {AfterFlush Event} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17 20:02:27.956262, date_shipped: None, amount_total: 0  row: 0x10b709fd0  session: 0x10b719260  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,957 - logic_logger - INFO
..Order[12] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17 20:02:27.956262, date_shipped: None, amount_total: 0  row: 0x10b709fd0  session: 0x10b719260  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,957 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,957 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,957 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,957 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,957 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,957 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719260))       	 - 2025-10-17 20:02:27,957 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b7188d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,959 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 12, product_id: 13, quantity: 5, amount: None, unit_price: None  row: 0x10b893650  session: 0x10b7188d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,959 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 12, product_id: 13, quantity: 5, amount: None, unit_price: 10.0000000000  row: 0x10b893650  session: 0x10b7188d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,960 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 12, product_id: 13, quantity: 5, amount: 50.0000000000, unit_price: 10.0000000000  row: 0x10b893650  session: 0x10b7188d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,960 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 12, product_id: 13, quantity: 5, amount: 50.0000000000, unit_price: 10.0000000000  row: 0x10b893650  session: 0x10b7188d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,960 - logic_logger - INFO
....Order[12] {Update - Adjusting order: amount_total} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b7685d0  session: 0x10b7188d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,960 - logic_logger - INFO
......Customer[12] {Update - Adjusting customer: balance} id: 12, name: Test Customer 1760756547946, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b86d0  session: 0x10b7188d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,960 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b7188d0)   										 - 2025-10-17 20:02:27,961 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b7188d0)   										 - 2025-10-17 20:02:27,961 - logic_logger - INFO
....Order[12] {AfterFlush Event} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b7685d0  session: 0x10b7188d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,961 - logic_logger - INFO
....Order[12] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10b7685d0  session: 0x10b7188d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,961 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,961 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,962 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b7188d0))       	 - 2025-10-17 20:02:27,962 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b7199d0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,964 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 12, product_id: 14, quantity: 3, amount: None, unit_price: None  row: 0x10b893ed0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,964 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 12, product_id: 14, quantity: 3, amount: None, unit_price: 20.0000000000  row: 0x10b893ed0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,965 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 12, product_id: 14, quantity: 3, amount: 60.0000000000, unit_price: 20.0000000000  row: 0x10b893ed0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,965 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 12, product_id: 14, quantity: 3, amount: 60.0000000000, unit_price: 20.0000000000  row: 0x10b893ed0  session: 0x10b7199d0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,965 - logic_logger - INFO
....Order[12] {Update - Adjusting order: amount_total} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 110.0000000000  row: 0x10b892d50  session: 0x10b7199d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,965 - logic_logger - INFO
......Customer[12] {Update - Adjusting customer: balance} id: 12, name: Test Customer 1760756547946, balance:  [50.0000000000-->] 110.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b8fd0  session: 0x10b7199d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,965 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b7199d0)   										 - 2025-10-17 20:02:27,965 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b7199d0)   										 - 2025-10-17 20:02:27,966 - logic_logger - INFO
....Order[12] {AfterFlush Event} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 110.0000000000  row: 0x10b892d50  session: 0x10b7199d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,966 - logic_logger - INFO
....Order[12] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 12, notes: Order with 2 items, customer_id: 12, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 110.0000000000  row: 0x10b892d50  session: 0x10b7199d0  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,966 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,966 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,966 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,967 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,967 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,967 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,967 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,967 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,967 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,967 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b7199d0))       	 - 2025-10-17 20:02:27,967 - logic_logger - INFO
