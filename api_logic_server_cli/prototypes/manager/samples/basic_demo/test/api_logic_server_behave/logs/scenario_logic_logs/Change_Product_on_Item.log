
Change Product on Item
 - 2025-10-17 20:02:27,907 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719e10) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,908 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Expensive Product, unit_price: 15  row: 0x10b88f930  session: 0x10b719e10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,908 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719e10)   										 - 2025-10-17 20:02:27,908 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719e10)   										 - 2025-10-17 20:02:27,908 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,908 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719e10))       	 - 2025-10-17 20:02:27,909 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719260) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,911 - logic_logger - INFO
..Item[9] {Update - client} id: 9, order_id: 10, product_id:  [10-->] 11, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10b76a950  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,911 - logic_logger - INFO
..Item[9] {copy_rules for role: product - unit_price} id: 9, order_id: 10, product_id:  [10-->] 11, quantity: 10, amount: 50.0000000000, unit_price:  [5.0000000000-->] 15.0000000000  row: 0x10b76a950  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,912 - logic_logger - INFO
..Item[9] {Formula amount} id: 9, order_id: 10, product_id:  [10-->] 11, quantity: 10, amount:  [50.0000000000-->] 150.0000000000, unit_price:  [5.0000000000-->] 15.0000000000  row: 0x10b76a950  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,912 - logic_logger - INFO
....Order[10] {Update - Adjusting order: amount_total} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 150.0000000000  row: 0x10b8b82d0  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,912 - logic_logger - INFO
......Customer[9] {Update - Adjusting customer: balance} id: 9, name: Test Customer 1760756547889, balance:  [50.0000000000-->] 150.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b8b95d0  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,912 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719260)   										 - 2025-10-17 20:02:27,913 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719260)   										 - 2025-10-17 20:02:27,913 - logic_logger - INFO
....Order[10] {AfterFlush Event} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 150.0000000000  row: 0x10b8b82d0  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,913 - logic_logger - INFO
....Order[10] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 10, notes: Test order, customer_id: 9, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [50.0000000000-->] 150.0000000000  row: 0x10b8b82d0  session: 0x10b719260  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,913 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,913 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,914 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,914 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719260))       	 - 2025-10-17 20:02:27,914 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b718d10) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,920 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 1 1760756547919, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b709bd0  session: 0x10b718d10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,920 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 1 1760756547919, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b709bd0  session: 0x10b718d10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,920 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b718d10)   										 - 2025-10-17 20:02:27,920 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b718d10)   										 - 2025-10-17 20:02:27,921 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,921 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b718d10))       	 - 2025-10-17 20:02:27,921 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b719bf0) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,923 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Customer 2 1760756547919, balance: None, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b76a350  session: 0x10b719bf0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,923 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Customer 2 1760756547919, balance: 0, credit_limit: 1000, email: None, email_opt_out: False  row: 0x10b76a350  session: 0x10b719bf0  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,923 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b719bf0)   										 - 2025-10-17 20:02:27,923 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b719bf0)   										 - 2025-10-17 20:02:27,923 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,924 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b719bf0))       	 - 2025-10-17 20:02:27,924 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71af10) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,926 - logic_logger - INFO
..Product[None] {Insert - client} id: None, name: Transfer Product, unit_price: 1  row: 0x10b88f9a0  session: 0x10b71af10  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,926 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71af10)   										 - 2025-10-17 20:02:27,926 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71af10)   										 - 2025-10-17 20:02:27,926 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,926 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71af10))       	 - 2025-10-17 20:02:27,926 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71b020) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,929 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Order to transfer, customer_id: 10, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10b769f50  session: 0x10b71b020  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,929 - logic_logger - INFO
..Order[None] {early_row_event_all_classes - handle_all did stamping} id: None, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17 20:02:27.929269, date_shipped: None, amount_total: None  row: 0x10b769f50  session: 0x10b71b020  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,929 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17 20:02:27.929269, date_shipped: None, amount_total: 0  row: 0x10b769f50  session: 0x10b71b020  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,929 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71b020)   										 - 2025-10-17 20:02:27,929 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71b020)   										 - 2025-10-17 20:02:27,930 - logic_logger - INFO
..Order[11] {AfterFlush Event} id: 11, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17 20:02:27.929269, date_shipped: None, amount_total: 0  row: 0x10b769f50  session: 0x10b71b020  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,930 - logic_logger - INFO
..Order[11] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 11, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17 20:02:27.929269, date_shipped: None, amount_total: 0  row: 0x10b769f50  session: 0x10b71b020  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,930 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,930 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,930 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,930 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,930 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,930 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71b020))       	 - 2025-10-17 20:02:27,930 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10b71ae00) (sqlalchemy before_flush)			 - 2025-10-17 20:02:27,932 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 11, product_id: 12, quantity: 100, amount: None, unit_price: None  row: 0x10b8938d0  session: 0x10b71ae00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,932 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 11, product_id: 12, quantity: 100, amount: None, unit_price: 1.0000000000  row: 0x10b8938d0  session: 0x10b71ae00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,933 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 11, product_id: 12, quantity: 100, amount: 100.0000000000, unit_price: 1.0000000000  row: 0x10b8938d0  session: 0x10b71ae00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,933 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 11, product_id: 12, quantity: 100, amount: 100.0000000000, unit_price: 1.0000000000  row: 0x10b8938d0  session: 0x10b71ae00  ins_upd_dlt: ins, initial: ins - 2025-10-17 20:02:27,933 - logic_logger - INFO
....Order[11] {Update - Adjusting order: amount_total} id: 11, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 100.0000000000  row: 0x10b8b9250  session: 0x10b71ae00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,933 - logic_logger - INFO
......Customer[10] {Update - Adjusting customer: balance} id: 10, name: Test Customer 1 1760756547919, balance:  [0E-10-->] 100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: False  row: 0x10b892ed0  session: 0x10b71ae00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,934 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10b71ae00)   										 - 2025-10-17 20:02:27,934 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10b71ae00)   										 - 2025-10-17 20:02:27,934 - logic_logger - INFO
....Order[11] {AfterFlush Event} id: 11, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 100.0000000000  row: 0x10b8b9250  session: 0x10b71ae00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,935 - logic_logger - INFO
....Order[11] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 11, notes: Order to transfer, customer_id: 10, CreatedOn: 2025-10-17, date_shipped: None, amount_total:  [0E-10-->] 100.0000000000  row: 0x10b8b9250  session: 0x10b71ae00  ins_upd_dlt: upd, initial: upd - 2025-10-17 20:02:27,935 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
  Customer		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10a750ea0>)		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
  Item		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): Rule.formula(derive=Item.amount, as_expression=la [...]		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
  Order		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-17 20:02:27,935 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-17 20:02:27,935 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10b71ae00))       	 - 2025-10-17 20:02:27,935 - logic_logger - INFO
