
Logic Phase:		ROW LOGIC		(session=0x10d243020) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,085 - logic_logger - INFO
..Item[110] {Update - client} id: 110, order_id: 106, product_id: 6, quantity:  [10-->] 20, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10d3429d0  session: 0x10d243020  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,086 - logic_logger - INFO
..Item[110] {Formula amount} id: 110, order_id: 106, product_id: 6, quantity:  [10-->] 20, amount:  [50.0000000000-->] 100.0000000000, unit_price: 5.0000000000  row: 0x10d3429d0  session: 0x10d243020  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,086 - logic_logger - INFO
....Order[106] {Update - Adjusting order: amount_total} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total:  [50.0000000000-->] 100.0000000000  row: 0x10d340f50  session: 0x10d243020  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,086 - logic_logger - INFO
......Customer[43] {Update - Adjusting customer: balance} id: 43, name: Test Cust with Order 1760673252062, balance:  [50.0000000000-->] 100.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d3437d0  session: 0x10d243020  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,086 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243020)   										 - 2025-10-16 20:54:12,086 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243020)   										 - 2025-10-16 20:54:12,087 - logic_logger - INFO
....Order[106] {AfterFlush Event} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total:  [50.0000000000-->] 100.0000000000  row: 0x10d340f50  session: 0x10d243020  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,087 - logic_logger - INFO
....Order[106] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total:  [50.0000000000-->] 100.0000000000  row: 0x10d340f50  session: 0x10d243020  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,087 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
  Item		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.amount as Formula (1): as_expression=lambda row: row.quantity * row.unit [...]		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
    3. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,087 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-16 20:54:12,087 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243020))       	 - 2025-10-16 20:54:12,087 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243790) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,094 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Cust Product Change 1760673252093, balance: None, credit_limit: 1000, email: None, email_opt_out: None  row: 0x10d251cd0  session: 0x10d243790  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,094 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Cust Product Change 1760673252093, balance: 0, credit_limit: 1000, email: None, email_opt_out: None  row: 0x10d251cd0  session: 0x10d243790  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,094 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243790)   										 - 2025-10-16 20:54:12,094 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243790)   										 - 2025-10-16 20:54:12,095 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,095 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243790))       	 - 2025-10-16 20:54:12,095 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d241e10) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,100 - logic_logger - INFO
..Product[7] {Update - client} id: 7, name: Product $5.0, unit_price: 5  row: 0x10d365940  session: 0x10d241e10  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,100 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d241e10)   										 - 2025-10-16 20:54:12,100 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d241e10)   										 - 2025-10-16 20:54:12,101 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,101 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d241e10))       	 - 2025-10-16 20:54:12,101 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d242250) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,103 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10d32be50  session: 0x10d242250  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,103 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32be50  session: 0x10d242250  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,103 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d242250)   										 - 2025-10-16 20:54:12,103 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d242250)   										 - 2025-10-16 20:54:12,104 - logic_logger - INFO
..Order[107] {AfterFlush Event} id: 107, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32be50  session: 0x10d242250  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,104 - logic_logger - INFO
..Order[107] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 107, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32be50  session: 0x10d242250  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,104 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,104 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,104 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,104 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,104 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,104 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d242250))       	 - 2025-10-16 20:54:12,104 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243130) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,107 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 107, product_id: 7, quantity: 10, amount: None, unit_price: None  row: 0x10cb8b9d0  session: 0x10d243130  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,107 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 107, product_id: 7, quantity: 10, amount: None, unit_price: 5.0000000000  row: 0x10cb8b9d0  session: 0x10d243130  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,108 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 107, product_id: 7, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10cb8b9d0  session: 0x10d243130  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,108 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 107, product_id: 7, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10cb8b9d0  session: 0x10d243130  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,108 - logic_logger - INFO
....Order[107] {Update - Adjusting order: amount_total} id: 107, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d252850  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,108 - logic_logger - INFO
......Customer[44] {Update - Adjusting customer: balance} id: 44, name: Test Cust Product Change 1760673252093, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d2bb450  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,109 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243130)   										 - 2025-10-16 20:54:12,109 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243130)   										 - 2025-10-16 20:54:12,109 - logic_logger - INFO
....Order[107] {AfterFlush Event} id: 107, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d252850  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,109 - logic_logger - INFO
....Order[107] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 107, notes: Product Test Order, customer_id: 44, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d252850  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,109 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,109 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,109 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,109 - logic_logger - INFO
  Item		## - 2025-10-16 20:54:12,109 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-16 20:54:12,110 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.amount as Formula (1): as_expression=lambda row: row.quantity * row.unit [...]		## - 2025-10-16 20:54:12,110 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,110 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-16 20:54:12,110 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,110 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243130))       	 - 2025-10-16 20:54:12,110 - logic_logger - INFO
