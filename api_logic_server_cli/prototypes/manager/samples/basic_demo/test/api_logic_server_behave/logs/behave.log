Feature: About Sample # features/about.feature:6

  Scenario: Transaction Processing                           # features/about.feature:8
    Given Sample Database                                    # features/steps/about.py:8
    When Transactions are submitted                          # features/steps/about.py:12
    Then Enforce business policies with Logic (rules + code) # features/steps/about.py:16

Feature: Check Credit # features/check_credit.feature:1

  Scenario: Good Order Placed                          # features/check_credit.feature:3
    Given Customer with balance 0 and credit 1000      # features/steps/check_credit.py:13
    When Good Order Placed                             # features/steps/check_credit.py:97
    Then Balance is 50                                 # features/steps/check_credit.py:295
    Then Customer balance does not exceed credit limit # features/steps/check_credit.py:306

  Scenario: Bad Order Exceeds Credit                # features/check_credit.feature:9
    Given Customer with balance 900 and credit 1000 # features/steps/check_credit.py:13
    When Order Placed with quantity 200             # features/steps/check_credit.py:124
    Then Error raised containing "balance"          # features/steps/check_credit.py:317
    Then Error raised containing "credit limit"     # features/steps/check_credit.py:317

  Scenario: Alter Item Quantity to Exceed Credit  # features/check_credit.feature:15
    Given Customer with balance 0 and credit 1000 # features/steps/check_credit.py:13
    And Order with 1 item quantity 10             # features/steps/check_credit.py:35
    When Item quantity changed to 1500            # features/steps/check_credit.py:176
    Then Error raised containing "balance"        # features/steps/check_credit.py:317
    Then Error raised containing "credit limit"   # features/steps/check_credit.py:317

  Scenario: Change Product on Item                 # features/check_credit.feature:22
    Given Customer with balance 0 and credit 1000  # features/steps/check_credit.py:13
    And Order with 1 item quantity 10              # features/steps/check_credit.py:35
    When Item product changed to expensive product # features/steps/check_credit.py:205
    Then Balance recalculates with new price       # features/steps/check_credit.py:328
    Then Item unit_price updated from new product  # features/steps/check_credit.py:338

  Scenario: Change Customer on Order              # features/check_credit.feature:29
    Given Two customers with balance 0            # features/steps/check_credit.py:50
    And Order for first customer with balance 100 # features/steps/check_credit.py:62
    When Order moved to second customer           # features/steps/check_credit.py:241
    Then First customer balance is 0              # features/steps/check_credit.py:352
    Then Second customer balance is 100           # features/steps/check_credit.py:363

  Scenario: Delete Item Adjusts Balance           # features/check_credit.feature:36
    Given Customer with balance 0 and credit 1000 # features/steps/check_credit.py:13
    And Order with 2 items                        # features/steps/check_credit.py:75
    When One item is deleted                      # features/steps/check_credit.py:271
    Then Balance decreases correctly              # features/steps/check_credit.py:374

Feature: Order Lifecycle # features/order_lifecycle.feature:1

  Scenario: Set Order Shipped Excludes from Balance  # features/order_lifecycle.feature:3
    Given Customer with balance 0 and credit 1000    # features/steps/check_credit.py:13
    And Order with balance 100                       # features/steps/order_lifecycle.py:13
    When Order is shipped                            # features/steps/order_lifecycle.py:60
    Then Balance is 0                                # features/steps/check_credit.py:295
    Then Order excluded from balance aggregate       # features/steps/order_lifecycle.py:141

  Scenario: Reset Shipped Includes in Balance     # features/order_lifecycle.feature:10
    Given Customer with balance 0 and credit 1000 # features/steps/check_credit.py:13
    And Order with balance 100 marked shipped     # features/steps/order_lifecycle.py:28
    When Order unshipped                          # features/steps/order_lifecycle.py:89
    Then Balance is 100                           # features/steps/check_credit.py:295
    Then Order included in balance aggregate      # features/steps/order_lifecycle.py:152

  Scenario: Delete Order Adjusts Balance          # features/order_lifecycle.feature:17
    Given Customer with balance 0 and credit 1000 # features/steps/check_credit.py:13
    And Order with balance 150                    # features/steps/order_lifecycle.py:13
    When Order is deleted                         # features/steps/order_lifecycle.py:118
    Then Balance is 0                             # features/steps/check_credit.py:295
    Then Customer has no orders                   # features/steps/order_lifecycle.py:163

&nbsp;&nbsp;
/Users/val/dev/ApiLogicServer/ApiLogicServer-dev/build_and_test/ApiLogicServer/basic_demo/test/api_logic_server_behave/behave_run.py completed at October 17, 2025 20:02:28