
Logic Phase:		ROW LOGIC		(session=0x10d241040) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,047 - logic_logger - INFO
..Product[8] {Update - client} id: 8, name: Product $10.0, unit_price: 10  row: 0x10d366120  session: 0x10d241040  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,047 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d241040)   										 - 2025-10-16 20:54:12,047 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d241040)   										 - 2025-10-16 20:54:12,047 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,047 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d241040))       	 - 2025-10-16 20:54:12,047 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243570) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,051 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test Order, customer_id: 42, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10d32bdd0  session: 0x10d243570  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,051 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test Order, customer_id: 42, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32bdd0  session: 0x10d243570  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,051 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243570)   										 - 2025-10-16 20:54:12,052 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243570)   										 - 2025-10-16 20:54:12,052 - logic_logger - INFO
..Order[105] {AfterFlush Event} id: 105, notes: Test Order, customer_id: 42, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32bdd0  session: 0x10d243570  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,052 - logic_logger - INFO
..Order[105] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 105, notes: Test Order, customer_id: 42, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32bdd0  session: 0x10d243570  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,052 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,052 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,052 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,053 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,053 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,053 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243570))       	 - 2025-10-16 20:54:12,053 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243680) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,056 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 105, product_id: 8, quantity: 20, amount: None, unit_price: None  row: 0x10cb8b9d0  session: 0x10d243680  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,057 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 105, product_id: 8, quantity: 20, amount: None, unit_price: 10.0000000000  row: 0x10cb8b9d0  session: 0x10d243680  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,058 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 105, product_id: 8, quantity: 20, amount: 200.0000000000, unit_price: 10.0000000000  row: 0x10cb8b9d0  session: 0x10d243680  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,058 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 105, product_id: 8, quantity: 20, amount: 200.0000000000, unit_price: 10.0000000000  row: 0x10cb8b9d0  session: 0x10d243680  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,058 - logic_logger - INFO
....Order[105] {Update - Adjusting order: amount_total} id: 105, notes: Test Order, customer_id: 42, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 200.0000000000  row: 0x10d2539d0  session: 0x10d243680  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,058 - logic_logger - INFO
......Customer[42] {Update - Adjusting customer: balance} id: 42, name: Test Cust 950 1760673252023, balance:  [950.0000000000-->] 1150.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d342e50  session: 0x10d243680  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,058 - logic_logger - INFO
......Customer[42] {Constraint Failure: Customer balance exceeds credit limit} id: 42, name: Test Cust 950 1760673252023, balance:  [950.0000000000-->] 1150.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d342e50  session: 0x10d243680  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,059 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
    2. Constraint Function: None 		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
  Item		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
    4. Derive <class 'database.models.Item'>.amount as Formula (1): as_expression=lambda row: row.quantity * row.unit [...]		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,059 - logic_logger - INFO
    5. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-16 20:54:12,059 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243ac0) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,064 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Cust with Order 1760673252062, balance: None, credit_limit: 1000, email: None, email_opt_out: None  row: 0x10d251c50  session: 0x10d243ac0  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,064 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Cust with Order 1760673252062, balance: 0, credit_limit: 1000, email: None, email_opt_out: None  row: 0x10d251c50  session: 0x10d243ac0  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,064 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243ac0)   										 - 2025-10-16 20:54:12,064 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243ac0)   										 - 2025-10-16 20:54:12,064 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,064 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243ac0))       	 - 2025-10-16 20:54:12,064 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d242140) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,071 - logic_logger - INFO
..Product[6] {Update - client} id: 6, name: Test Product, unit_price: 5  row: 0x10d366ac0  session: 0x10d242140  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,072 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d242140)   										 - 2025-10-16 20:54:12,072 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d242140)   										 - 2025-10-16 20:54:12,072 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,072 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d242140))       	 - 2025-10-16 20:54:12,072 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d241480) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,074 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10d253ad0  session: 0x10d241480  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,074 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d253ad0  session: 0x10d241480  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,074 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d241480)   										 - 2025-10-16 20:54:12,075 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d241480)   										 - 2025-10-16 20:54:12,075 - logic_logger - INFO
..Order[106] {AfterFlush Event} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d253ad0  session: 0x10d241480  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,075 - logic_logger - INFO
..Order[106] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d253ad0  session: 0x10d241480  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,075 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,075 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,075 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,075 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,075 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,075 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d241480))       	 - 2025-10-16 20:54:12,075 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243350) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,078 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 106, product_id: 6, quantity: 10, amount: None, unit_price: None  row: 0x10d2bb350  session: 0x10d243350  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,078 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 106, product_id: 6, quantity: 10, amount: None, unit_price: 5.0000000000  row: 0x10d2bb350  session: 0x10d243350  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,079 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 106, product_id: 6, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10d2bb350  session: 0x10d243350  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,079 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 106, product_id: 6, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10d2bb350  session: 0x10d243350  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,079 - logic_logger - INFO
....Order[106] {Update - Adjusting order: amount_total} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d341e50  session: 0x10d243350  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,079 - logic_logger - INFO
......Customer[43] {Update - Adjusting customer: balance} id: 43, name: Test Cust with Order 1760673252062, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d343750  session: 0x10d243350  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,079 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243350)   										 - 2025-10-16 20:54:12,079 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243350)   										 - 2025-10-16 20:54:12,080 - logic_logger - INFO
....Order[106] {AfterFlush Event} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d341e50  session: 0x10d243350  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,080 - logic_logger - INFO
....Order[106] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 106, notes: Test Order, customer_id: 43, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d341e50  session: 0x10d243350  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,080 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
  Item		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.amount as Formula (1): as_expression=lambda row: row.quantity * row.unit [...]		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-16 20:54:12,080 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,080 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243350))       	 - 2025-10-16 20:54:12,080 - logic_logger - INFO
