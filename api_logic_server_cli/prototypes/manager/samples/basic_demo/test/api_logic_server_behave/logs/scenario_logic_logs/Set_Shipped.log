
Logic Phase:		ROW LOGIC		(session=0x10d243460) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,179 - logic_logger - INFO
..Order[109] {Update - client} id: 109, notes: Unshipped Order, customer_id: 47, CreatedOn: None, date_shipped:  [None-->] 2025-10-16 00:00:00, amount_total: 50.0000000000  row: 0x10d253450  session: 0x10d243460  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,179 - logic_logger - INFO
....Customer[47] {Update - Adjusting customer: balance} id: 47, name: Test Cust Unshipped 1760673252159, balance:  [50.0000000000-->] 0E-10, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d3411d0  session: 0x10d243460  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,179 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243460)   										 - 2025-10-16 20:54:12,179 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243460)   										 - 2025-10-16 20:54:12,180 - logic_logger - INFO
..Order[109] {AfterFlush Event} id: 109, notes: Unshipped Order, customer_id: 47, CreatedOn: None, date_shipped:  [None-->] 2025-10-16 00:00:00, amount_total: 50.0000000000  row: 0x10d253450  session: 0x10d243460  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,180 - logic_logger - INFO
..Order[109] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 109, notes: Unshipped Order, customer_id: 47, CreatedOn: None, date_shipped:  [None-->] 2025-10-16 00:00:00, amount_total: 50.0000000000  row: 0x10d253450  session: 0x10d243460  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,180 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,180 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,180 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,180 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,180 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,180 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243460))       	 - 2025-10-16 20:54:12,180 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243240) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,185 - logic_logger - INFO
..Customer[None] {Insert - client} id: None, name: Test Cust Shipped 1760673252183, balance: None, credit_limit: 1000, email: None, email_opt_out: None  row: 0x10cb89ed0  session: 0x10d243240  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,185 - logic_logger - INFO
..Customer[None] {server aggregate_defaults: balance } id: None, name: Test Cust Shipped 1760673252183, balance: 0, credit_limit: 1000, email: None, email_opt_out: None  row: 0x10cb89ed0  session: 0x10d243240  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,185 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243240)   										 - 2025-10-16 20:54:12,185 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243240)   										 - 2025-10-16 20:54:12,185 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,185 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243240))       	 - 2025-10-16 20:54:12,185 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243ac0) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,190 - logic_logger - INFO
..Product[6] {Update - client} id: 6, name: Test Product, unit_price: 5  row: 0x10d365da0  session: 0x10d243ac0  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,190 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243ac0)   										 - 2025-10-16 20:54:12,190 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243ac0)   										 - 2025-10-16 20:54:12,190 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,190 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243ac0))       	 - 2025-10-16 20:54:12,190 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d241370) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,192 - logic_logger - INFO
..Order[None] {Insert - client} id: None, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total: None  row: 0x10d32bcd0  session: 0x10d241370  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,193 - logic_logger - INFO
..Order[None] {server aggregate_defaults: amount_total } id: None, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32bcd0  session: 0x10d241370  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,193 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d241370)   										 - 2025-10-16 20:54:12,193 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d241370)   										 - 2025-10-16 20:54:12,193 - logic_logger - INFO
..Order[110] {AfterFlush Event} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32bcd0  session: 0x10d241370  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,193 - logic_logger - INFO
..Order[110] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total: 0  row: 0x10d32bcd0  session: 0x10d241370  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,193 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,193 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,193 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,194 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,194 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,194 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d241370))       	 - 2025-10-16 20:54:12,194 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d2438a0) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,196 - logic_logger - INFO
..Item[None] {Insert - client} id: None, order_id: 110, product_id: 6, quantity: 10, amount: None, unit_price: None  row: 0x10d2b88d0  session: 0x10d2438a0  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,196 - logic_logger - INFO
..Item[None] {copy_rules for role: product - unit_price} id: None, order_id: 110, product_id: 6, quantity: 10, amount: None, unit_price: 5.0000000000  row: 0x10d2b88d0  session: 0x10d2438a0  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,197 - logic_logger - INFO
..Item[None] {Formula amount} id: None, order_id: 110, product_id: 6, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10d2b88d0  session: 0x10d2438a0  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,197 - logic_logger - INFO
..Item[None] {TODO DB adjust_from_inserted/adopted_child adjusts Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)} id: None, order_id: 110, product_id: 6, quantity: 10, amount: 50.0000000000, unit_price: 5.0000000000  row: 0x10d2b88d0  session: 0x10d2438a0  ins_upd_dlt: ins, initial: ins - 2025-10-16 20:54:12,197 - logic_logger - INFO
....Order[110] {Update - Adjusting order: amount_total} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d342a50  session: 0x10d2438a0  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,197 - logic_logger - INFO
......Customer[48] {Update - Adjusting customer: balance} id: 48, name: Test Cust Shipped 1760673252183, balance:  [0E-10-->] 50.0000000000, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d341750  session: 0x10d2438a0  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,197 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d2438a0)   										 - 2025-10-16 20:54:12,198 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d2438a0)   										 - 2025-10-16 20:54:12,198 - logic_logger - INFO
....Order[110] {AfterFlush Event} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d342a50  session: 0x10d2438a0  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,198 - logic_logger - INFO
....Order[110] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped: None, amount_total:  [0E-10-->] 50.0000000000  row: 0x10d342a50  session: 0x10d2438a0  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,198 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
  Item		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
    2. Derive <class 'database.models.Item'>.unit_price as Copy(product.unit_price)		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
    3. Derive <class 'database.models.Item'>.amount as Formula (1): as_expression=lambda row: row.quantity * row.unit [...]		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
    4. Derive <class 'database.models.Order'>.amount_total as Sum(Item.amount Where  - None)		## - 2025-10-16 20:54:12,198 - logic_logger - INFO
    5. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,198 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d2438a0))       	 - 2025-10-16 20:54:12,198 - logic_logger - INFO

Logic Phase:		ROW LOGIC		(session=0x10d243130) (sqlalchemy before_flush)			 - 2025-10-16 20:54:12,201 - logic_logger - INFO
..Order[110] {Update - client} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped:  [None-->] 2025-10-16 00:00:00, amount_total: 50.0000000000  row: 0x10d343550  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,201 - logic_logger - INFO
....Customer[48] {Update - Adjusting customer: balance} id: 48, name: Test Cust Shipped 1760673252183, balance:  [50.0000000000-->] 0E-10, credit_limit: 1000.0000000000, email: None, email_opt_out: None  row: 0x10d3401d0  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,202 - logic_logger - INFO
Logic Phase:		COMMIT LOGIC		(session=0x10d243130)   										 - 2025-10-16 20:54:12,202 - logic_logger - INFO
Logic Phase:		AFTER_FLUSH LOGIC	(session=0x10d243130)   										 - 2025-10-16 20:54:12,202 - logic_logger - INFO
..Order[110] {AfterFlush Event} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped:  [None-->] 2025-10-16 00:00:00, amount_total: 50.0000000000  row: 0x10d343550  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,202 - logic_logger - INFO
..Order[110] {Sending Order to Kafka topic 'order_shipping' [Note: **Kafka not enabled** ]} id: 110, notes: Shipped Order, customer_id: 48, CreatedOn: None, date_shipped:  [None-->] 2025-10-16 00:00:00, amount_total: 50.0000000000  row: 0x10d343550  session: 0x10d243130  ins_upd_dlt: upd, initial: upd - 2025-10-16 20:54:12,202 - logic_logger - INFO

These Rules Fired (see Logic Phases, above, for actual order):		## - 2025-10-16 20:54:12,202 - logic_logger - INFO
  Customer		## - 2025-10-16 20:54:12,202 - logic_logger - INFO
    1. Derive <class 'database.models.Customer'>.balance as Sum(Order.amount_total Where where=lambda row: row.date_shipped is None) - <function declare_logic.<locals>.<lambda> at 0x10b3a5580>)		## - 2025-10-16 20:54:12,202 - logic_logger - INFO
  Order		## - 2025-10-16 20:54:12,202 - logic_logger - INFO
    2. RowEvent Order.send_row_to_kafka() 		## - 2025-10-16 20:54:12,202 - logic_logger - INFO

Logic Phase:		COMPLETE(session=0x10d243130))       	 - 2025-10-16 20:54:12,202 - logic_logger - INFO
