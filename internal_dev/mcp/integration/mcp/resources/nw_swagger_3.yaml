openapi: 3.0.1
info:
  title: API Logic Server
  description: SAFRSAPI
  termsOfService: ""
  version: "0.0"
servers:
- url: //localhost:5656/api
security:
- Bearer: []
tags:
- name: Category
- name: Customer
- name: CustomerDemographic
- name: Department
- name: Employee
- name: EmployeeAudit
- name: EmployeeTerritory
- name: Location
- name: Order
- name: OrderDetail
- name: Product
- name: Region
- name: SampleDBVersion
- name: Shipper
- name: Supplier
- name: Territory
- name: Union
- name: authentication-Api
- name: authentication-Role
- name: authentication-User
- name: authentication-UserRole
- name: ServicesEndPoint
  description: Stateless class example
- name: CategoriesEndPoint
  description: Stateless class example
paths:
  /CategoriesEndPoint/:
    get:
      tags:
      - CategoriesEndPoint
      summary: Retrieve a collection of CategoriesEndPoint objects
      description: JA GET
      operationId: RetrieveacollectionofCategoriesEndPointobjects_0
      parameters:
      - name: include
        in: query
        description: CategoriesEndPoint relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[CategoriesEndPoint]"
        in: query
        description: CategoriesEndPoint fields to include (csv)
        schema:
          type: string
          format: string
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom CategoriesEndPoint filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CategoriesEndPoint_coll1'
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - CategoriesEndPoint
      summary: Create CategoriesEndPoint
      operationId: CreateCategoriesEndPoint_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: CategoriesEndPoint attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CategoriesEndPoint_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CategoriesEndPoint_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /CategoriesEndPoint/get_cats:
    post:
      tags:
      - CategoriesEndPoint
      summary: Invoke CategoriesEndPoint.get_cats
      description: Invoke CategoriesEndPoint.get_cats
      operationId: InvokeCategoriesEndPointgetcats_0
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/post_CategoriesEndPoint_get_cats'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ServicesEndPoint_coll1'
      x-codegen-request-body-name: post_CategoriesEndPoint_get_cats
  /CategoriesEndPoint/{CategoriesEndPointId}/:
    get:
      tags:
      - CategoriesEndPoint
      summary: Retrieve a CategoriesEndPoint object
      description: JA GET
      operationId: RetrieveaCategoriesEndPointobject_0
      parameters:
      - name: include
        in: query
        description: CategoriesEndPoint relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[CategoriesEndPoint]"
        in: query
        description: CategoriesEndPoint fields to include (csv)
        schema:
          type: string
          format: string
      - name: CategoriesEndPointId
        in: path
        required: true
        schema:
          type: string
          default: "null"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CategoriesEndPoint_inst1'
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - CategoriesEndPoint
      summary: Called for a HTTP DELETE
      operationId: CalledforaHTTPDELETE_1
      parameters:
      - name: CategoriesEndPointId
        in: path
        required: true
        schema:
          type: string
          default: "null"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - CategoriesEndPoint
      summary: "description: JA PATCH"
      description: JA PATCH
      operationId: descriptionJAPATCH_1
      parameters:
      - name: CategoriesEndPointId
        in: path
        required: true
        schema:
          type: string
          default: "null"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: CategoriesEndPoint attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CategoriesEndPoint_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CategoriesEndPoint_inst1'
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: PATCH body
  /Category/:
    get:
      tags:
      - Category
      summary: Retrieve a collection of Category objects
      description: Retrieve Category from Category
      operationId: RetrieveacollectionofCategoryobjects_0
      parameters:
      - name: include
        in: query
        description: Category relationships to include (csv)
        schema:
          type: string
          format: string
          default: ProductList
      - name: "fields[Category]"
        in: query
        description: Category fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CategoryName,Description,Client_id,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CategoryName]"
        in: query
        description: CategoryName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Description]"
        in: query
        description: Description attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Client_id]"
        in: query
        description: Client_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Category filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Category_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Category
      summary: Create Category
      operationId: CreateCategory_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Category attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Category_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Category_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Category/{CategoryId}/:
    get:
      tags:
      - Category
      summary: Retrieve Category instance
      description: Retrieve Category from Category
      operationId: RetrieveCategoryinstance_0
      parameters:
      - name: include
        in: query
        description: Category relationships to include (csv)
        schema:
          type: string
          format: string
          default: ProductList
      - name: "fields[Category]"
        in: query
        description: Category fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CategoryName,Description,Client_id,S_CheckSum"
      - name: CategoryId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Category_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Category
      summary: Delete Category from Category
      operationId: DeleteCategoryfromCategory_0
      parameters:
      - name: CategoryId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Category_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Category
      summary: Update Category
      description: Update Category attributes
      operationId: UpdateCategory_0
      parameters:
      - name: CategoryId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Category attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Category_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Category_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Category/{CategoryId}/ProductList:
    get:
      tags:
      - Category
      summary: Retrieve Product from Category.ProductList
      description: Retrieve Product items from the Category ProductList "to-many"
        relationship
      operationId: RetrieveProductfromCategoryProductList_0
      parameters:
      - name: include
        in: query
        description: Product relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Category,OrderDetailList"
      - name: "fields[Product]"
        in: query
        description: Product fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,ProductName,SupplierId,CategoryId,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued,UnitsShipped"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProductName]"
        in: query
        description: ProductName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[SupplierId]"
        in: query
        description: SupplierId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CategoryId]"
        in: query
        description: CategoryId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[QuantityPerUnit]"
        in: query
        description: QuantityPerUnit attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitPrice]"
        in: query
        description: UnitPrice attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitsInStock]"
        in: query
        description: UnitsInStock attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitsOnOrder]"
        in: query
        description: UnitsOnOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReorderLevel]"
        in: query
        description: ReorderLevel attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Discontinued]"
        in: query
        description: Discontinued attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitsShipped]"
        in: query
        description: UnitsShipped attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Product filter
        schema:
          type: string
          format: string
      - name: CategoryId
        in: path
        description: Category item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Category.ProductList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Category
      summary: Add Product items to Category.ProductList
      description: Add Product items to the Category ProductList "to-many" relationship
      operationId: AddProductitemstoCategoryProductList_0
      parameters:
      - name: CategoryId
        in: path
        description: Category item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Category.ProductList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Category.ProductList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Category.ProductList body
    delete:
      tags:
      - Category
      summary: Delete Product from Category.ProductList
      description: Delete Product items from the Category ProductList "to-many" relationship
      operationId: DeleteProductfromCategoryProductList_0
      parameters:
      - name: CategoryId
        in: path
        description: Category item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Category.ProductList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Category.ProductList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Category.ProductList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Category.ProductList body
    patch:
      tags:
      - Category
      summary: Update Category.ProductList
      description: Update the Category ProductList "to-many" relationship
      operationId: UpdateCategoryProductList_0
      parameters:
      - name: CategoryId
        in: path
        description: Category item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Category.ProductList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Category.ProductList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Category.ProductList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Category.ProductList body
  /Customer/:
    get:
      tags:
      - Customer
      summary: Retrieve a collection of Customer objects
      description: Retrieve Customer from Customer
      operationId: RetrieveacollectionofCustomerobjects_0
      parameters:
      - name: include
        in: query
        description: Customer relationships to include (csv)
        schema:
          type: string
          format: string
          default: OrderList
      - name: "fields[Customer]"
        in: query
        description: Customer fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax,Balance,CreditLimit,OrderCount,UnpaidOrderCount,Client_id,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CompanyName]"
        in: query
        description: CompanyName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ContactName]"
        in: query
        description: ContactName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ContactTitle]"
        in: query
        description: ContactTitle attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Phone]"
        in: query
        description: Phone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Fax]"
        in: query
        description: Fax attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Balance]"
        in: query
        description: Balance attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CreditLimit]"
        in: query
        description: CreditLimit attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderCount]"
        in: query
        description: OrderCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnpaidOrderCount]"
        in: query
        description: UnpaidOrderCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Client_id]"
        in: query
        description: Client_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Customer filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Customer_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Customer
      summary: Create Customer
      operationId: CreateCustomer_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Customer attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Customer_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Customer/{CustomerId}/:
    get:
      tags:
      - Customer
      summary: Retrieve Customer instance
      description: Retrieve Customer from Customer
      operationId: RetrieveCustomerinstance_0
      parameters:
      - name: include
        in: query
        description: Customer relationships to include (csv)
        schema:
          type: string
          format: string
          default: OrderList
      - name: "fields[Customer]"
        in: query
        description: Customer fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax,Balance,CreditLimit,OrderCount,UnpaidOrderCount,Client_id,S_CheckSum"
      - name: CustomerId
        in: path
        required: true
        schema:
          type: string
          default: ALFKI
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Customer_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Customer
      summary: Delete Customer from Customer
      operationId: DeleteCustomerfromCustomer_0
      parameters:
      - name: CustomerId
        in: path
        required: true
        schema:
          type: string
          default: ALFKI
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Customer_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Customer
      summary: Update Customer
      description: Update Customer attributes
      operationId: UpdateCustomer_0
      parameters:
      - name: CustomerId
        in: path
        required: true
        schema:
          type: string
          default: ALFKI
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Customer attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Customer_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Customer/{CustomerId}/OrderList:
    get:
      tags:
      - Customer
      summary: Retrieve Order from Customer.OrderList
      description: Retrieve Order items from the Customer OrderList "to-many" relationship
      operationId: RetrieveOrderfromCustomerOrderList_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CustomerId]"
        in: query
        description: CustomerId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDate]"
        in: query
        description: OrderDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RequiredDate]"
        in: query
        description: RequiredDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipVia]"
        in: query
        description: ShipVia attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Freight]"
        in: query
        description: Freight attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipName]"
        in: query
        description: ShipName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipAddress]"
        in: query
        description: ShipAddress attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCity]"
        in: query
        description: ShipCity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipRegion]"
        in: query
        description: ShipRegion attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipZip]"
        in: query
        description: ShipZip attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCountry]"
        in: query
        description: ShipCountry attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[AmountTotal]"
        in: query
        description: AmountTotal attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Ready]"
        in: query
        description: Ready attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDetailCount]"
        in: query
        description: OrderDetailCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CloneFromOrder]"
        in: query
        description: CloneFromOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Order filter
        schema:
          type: string
          format: string
      - name: CustomerId
        in: path
        description: Customer item
        required: true
        schema:
          type: string
          default: ALFKI
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer.OrderList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Customer
      summary: Add Order items to Customer.OrderList
      description: Add Order items to the Customer OrderList "to-many" relationship
      operationId: AddOrderitemstoCustomerOrderList_0
      parameters:
      - name: CustomerId
        in: path
        description: Customer item
        required: true
        schema:
          type: string
          default: ALFKI
      requestBody:
        description: Customer.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer.OrderList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Customer.OrderList body
    delete:
      tags:
      - Customer
      summary: Delete Order from Customer.OrderList
      description: Delete Order items from the Customer OrderList "to-many" relationship
      operationId: DeleteOrderfromCustomerOrderList_0
      parameters:
      - name: CustomerId
        in: path
        description: Customer item
        required: true
        schema:
          type: string
          default: ALFKI
      requestBody:
        description: Customer.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer.OrderList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Customer.OrderList body
    patch:
      tags:
      - Customer
      summary: Update Customer.OrderList
      description: Update the Customer OrderList "to-many" relationship
      operationId: UpdateCustomerOrderList_0
      parameters:
      - name: CustomerId
        in: path
        description: Customer item
        required: true
        schema:
          type: string
          default: ALFKI
      requestBody:
        description: Customer.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer.OrderList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Customer.OrderList body
  /CustomerDemographic/:
    get:
      tags:
      - CustomerDemographic
      summary: Retrieve a collection of CustomerDemographic objects
      description: Retrieve CustomerDemographic from CustomerDemographic
      operationId: RetrieveacollectionofCustomerDemographicobjects_0
      parameters:
      - name: include
        in: query
        description: CustomerDemographic relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[CustomerDemographic]"
        in: query
        description: CustomerDemographic fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerDesc,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CustomerDesc]"
        in: query
        description: CustomerDesc attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom CustomerDemographic filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CustomerDemographic_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - CustomerDemographic
      summary: Create CustomerDemographic
      operationId: CreateCustomerDemographic_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: CustomerDemographic attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CustomerDemographic_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CustomerDemographic_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /CustomerDemographic/{CustomerDemographicId}/:
    get:
      tags:
      - CustomerDemographic
      summary: Retrieve CustomerDemographic instance
      description: Retrieve CustomerDemographic from CustomerDemographic
      operationId: RetrieveCustomerDemographicinstance_0
      parameters:
      - name: include
        in: query
        description: CustomerDemographic relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[CustomerDemographic]"
        in: query
        description: CustomerDemographic fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerDesc,S_CheckSum"
      - name: CustomerDemographicId
        in: path
        required: true
        schema:
          type: string
          default: jsonapi_id_string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CustomerDemographic_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - CustomerDemographic
      summary: Delete CustomerDemographic from CustomerDemographic
      operationId: DeleteCustomerDemographicfromCustomerDemographic_0
      parameters:
      - name: CustomerDemographicId
        in: path
        required: true
        schema:
          type: string
          default: jsonapi_id_string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CustomerDemographic_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - CustomerDemographic
      summary: Update CustomerDemographic
      description: Update CustomerDemographic attributes
      operationId: UpdateCustomerDemographic_0
      parameters:
      - name: CustomerDemographicId
        in: path
        required: true
        schema:
          type: string
          default: jsonapi_id_string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: CustomerDemographic attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CustomerDemographic_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/CustomerDemographic_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Department/:
    get:
      tags:
      - Department
      summary: Retrieve a collection of Department objects
      description: Retrieve Department from Department
      operationId: RetrieveacollectionofDepartmentobjects_0
      parameters:
      - name: include
        in: query
        description: Department relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Department,DepartmentList,EmployeeList,WorksForEmployeeList"
      - name: "fields[Department]"
        in: query
        description: Department fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,DepartmentId,DepartmentName,SecurityLevel,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[DepartmentId]"
        in: query
        description: DepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[DepartmentName]"
        in: query
        description: DepartmentName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[SecurityLevel]"
        in: query
        description: SecurityLevel attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Department filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Department_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Department
      summary: Create Department
      operationId: CreateDepartment_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Department attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Department_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Department/{DepartmentId}/:
    get:
      tags:
      - Department
      summary: Retrieve Department instance
      description: Retrieve Department from Department
      operationId: RetrieveDepartmentinstance_0
      parameters:
      - name: include
        in: query
        description: Department relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Department,DepartmentList,EmployeeList,WorksForEmployeeList"
      - name: "fields[Department]"
        in: query
        description: Department fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,DepartmentId,DepartmentName,SecurityLevel,S_CheckSum"
      - name: DepartmentId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Department_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Department
      summary: Delete Department from Department
      operationId: DeleteDepartmentfromDepartment_0
      parameters:
      - name: DepartmentId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Department_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Department
      summary: Update Department
      description: Update Department attributes
      operationId: UpdateDepartment_0
      parameters:
      - name: DepartmentId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Department attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Department_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Department/{DepartmentId}/Department:
    get:
      tags:
      - Department
      summary: Retrieve Department from Department.Department
      description: Retrieve Department items from the Department Department "to-one"
        relationship
      operationId: RetrieveDepartmentfromDepartmentDepartment_0
      parameters:
      - name: include
        in: query
        description: Department relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Department,DepartmentList,EmployeeList,WorksForEmployeeList"
      - name: "fields[Department]"
        in: query
        description: Department fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,DepartmentId,DepartmentName,SecurityLevel,S_CheckSum"
      - name: DepartmentId
        in: path
        description: Department.Department item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.Department_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Department
      summary: Delete Department from Department.Department
      description: Delete Department items from the Department Department "to-one"
        relationship
      operationId: DeleteDepartmentfromDepartmentDepartment_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department.Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.Department POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.Department_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.Department_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Department.Department body
    patch:
      tags:
      - Department
      summary: Update Department.Department
      description: Update the Department Department "to-one" relationship
      operationId: UpdateDepartmentDepartment_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department.Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.Department POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.Department_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.Department_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.Department body
  /Department/{DepartmentId}/DepartmentList:
    get:
      tags:
      - Department
      summary: Retrieve Department from Department.DepartmentList
      description: Retrieve Department items from the Department DepartmentList "to-many"
        relationship
      operationId: RetrieveDepartmentfromDepartmentDepartmentList_0
      parameters:
      - name: include
        in: query
        description: Department relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Department,DepartmentList,EmployeeList,WorksForEmployeeList"
      - name: "fields[Department]"
        in: query
        description: Department fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,DepartmentId,DepartmentName,SecurityLevel,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[DepartmentId]"
        in: query
        description: DepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[DepartmentName]"
        in: query
        description: DepartmentName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[SecurityLevel]"
        in: query
        description: SecurityLevel attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Department filter
        schema:
          type: string
          format: string
      - name: DepartmentId
        in: path
        description: Department.DepartmentList item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.DepartmentList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Department
      summary: Add Department items to Department.DepartmentList
      description: Add Department items to the Department DepartmentList "to-many"
        relationship
      operationId: AddDepartmentitemstoDepartmentDepartmentList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department.DepartmentList item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.DepartmentList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.DepartmentList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.DepartmentList body
    delete:
      tags:
      - Department
      summary: Delete Department from Department.DepartmentList
      description: Delete Department items from the Department DepartmentList "to-many"
        relationship
      operationId: DeleteDepartmentfromDepartmentDepartmentList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department.DepartmentList item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.DepartmentList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.DepartmentList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.DepartmentList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Department.DepartmentList body
    patch:
      tags:
      - Department
      summary: Update Department.DepartmentList
      description: Update the Department DepartmentList "to-many" relationship
      operationId: UpdateDepartmentDepartmentList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department.DepartmentList item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.DepartmentList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.DepartmentList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.DepartmentList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.DepartmentList body
  /Department/{DepartmentId}/EmployeeList:
    get:
      tags:
      - Department
      summary: Retrieve Employee from Department.EmployeeList
      description: Retrieve Employee items from the Department EmployeeList "to-many"
        relationship
      operationId: RetrieveEmployeefromDepartmentEmployeeList_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TitleOfCourtesy]"
        in: query
        description: TitleOfCourtesy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[BirthDate]"
        in: query
        description: BirthDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HireDate]"
        in: query
        description: HireDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HomePhone]"
        in: query
        description: HomePhone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Extension]"
        in: query
        description: Extension attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Notes]"
        in: query
        description: Notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReportsTo]"
        in: query
        description: ReportsTo attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PhotoPath]"
        in: query
        description: PhotoPath attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeType]"
        in: query
        description: EmployeeType attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[WorksForDepartmentId]"
        in: query
        description: WorksForDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OnLoanDepartmentId]"
        in: query
        description: OnLoanDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnionId]"
        in: query
        description: UnionId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Dues]"
        in: query
        description: Dues attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Email]"
        in: query
        description: Email attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[__proper_salary__]"
        in: query
        description: __proper_salary__ attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProperSalary]"
        in: query
        description: ProperSalary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Employee filter
        schema:
          type: string
          format: string
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.EmployeeList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Department
      summary: Add Employee items to Department.EmployeeList
      description: Add Employee items to the Department EmployeeList "to-many" relationship
      operationId: AddEmployeeitemstoDepartmentEmployeeList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.EmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.EmployeeList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.EmployeeList body
    delete:
      tags:
      - Department
      summary: Delete Employee from Department.EmployeeList
      description: Delete Employee items from the Department EmployeeList "to-many"
        relationship
      operationId: DeleteEmployeefromDepartmentEmployeeList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.EmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.EmployeeList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.EmployeeList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Department.EmployeeList body
    patch:
      tags:
      - Department
      summary: Update Department.EmployeeList
      description: Update the Department EmployeeList "to-many" relationship
      operationId: UpdateDepartmentEmployeeList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.EmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.EmployeeList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.EmployeeList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.EmployeeList body
  /Department/{DepartmentId}/WorksForEmployeeList:
    get:
      tags:
      - Department
      summary: Retrieve Employee from Department.WorksForEmployeeList
      description: Retrieve Employee items from the Department WorksForEmployeeList
        "to-many" relationship
      operationId: RetrieveEmployeefromDepartmentWorksForEmployeeList_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TitleOfCourtesy]"
        in: query
        description: TitleOfCourtesy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[BirthDate]"
        in: query
        description: BirthDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HireDate]"
        in: query
        description: HireDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HomePhone]"
        in: query
        description: HomePhone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Extension]"
        in: query
        description: Extension attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Notes]"
        in: query
        description: Notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReportsTo]"
        in: query
        description: ReportsTo attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PhotoPath]"
        in: query
        description: PhotoPath attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeType]"
        in: query
        description: EmployeeType attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[WorksForDepartmentId]"
        in: query
        description: WorksForDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OnLoanDepartmentId]"
        in: query
        description: OnLoanDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnionId]"
        in: query
        description: UnionId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Dues]"
        in: query
        description: Dues attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Email]"
        in: query
        description: Email attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[__proper_salary__]"
        in: query
        description: __proper_salary__ attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProperSalary]"
        in: query
        description: ProperSalary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Employee filter
        schema:
          type: string
          format: string
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.WorksForEmployeeList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Department
      summary: Add Employee items to Department.WorksForEmployeeList
      description: Add Employee items to the Department WorksForEmployeeList "to-many"
        relationship
      operationId: AddEmployeeitemstoDepartmentWorksForEmployeeList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.WorksForEmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.WorksForEmployeeList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.WorksForEmployeeList body
    delete:
      tags:
      - Department
      summary: Delete Employee from Department.WorksForEmployeeList
      description: Delete Employee items from the Department WorksForEmployeeList
        "to-many" relationship
      operationId: DeleteEmployeefromDepartmentWorksForEmployeeList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.WorksForEmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.WorksForEmployeeList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.WorksForEmployeeList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Department.WorksForEmployeeList body
    patch:
      tags:
      - Department
      summary: Update Department.WorksForEmployeeList
      description: Update the Department WorksForEmployeeList "to-many" relationship
      operationId: UpdateDepartmentWorksForEmployeeList_0
      parameters:
      - name: DepartmentId
        in: path
        description: Department item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Department.WorksForEmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Department.WorksForEmployeeList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department.WorksForEmployeeList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Department.WorksForEmployeeList body
  /Employee/:
    get:
      tags:
      - Employee
      summary: Retrieve a collection of Employee objects
      description: Retrieve Employee from Employee
      operationId: RetrieveacollectionofEmployeeobjects_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TitleOfCourtesy]"
        in: query
        description: TitleOfCourtesy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[BirthDate]"
        in: query
        description: BirthDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HireDate]"
        in: query
        description: HireDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HomePhone]"
        in: query
        description: HomePhone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Extension]"
        in: query
        description: Extension attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Notes]"
        in: query
        description: Notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReportsTo]"
        in: query
        description: ReportsTo attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PhotoPath]"
        in: query
        description: PhotoPath attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeType]"
        in: query
        description: EmployeeType attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[WorksForDepartmentId]"
        in: query
        description: WorksForDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OnLoanDepartmentId]"
        in: query
        description: OnLoanDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnionId]"
        in: query
        description: UnionId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Dues]"
        in: query
        description: Dues attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Email]"
        in: query
        description: Email attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[__proper_salary__]"
        in: query
        description: __proper_salary__ attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProperSalary]"
        in: query
        description: ProperSalary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Employee filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Employee_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Employee
      summary: Create Employee
      operationId: CreateEmployee_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Employee attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Employee_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Employee/{EmployeeId}/:
    get:
      tags:
      - Employee
      summary: Retrieve Employee instance
      description: Retrieve Employee from Employee
      operationId: RetrieveEmployeeinstance_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: EmployeeId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Employee_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Employee
      summary: Delete Employee from Employee
      operationId: DeleteEmployeefromEmployee_0
      parameters:
      - name: EmployeeId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Employee_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Employee
      summary: Update Employee
      description: Update Employee attributes
      operationId: UpdateEmployee_0
      parameters:
      - name: EmployeeId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Employee attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Employee_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Employee/{EmployeeId}/EmployeeAuditList:
    get:
      tags:
      - Employee
      summary: Retrieve EmployeeAudit from Employee.EmployeeAuditList
      description: Retrieve EmployeeAudit items from the Employee EmployeeAuditList
        "to-many" relationship
      operationId: RetrieveEmployeeAuditfromEmployeeEmployeeAuditList_0
      parameters:
      - name: include
        in: query
        description: EmployeeAudit relationships to include (csv)
        schema:
          type: string
          format: string
          default: Employee
      - name: "fields[EmployeeAudit]"
        in: query
        description: EmployeeAudit fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Title,Salary,LastName,FirstName,EmployeeId,CreatedOn,UpdatedOn,CreatedBy,UpdatedBy"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CreatedOn]"
        in: query
        description: CreatedOn attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UpdatedOn]"
        in: query
        description: UpdatedOn attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CreatedBy]"
        in: query
        description: CreatedBy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UpdatedBy]"
        in: query
        description: UpdatedBy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom EmployeeAudit filter
        schema:
          type: string
          format: string
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.EmployeeAuditList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Employee
      summary: Add EmployeeAudit items to Employee.EmployeeAuditList
      description: Add EmployeeAudit items to the Employee EmployeeAuditList "to-many"
        relationship
      operationId: AddEmployeeAudititemstoEmployeeEmployeeAuditList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.EmployeeAuditList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.EmployeeAuditList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.EmployeeAuditList body
    delete:
      tags:
      - Employee
      summary: Delete EmployeeAudit from Employee.EmployeeAuditList
      description: Delete EmployeeAudit items from the Employee EmployeeAuditList
        "to-many" relationship
      operationId: DeleteEmployeeAuditfromEmployeeEmployeeAuditList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.EmployeeAuditList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.EmployeeAuditList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.EmployeeAuditList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.EmployeeAuditList body
    patch:
      tags:
      - Employee
      summary: Update Employee.EmployeeAuditList
      description: Update the Employee EmployeeAuditList "to-many" relationship
      operationId: UpdateEmployeeEmployeeAuditList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.EmployeeAuditList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.EmployeeAuditList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.EmployeeAuditList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.EmployeeAuditList body
  /Employee/{EmployeeId}/EmployeeTerritoryList:
    get:
      tags:
      - Employee
      summary: Retrieve EmployeeTerritory from Employee.EmployeeTerritoryList
      description: Retrieve EmployeeTerritory items from the Employee EmployeeTerritoryList
        "to-many" relationship
      operationId: RetrieveEmployeeTerritoryfromEmployeeEmployeeTerritoryList_0
      parameters:
      - name: include
        in: query
        description: EmployeeTerritory relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Employee,Territory"
      - name: "fields[EmployeeTerritory]"
        in: query
        description: EmployeeTerritory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,EmployeeId,TerritoryId"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TerritoryId]"
        in: query
        description: TerritoryId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom EmployeeTerritory filter
        schema:
          type: string
          format: string
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.EmployeeTerritoryList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Employee
      summary: Add EmployeeTerritory items to Employee.EmployeeTerritoryList
      description: Add EmployeeTerritory items to the Employee EmployeeTerritoryList
        "to-many" relationship
      operationId: AddEmployeeTerritoryitemstoEmployeeEmployeeTerritoryList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.EmployeeTerritoryList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.EmployeeTerritoryList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.EmployeeTerritoryList body
    delete:
      tags:
      - Employee
      summary: Delete EmployeeTerritory from Employee.EmployeeTerritoryList
      description: Delete EmployeeTerritory items from the Employee EmployeeTerritoryList
        "to-many" relationship
      operationId: DeleteEmployeeTerritoryfromEmployeeEmployeeTerritoryList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.EmployeeTerritoryList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.EmployeeTerritoryList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.EmployeeTerritoryList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.EmployeeTerritoryList body
    patch:
      tags:
      - Employee
      summary: Update Employee.EmployeeTerritoryList
      description: Update the Employee EmployeeTerritoryList "to-many" relationship
      operationId: UpdateEmployeeEmployeeTerritoryList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.EmployeeTerritoryList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.EmployeeTerritoryList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.EmployeeTerritoryList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.EmployeeTerritoryList body
  /Employee/{EmployeeId}/Manager:
    get:
      tags:
      - Employee
      summary: Retrieve Employee from Employee.Manager
      description: Retrieve Employee items from the Employee Manager "to-one" relationship
      operationId: RetrieveEmployeefromEmployeeManager_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: EmployeeId
        in: path
        description: Employee.Manager item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Manager_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Employee
      summary: Delete Employee from Employee.Manager
      description: Delete Employee items from the Employee Manager "to-one" relationship
      operationId: DeleteEmployeefromEmployeeManager_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee.Manager item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Manager POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Manager_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Manager_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.Manager body
    patch:
      tags:
      - Employee
      summary: Update Employee.Manager
      description: Update the Employee Manager "to-one" relationship
      operationId: UpdateEmployeeManager_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee.Manager item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Manager POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Manager_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Manager_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.Manager body
  /Employee/{EmployeeId}/Manages:
    get:
      tags:
      - Employee
      summary: Retrieve Employee from Employee.Manages
      description: Retrieve Employee items from the Employee Manages "to-many" relationship
      operationId: RetrieveEmployeefromEmployeeManages_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TitleOfCourtesy]"
        in: query
        description: TitleOfCourtesy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[BirthDate]"
        in: query
        description: BirthDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HireDate]"
        in: query
        description: HireDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HomePhone]"
        in: query
        description: HomePhone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Extension]"
        in: query
        description: Extension attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Notes]"
        in: query
        description: Notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReportsTo]"
        in: query
        description: ReportsTo attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PhotoPath]"
        in: query
        description: PhotoPath attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeType]"
        in: query
        description: EmployeeType attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[WorksForDepartmentId]"
        in: query
        description: WorksForDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OnLoanDepartmentId]"
        in: query
        description: OnLoanDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnionId]"
        in: query
        description: UnionId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Dues]"
        in: query
        description: Dues attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Email]"
        in: query
        description: Email attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[__proper_salary__]"
        in: query
        description: __proper_salary__ attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProperSalary]"
        in: query
        description: ProperSalary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Employee filter
        schema:
          type: string
          format: string
      - name: EmployeeId
        in: path
        description: Employee.Manages item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Manages_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Employee
      summary: Add Employee items to Employee.Manages
      description: Add Employee items to the Employee Manages "to-many" relationship
      operationId: AddEmployeeitemstoEmployeeManages_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee.Manages item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Manages POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Manages_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.Manages body
    delete:
      tags:
      - Employee
      summary: Delete Employee from Employee.Manages
      description: Delete Employee items from the Employee Manages "to-many" relationship
      operationId: DeleteEmployeefromEmployeeManages_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee.Manages item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Manages POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Manages_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Manages_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.Manages body
    patch:
      tags:
      - Employee
      summary: Update Employee.Manages
      description: Update the Employee Manages "to-many" relationship
      operationId: UpdateEmployeeManages_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee.Manages item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Manages POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Manages_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Manages_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.Manages body
  /Employee/{EmployeeId}/OnLoanDepartment:
    get:
      tags:
      - Employee
      summary: Retrieve Department from Employee.OnLoanDepartment
      description: Retrieve Department items from the Employee OnLoanDepartment "to-one"
        relationship
      operationId: RetrieveDepartmentfromEmployeeOnLoanDepartment_0
      parameters:
      - name: include
        in: query
        description: Department relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Department,DepartmentList,EmployeeList,WorksForEmployeeList"
      - name: "fields[Department]"
        in: query
        description: Department fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,DepartmentId,DepartmentName,SecurityLevel,S_CheckSum"
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.OnLoanDepartment_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Employee
      summary: Delete Department from Employee.OnLoanDepartment
      description: Delete Department items from the Employee OnLoanDepartment "to-one"
        relationship
      operationId: DeleteDepartmentfromEmployeeOnLoanDepartment_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.OnLoanDepartment POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.OnLoanDepartment_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.OnLoanDepartment_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.OnLoanDepartment body
    patch:
      tags:
      - Employee
      summary: Update Employee.OnLoanDepartment
      description: Update the Employee OnLoanDepartment "to-one" relationship
      operationId: UpdateEmployeeOnLoanDepartment_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.OnLoanDepartment POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.OnLoanDepartment_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.OnLoanDepartment_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.OnLoanDepartment body
  /Employee/{EmployeeId}/OrderList:
    get:
      tags:
      - Employee
      summary: Retrieve Order from Employee.OrderList
      description: Retrieve Order items from the Employee OrderList "to-many" relationship
      operationId: RetrieveOrderfromEmployeeOrderList_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CustomerId]"
        in: query
        description: CustomerId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDate]"
        in: query
        description: OrderDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RequiredDate]"
        in: query
        description: RequiredDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipVia]"
        in: query
        description: ShipVia attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Freight]"
        in: query
        description: Freight attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipName]"
        in: query
        description: ShipName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipAddress]"
        in: query
        description: ShipAddress attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCity]"
        in: query
        description: ShipCity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipRegion]"
        in: query
        description: ShipRegion attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipZip]"
        in: query
        description: ShipZip attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCountry]"
        in: query
        description: ShipCountry attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[AmountTotal]"
        in: query
        description: AmountTotal attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Ready]"
        in: query
        description: Ready attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDetailCount]"
        in: query
        description: OrderDetailCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CloneFromOrder]"
        in: query
        description: CloneFromOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Order filter
        schema:
          type: string
          format: string
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.OrderList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Employee
      summary: Add Order items to Employee.OrderList
      description: Add Order items to the Employee OrderList "to-many" relationship
      operationId: AddOrderitemstoEmployeeOrderList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.OrderList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.OrderList body
    delete:
      tags:
      - Employee
      summary: Delete Order from Employee.OrderList
      description: Delete Order items from the Employee OrderList "to-many" relationship
      operationId: DeleteOrderfromEmployeeOrderList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.OrderList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.OrderList body
    patch:
      tags:
      - Employee
      summary: Update Employee.OrderList
      description: Update the Employee OrderList "to-many" relationship
      operationId: UpdateEmployeeOrderList_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.OrderList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.OrderList body
  /Employee/{EmployeeId}/Union:
    get:
      tags:
      - Employee
      summary: Retrieve Union from Employee.Union
      description: Retrieve Union items from the Employee Union "to-one" relationship
      operationId: RetrieveUnionfromEmployeeUnion_0
      parameters:
      - name: include
        in: query
        description: Union relationships to include (csv)
        schema:
          type: string
          format: string
          default: EmployeeList
      - name: "fields[Union]"
        in: query
        description: Union fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Name"
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Union_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Employee
      summary: Delete Union from Employee.Union
      description: Delete Union items from the Employee Union "to-one" relationship
      operationId: DeleteUnionfromEmployeeUnion_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Union POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Union_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Union_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.Union body
    patch:
      tags:
      - Employee
      summary: Update Employee.Union
      description: Update the Employee Union "to-one" relationship
      operationId: UpdateEmployeeUnion_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.Union POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.Union_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.Union_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.Union body
  /Employee/{EmployeeId}/WorksForDepartment:
    get:
      tags:
      - Employee
      summary: Retrieve Department from Employee.WorksForDepartment
      description: Retrieve Department items from the Employee WorksForDepartment
        "to-one" relationship
      operationId: RetrieveDepartmentfromEmployeeWorksForDepartment_0
      parameters:
      - name: include
        in: query
        description: Department relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Department,DepartmentList,EmployeeList,WorksForEmployeeList"
      - name: "fields[Department]"
        in: query
        description: Department fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,DepartmentId,DepartmentName,SecurityLevel,S_CheckSum"
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.WorksForDepartment_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Employee
      summary: Delete Department from Employee.WorksForDepartment
      description: Delete Department items from the Employee WorksForDepartment "to-one"
        relationship
      operationId: DeleteDepartmentfromEmployeeWorksForDepartment_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.WorksForDepartment POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.WorksForDepartment_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.WorksForDepartment_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Employee.WorksForDepartment body
    patch:
      tags:
      - Employee
      summary: Update Employee.WorksForDepartment
      description: Update the Employee WorksForDepartment "to-one" relationship
      operationId: UpdateEmployeeWorksForDepartment_0
      parameters:
      - name: EmployeeId
        in: path
        description: Employee item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Employee.WorksForDepartment POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Employee.WorksForDepartment_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee.WorksForDepartment_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Employee.WorksForDepartment body
  /EmployeeAudit/:
    get:
      tags:
      - EmployeeAudit
      summary: Retrieve a collection of EmployeeAudit objects
      description: Retrieve EmployeeAudit from EmployeeAudit
      operationId: RetrieveacollectionofEmployeeAuditobjects_0
      parameters:
      - name: include
        in: query
        description: EmployeeAudit relationships to include (csv)
        schema:
          type: string
          format: string
          default: Employee
      - name: "fields[EmployeeAudit]"
        in: query
        description: EmployeeAudit fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Title,Salary,LastName,FirstName,EmployeeId,CreatedOn,UpdatedOn,CreatedBy,UpdatedBy"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CreatedOn]"
        in: query
        description: CreatedOn attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UpdatedOn]"
        in: query
        description: UpdatedOn attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CreatedBy]"
        in: query
        description: CreatedBy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UpdatedBy]"
        in: query
        description: UpdatedBy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom EmployeeAudit filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeAudit_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - EmployeeAudit
      summary: Create EmployeeAudit
      operationId: CreateEmployeeAudit_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: EmployeeAudit attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeAudit_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeAudit_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /EmployeeAudit/{EmployeeAuditId}/:
    get:
      tags:
      - EmployeeAudit
      summary: Retrieve EmployeeAudit instance
      description: Retrieve EmployeeAudit from EmployeeAudit
      operationId: RetrieveEmployeeAuditinstance_0
      parameters:
      - name: include
        in: query
        description: EmployeeAudit relationships to include (csv)
        schema:
          type: string
          format: string
          default: Employee
      - name: "fields[EmployeeAudit]"
        in: query
        description: EmployeeAudit fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Title,Salary,LastName,FirstName,EmployeeId,CreatedOn,UpdatedOn,CreatedBy,UpdatedBy"
      - name: EmployeeAuditId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeAudit_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - EmployeeAudit
      summary: Delete EmployeeAudit from EmployeeAudit
      operationId: DeleteEmployeeAuditfromEmployeeAudit_0
      parameters:
      - name: EmployeeAuditId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeAudit_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - EmployeeAudit
      summary: Update EmployeeAudit
      description: Update EmployeeAudit attributes
      operationId: UpdateEmployeeAudit_0
      parameters:
      - name: EmployeeAuditId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: EmployeeAudit attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeAudit_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeAudit_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /EmployeeAudit/{EmployeeAuditId}/Employee:
    get:
      tags:
      - EmployeeAudit
      summary: Retrieve Employee from EmployeeAudit.Employee
      description: Retrieve Employee items from the EmployeeAudit Employee "to-one"
        relationship
      operationId: RetrieveEmployeefromEmployeeAuditEmployee_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: EmployeeAuditId
        in: path
        description: EmployeeAudit item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeAudit.Employee_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - EmployeeAudit
      summary: Delete Employee from EmployeeAudit.Employee
      description: Delete Employee items from the EmployeeAudit Employee "to-one"
        relationship
      operationId: DeleteEmployeefromEmployeeAuditEmployee_0
      parameters:
      - name: EmployeeAuditId
        in: path
        description: EmployeeAudit item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: EmployeeAudit.Employee POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeAudit.Employee_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeAudit.Employee_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: EmployeeAudit.Employee body
    patch:
      tags:
      - EmployeeAudit
      summary: Update EmployeeAudit.Employee
      description: Update the EmployeeAudit Employee "to-one" relationship
      operationId: UpdateEmployeeAuditEmployee_0
      parameters:
      - name: EmployeeAuditId
        in: path
        description: EmployeeAudit item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: EmployeeAudit.Employee POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeAudit.Employee_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeAudit.Employee_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: EmployeeAudit.Employee body
  /EmployeeTerritory/:
    get:
      tags:
      - EmployeeTerritory
      summary: Retrieve a collection of EmployeeTerritory objects
      description: Retrieve EmployeeTerritory from EmployeeTerritory
      operationId: RetrieveacollectionofEmployeeTerritoryobjects_0
      parameters:
      - name: include
        in: query
        description: EmployeeTerritory relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Employee,Territory"
      - name: "fields[EmployeeTerritory]"
        in: query
        description: EmployeeTerritory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,EmployeeId,TerritoryId"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TerritoryId]"
        in: query
        description: TerritoryId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom EmployeeTerritory filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeTerritory_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - EmployeeTerritory
      summary: Create EmployeeTerritory
      operationId: CreateEmployeeTerritory_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: EmployeeTerritory attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeTerritory_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeTerritory_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /EmployeeTerritory/{EmployeeTerritoryId}/:
    get:
      tags:
      - EmployeeTerritory
      summary: Retrieve EmployeeTerritory instance
      description: Retrieve EmployeeTerritory from EmployeeTerritory
      operationId: RetrieveEmployeeTerritoryinstance_0
      parameters:
      - name: include
        in: query
        description: EmployeeTerritory relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Employee,Territory"
      - name: "fields[EmployeeTerritory]"
        in: query
        description: EmployeeTerritory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,EmployeeId,TerritoryId"
      - name: EmployeeTerritoryId
        in: path
        required: true
        schema:
          type: string
          default: 1-06897
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeTerritory_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - EmployeeTerritory
      summary: Delete EmployeeTerritory from EmployeeTerritory
      operationId: DeleteEmployeeTerritoryfromEmployeeTerritory_0
      parameters:
      - name: EmployeeTerritoryId
        in: path
        required: true
        schema:
          type: string
          default: 1-06897
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeTerritory_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - EmployeeTerritory
      summary: Update EmployeeTerritory
      description: Update EmployeeTerritory attributes
      operationId: UpdateEmployeeTerritory_0
      parameters:
      - name: EmployeeTerritoryId
        in: path
        required: true
        schema:
          type: string
          default: 1-06897
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: EmployeeTerritory attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeTerritory_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/EmployeeTerritory_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /EmployeeTerritory/{EmployeeTerritoryId}/Employee:
    get:
      tags:
      - EmployeeTerritory
      summary: Retrieve Employee from EmployeeTerritory.Employee
      description: Retrieve Employee items from the EmployeeTerritory Employee "to-one"
        relationship
      operationId: RetrieveEmployeefromEmployeeTerritoryEmployee_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: EmployeeTerritoryId
        in: path
        description: EmployeeTerritory item
        required: true
        schema:
          type: string
          default: 1-06897
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeTerritory.Employee_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - EmployeeTerritory
      summary: Delete Employee from EmployeeTerritory.Employee
      description: Delete Employee items from the EmployeeTerritory Employee "to-one"
        relationship
      operationId: DeleteEmployeefromEmployeeTerritoryEmployee_0
      parameters:
      - name: EmployeeTerritoryId
        in: path
        description: EmployeeTerritory item
        required: true
        schema:
          type: string
          default: 1-06897
      requestBody:
        description: EmployeeTerritory.Employee POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeTerritory.Employee_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeTerritory.Employee_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: EmployeeTerritory.Employee body
    patch:
      tags:
      - EmployeeTerritory
      summary: Update EmployeeTerritory.Employee
      description: Update the EmployeeTerritory Employee "to-one" relationship
      operationId: UpdateEmployeeTerritoryEmployee_0
      parameters:
      - name: EmployeeTerritoryId
        in: path
        description: EmployeeTerritory item
        required: true
        schema:
          type: string
          default: 1-06897
      requestBody:
        description: EmployeeTerritory.Employee POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeTerritory.Employee_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeTerritory.Employee_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: EmployeeTerritory.Employee body
  /EmployeeTerritory/{EmployeeTerritoryId}/Territory:
    get:
      tags:
      - EmployeeTerritory
      summary: Retrieve Territory from EmployeeTerritory.Territory
      description: Retrieve Territory items from the EmployeeTerritory Territory "to-one"
        relationship
      operationId: RetrieveTerritoryfromEmployeeTerritoryTerritory_0
      parameters:
      - name: include
        in: query
        description: Territory relationships to include (csv)
        schema:
          type: string
          format: string
          default: EmployeeTerritoryList
      - name: "fields[Territory]"
        in: query
        description: Territory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,TerritoryDescription,RegionId"
      - name: EmployeeTerritoryId
        in: path
        description: EmployeeTerritory item
        required: true
        schema:
          type: string
          default: 1-06897
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeTerritory.Territory_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - EmployeeTerritory
      summary: Delete Territory from EmployeeTerritory.Territory
      description: Delete Territory items from the EmployeeTerritory Territory "to-one"
        relationship
      operationId: DeleteTerritoryfromEmployeeTerritoryTerritory_0
      parameters:
      - name: EmployeeTerritoryId
        in: path
        description: EmployeeTerritory item
        required: true
        schema:
          type: string
          default: 1-06897
      requestBody:
        description: EmployeeTerritory.Territory POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeTerritory.Territory_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeTerritory.Territory_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: EmployeeTerritory.Territory body
    patch:
      tags:
      - EmployeeTerritory
      summary: Update EmployeeTerritory.Territory
      description: Update the EmployeeTerritory Territory "to-one" relationship
      operationId: UpdateEmployeeTerritoryTerritory_0
      parameters:
      - name: EmployeeTerritoryId
        in: path
        description: EmployeeTerritory item
        required: true
        schema:
          type: string
          default: 1-06897
      requestBody:
        description: EmployeeTerritory.Territory POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EmployeeTerritory.Territory_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EmployeeTerritory.Territory_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: EmployeeTerritory.Territory body
  /Location/:
    get:
      tags:
      - Location
      summary: Retrieve a collection of Location objects
      description: Retrieve Location from Location
      operationId: RetrieveacollectionofLocationobjects_0
      parameters:
      - name: include
        in: query
        description: Location relationships to include (csv)
        schema:
          type: string
          format: string
          default: OrderList
      - name: "fields[Location]"
        in: query
        description: Location fields to include (csv)
        schema:
          type: string
          format: string
          default: "country,city,notes,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[country]"
        in: query
        description: country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[city]"
        in: query
        description: city attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[notes]"
        in: query
        description: notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Location filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Location
      summary: Create Location
      operationId: CreateLocation_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Location attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Location_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Location/{LocationId}/:
    get:
      tags:
      - Location
      summary: Retrieve Location instance
      description: Retrieve Location from Location
      operationId: RetrieveLocationinstance_0
      parameters:
      - name: include
        in: query
        description: Location relationships to include (csv)
        schema:
          type: string
          format: string
          default: OrderList
      - name: "fields[Location]"
        in: query
        description: Location fields to include (csv)
        schema:
          type: string
          format: string
          default: "country,city,notes,S_CheckSum"
      - name: LocationId
        in: path
        required: true
        schema:
          type: string
          default: USA_San Francisco
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Location
      summary: Delete Location from Location
      operationId: DeleteLocationfromLocation_0
      parameters:
      - name: LocationId
        in: path
        required: true
        schema:
          type: string
          default: USA_San Francisco
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Location
      summary: Update Location
      description: Update Location attributes
      operationId: UpdateLocation_0
      parameters:
      - name: LocationId
        in: path
        required: true
        schema:
          type: string
          default: USA_San Francisco
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Location attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Location_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Location_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Location/{LocationId}/OrderList:
    get:
      tags:
      - Location
      summary: Retrieve Order from Location.OrderList
      description: Retrieve Order items from the Location OrderList "to-many" relationship
      operationId: RetrieveOrderfromLocationOrderList_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CustomerId]"
        in: query
        description: CustomerId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDate]"
        in: query
        description: OrderDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RequiredDate]"
        in: query
        description: RequiredDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipVia]"
        in: query
        description: ShipVia attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Freight]"
        in: query
        description: Freight attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipName]"
        in: query
        description: ShipName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipAddress]"
        in: query
        description: ShipAddress attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCity]"
        in: query
        description: ShipCity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipRegion]"
        in: query
        description: ShipRegion attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipZip]"
        in: query
        description: ShipZip attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCountry]"
        in: query
        description: ShipCountry attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[AmountTotal]"
        in: query
        description: AmountTotal attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Ready]"
        in: query
        description: Ready attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDetailCount]"
        in: query
        description: OrderDetailCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CloneFromOrder]"
        in: query
        description: CloneFromOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Order filter
        schema:
          type: string
          format: string
      - name: LocationId
        in: path
        description: Location item
        required: true
        schema:
          type: string
          default: USA_San Francisco
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location.OrderList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Location
      summary: Add Order items to Location.OrderList
      description: Add Order items to the Location OrderList "to-many" relationship
      operationId: AddOrderitemstoLocationOrderList_0
      parameters:
      - name: LocationId
        in: path
        description: Location item
        required: true
        schema:
          type: string
          default: USA_San Francisco
      requestBody:
        description: Location.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Location.OrderList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Location.OrderList body
    delete:
      tags:
      - Location
      summary: Delete Order from Location.OrderList
      description: Delete Order items from the Location OrderList "to-many" relationship
      operationId: DeleteOrderfromLocationOrderList_0
      parameters:
      - name: LocationId
        in: path
        description: Location item
        required: true
        schema:
          type: string
          default: USA_San Francisco
      requestBody:
        description: Location.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Location.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location.OrderList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Location.OrderList body
    patch:
      tags:
      - Location
      summary: Update Location.OrderList
      description: Update the Location OrderList "to-many" relationship
      operationId: UpdateLocationOrderList_0
      parameters:
      - name: LocationId
        in: path
        description: Location item
        required: true
        schema:
          type: string
          default: USA_San Francisco
      requestBody:
        description: Location.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Location.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location.OrderList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Location.OrderList body
  /Order/:
    get:
      tags:
      - Order
      summary: Retrieve a collection of Order objects
      description: Retrieve Order from Order
      operationId: RetrieveacollectionofOrderobjects_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CustomerId]"
        in: query
        description: CustomerId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDate]"
        in: query
        description: OrderDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RequiredDate]"
        in: query
        description: RequiredDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipVia]"
        in: query
        description: ShipVia attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Freight]"
        in: query
        description: Freight attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipName]"
        in: query
        description: ShipName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipAddress]"
        in: query
        description: ShipAddress attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCity]"
        in: query
        description: ShipCity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipRegion]"
        in: query
        description: ShipRegion attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipZip]"
        in: query
        description: ShipZip attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCountry]"
        in: query
        description: ShipCountry attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[AmountTotal]"
        in: query
        description: AmountTotal attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Ready]"
        in: query
        description: Ready attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDetailCount]"
        in: query
        description: OrderDetailCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CloneFromOrder]"
        in: query
        description: CloneFromOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Order filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Order_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Order
      summary: Create Order
      operationId: CreateOrder_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Order attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Order_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Order/{OrderId}/:
    get:
      tags:
      - Order
      summary: Retrieve Order instance
      description: Retrieve Order from Order
      operationId: RetrieveOrderinstance_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: OrderId
        in: path
        required: true
        schema:
          type: string
          default: "10248"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Order_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Order
      summary: Delete Order from Order
      operationId: DeleteOrderfromOrder_0
      parameters:
      - name: OrderId
        in: path
        required: true
        schema:
          type: string
          default: "10248"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Order_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Order
      summary: Update Order
      description: Update Order attributes
      operationId: UpdateOrder_0
      parameters:
      - name: OrderId
        in: path
        required: true
        schema:
          type: string
          default: "10248"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Order attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Order_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Order/{OrderId}/Customer:
    get:
      tags:
      - Order
      summary: Retrieve Customer from Order.Customer
      description: Retrieve Customer items from the Order Customer "to-one" relationship
      operationId: RetrieveCustomerfromOrderCustomer_0
      parameters:
      - name: include
        in: query
        description: Customer relationships to include (csv)
        schema:
          type: string
          format: string
          default: OrderList
      - name: "fields[Customer]"
        in: query
        description: Customer fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax,Balance,CreditLimit,OrderCount,UnpaidOrderCount,Client_id,S_CheckSum"
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Customer_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Order
      summary: Delete Customer from Order.Customer
      description: Delete Customer items from the Order Customer "to-one" relationship
      operationId: DeleteCustomerfromOrderCustomer_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Customer POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Customer_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Customer_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Order.Customer body
    patch:
      tags:
      - Order
      summary: Update Order.Customer
      description: Update the Order Customer "to-one" relationship
      operationId: UpdateOrderCustomer_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Customer POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Customer_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Customer_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.Customer body
  /Order/{OrderId}/Employee:
    get:
      tags:
      - Order
      summary: Retrieve Employee from Order.Employee
      description: Retrieve Employee items from the Order Employee "to-one" relationship
      operationId: RetrieveEmployeefromOrderEmployee_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Employee_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Order
      summary: Delete Employee from Order.Employee
      description: Delete Employee items from the Order Employee "to-one" relationship
      operationId: DeleteEmployeefromOrderEmployee_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Employee POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Employee_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Employee_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Order.Employee body
    patch:
      tags:
      - Order
      summary: Update Order.Employee
      description: Update the Order Employee "to-one" relationship
      operationId: UpdateOrderEmployee_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Employee POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Employee_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Employee_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.Employee body
  /Order/{OrderId}/Location:
    get:
      tags:
      - Order
      summary: Retrieve Location from Order.Location
      description: Retrieve Location items from the Order Location "to-one" relationship
      operationId: RetrieveLocationfromOrderLocation_0
      parameters:
      - name: include
        in: query
        description: Location relationships to include (csv)
        schema:
          type: string
          format: string
          default: OrderList
      - name: "fields[Location]"
        in: query
        description: Location fields to include (csv)
        schema:
          type: string
          format: string
          default: "country,city,notes,S_CheckSum"
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Location_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Order
      summary: Delete Location from Order.Location
      description: Delete Location items from the Order Location "to-one" relationship
      operationId: DeleteLocationfromOrderLocation_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Location POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Location_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Location_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Order.Location body
    patch:
      tags:
      - Order
      summary: Update Order.Location
      description: Update the Order Location "to-one" relationship
      operationId: UpdateOrderLocation_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Location POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Location_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Location_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.Location body
  /Order/{OrderId}/Order:
    get:
      tags:
      - Order
      summary: Retrieve Order from Order.Order
      description: Retrieve Order items from the Order Order "to-one" relationship
      operationId: RetrieveOrderfromOrderOrder_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: OrderId
        in: path
        description: Order.Order item
        required: true
        schema:
          type: string
          default: "10248"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Order_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Order
      summary: Delete Order from Order.Order
      description: Delete Order items from the Order Order "to-one" relationship
      operationId: DeleteOrderfromOrderOrder_0
      parameters:
      - name: OrderId
        in: path
        description: Order.Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Order POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Order_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Order_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Order.Order body
    patch:
      tags:
      - Order
      summary: Update Order.Order
      description: Update the Order Order "to-one" relationship
      operationId: UpdateOrderOrder_0
      parameters:
      - name: OrderId
        in: path
        description: Order.Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.Order POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.Order_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.Order_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.Order body
  /Order/{OrderId}/OrderDetailList:
    get:
      tags:
      - Order
      summary: Retrieve OrderDetail from Order.OrderDetailList
      description: Retrieve OrderDetail items from the Order OrderDetailList "to-many"
        relationship
      operationId: RetrieveOrderDetailfromOrderOrderDetailList_0
      parameters:
      - name: include
        in: query
        description: OrderDetail relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Product"
      - name: "fields[OrderDetail]"
        in: query
        description: OrderDetail fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,OrderId,ProductId,UnitPrice,Quantity,Discount,Amount,ShippedDate"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderId]"
        in: query
        description: OrderId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProductId]"
        in: query
        description: ProductId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitPrice]"
        in: query
        description: UnitPrice attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Quantity]"
        in: query
        description: Quantity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Discount]"
        in: query
        description: Discount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Amount]"
        in: query
        description: Amount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom OrderDetail filter
        schema:
          type: string
          format: string
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.OrderDetailList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Order
      summary: Add OrderDetail items to Order.OrderDetailList
      description: Add OrderDetail items to the Order OrderDetailList "to-many" relationship
      operationId: AddOrderDetailitemstoOrderOrderDetailList_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.OrderDetailList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.OrderDetailList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.OrderDetailList body
    delete:
      tags:
      - Order
      summary: Delete OrderDetail from Order.OrderDetailList
      description: Delete OrderDetail items from the Order OrderDetailList "to-many"
        relationship
      operationId: DeleteOrderDetailfromOrderOrderDetailList_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.OrderDetailList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.OrderDetailList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.OrderDetailList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Order.OrderDetailList body
    patch:
      tags:
      - Order
      summary: Update Order.OrderDetailList
      description: Update the Order OrderDetailList "to-many" relationship
      operationId: UpdateOrderOrderDetailList_0
      parameters:
      - name: OrderId
        in: path
        description: Order item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.OrderDetailList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.OrderDetailList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.OrderDetailList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.OrderDetailList body
  /Order/{OrderId}/OrderList:
    get:
      tags:
      - Order
      summary: Retrieve Order from Order.OrderList
      description: Retrieve Order items from the Order OrderList "to-many" relationship
      operationId: RetrieveOrderfromOrderOrderList_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CustomerId]"
        in: query
        description: CustomerId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDate]"
        in: query
        description: OrderDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RequiredDate]"
        in: query
        description: RequiredDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipVia]"
        in: query
        description: ShipVia attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Freight]"
        in: query
        description: Freight attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipName]"
        in: query
        description: ShipName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipAddress]"
        in: query
        description: ShipAddress attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCity]"
        in: query
        description: ShipCity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipRegion]"
        in: query
        description: ShipRegion attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipZip]"
        in: query
        description: ShipZip attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShipCountry]"
        in: query
        description: ShipCountry attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[AmountTotal]"
        in: query
        description: AmountTotal attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Ready]"
        in: query
        description: Ready attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderDetailCount]"
        in: query
        description: OrderDetailCount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CloneFromOrder]"
        in: query
        description: CloneFromOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Order filter
        schema:
          type: string
          format: string
      - name: OrderId
        in: path
        description: Order.OrderList item
        required: true
        schema:
          type: string
          default: "10248"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.OrderList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Order
      summary: Add Order items to Order.OrderList
      description: Add Order items to the Order OrderList "to-many" relationship
      operationId: AddOrderitemstoOrderOrderList_0
      parameters:
      - name: OrderId
        in: path
        description: Order.OrderList item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.OrderList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.OrderList body
    delete:
      tags:
      - Order
      summary: Delete Order from Order.OrderList
      description: Delete Order items from the Order OrderList "to-many" relationship
      operationId: DeleteOrderfromOrderOrderList_0
      parameters:
      - name: OrderId
        in: path
        description: Order.OrderList item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.OrderList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Order.OrderList body
    patch:
      tags:
      - Order
      summary: Update Order.OrderList
      description: Update the Order OrderList "to-many" relationship
      operationId: UpdateOrderOrderList_0
      parameters:
      - name: OrderId
        in: path
        description: Order.OrderList item
        required: true
        schema:
          type: string
          default: "10248"
      requestBody:
        description: Order.OrderList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order.OrderList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order.OrderList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Order.OrderList body
  /OrderDetail/:
    get:
      tags:
      - OrderDetail
      summary: Retrieve a collection of OrderDetail objects
      description: Retrieve OrderDetail from OrderDetail
      operationId: RetrieveacollectionofOrderDetailobjects_0
      parameters:
      - name: include
        in: query
        description: OrderDetail relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Product"
      - name: "fields[OrderDetail]"
        in: query
        description: OrderDetail fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,OrderId,ProductId,UnitPrice,Quantity,Discount,Amount,ShippedDate"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderId]"
        in: query
        description: OrderId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProductId]"
        in: query
        description: ProductId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitPrice]"
        in: query
        description: UnitPrice attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Quantity]"
        in: query
        description: Quantity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Discount]"
        in: query
        description: Discount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Amount]"
        in: query
        description: Amount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom OrderDetail filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OrderDetail_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - OrderDetail
      summary: Create OrderDetail
      operationId: CreateOrderDetail_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: OrderDetail attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderDetail_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OrderDetail_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /OrderDetail/{OrderDetailId}/:
    get:
      tags:
      - OrderDetail
      summary: Retrieve OrderDetail instance
      description: Retrieve OrderDetail from OrderDetail
      operationId: RetrieveOrderDetailinstance_0
      parameters:
      - name: include
        in: query
        description: OrderDetail relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Product"
      - name: "fields[OrderDetail]"
        in: query
        description: OrderDetail fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,OrderId,ProductId,UnitPrice,Quantity,Discount,Amount,ShippedDate"
      - name: OrderDetailId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OrderDetail_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - OrderDetail
      summary: Delete OrderDetail from OrderDetail
      operationId: DeleteOrderDetailfromOrderDetail_0
      parameters:
      - name: OrderDetailId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OrderDetail_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - OrderDetail
      summary: Update OrderDetail
      description: Update OrderDetail attributes
      operationId: UpdateOrderDetail_0
      parameters:
      - name: OrderDetailId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: OrderDetail attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderDetail_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OrderDetail_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /OrderDetail/{OrderDetailId}/Order:
    get:
      tags:
      - OrderDetail
      summary: Retrieve Order from OrderDetail.Order
      description: Retrieve Order items from the OrderDetail Order "to-one" relationship
      operationId: RetrieveOrderfromOrderDetailOrder_0
      parameters:
      - name: include
        in: query
        description: Order relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Location,Customer,Employee,OrderList,OrderDetailList"
      - name: "fields[Order]"
        in: query
        description: Order fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CustomerId,EmployeeId,OrderDate,RequiredDate,ShippedDate,ShipVia,Freight,ShipName,ShipAddress,ShipCity,ShipRegion,ShipZip,ShipCountry,AmountTotal,Country,City,Ready,OrderDetailCount,CloneFromOrder"
      - name: OrderDetailId
        in: path
        description: OrderDetail item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDetail.Order_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - OrderDetail
      summary: Delete Order from OrderDetail.Order
      description: Delete Order items from the OrderDetail Order "to-one" relationship
      operationId: DeleteOrderfromOrderDetailOrder_0
      parameters:
      - name: OrderDetailId
        in: path
        description: OrderDetail item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: OrderDetail.Order POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderDetail.Order_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDetail.Order_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: OrderDetail.Order body
    patch:
      tags:
      - OrderDetail
      summary: Update OrderDetail.Order
      description: Update the OrderDetail Order "to-one" relationship
      operationId: UpdateOrderDetailOrder_0
      parameters:
      - name: OrderDetailId
        in: path
        description: OrderDetail item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: OrderDetail.Order POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderDetail.Order_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDetail.Order_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: OrderDetail.Order body
  /OrderDetail/{OrderDetailId}/Product:
    get:
      tags:
      - OrderDetail
      summary: Retrieve Product from OrderDetail.Product
      description: Retrieve Product items from the OrderDetail Product "to-one" relationship
      operationId: RetrieveProductfromOrderDetailProduct_0
      parameters:
      - name: include
        in: query
        description: Product relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Category,OrderDetailList"
      - name: "fields[Product]"
        in: query
        description: Product fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,ProductName,SupplierId,CategoryId,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued,UnitsShipped"
      - name: OrderDetailId
        in: path
        description: OrderDetail item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDetail.Product_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - OrderDetail
      summary: Delete Product from OrderDetail.Product
      description: Delete Product items from the OrderDetail Product "to-one" relationship
      operationId: DeleteProductfromOrderDetailProduct_0
      parameters:
      - name: OrderDetailId
        in: path
        description: OrderDetail item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: OrderDetail.Product POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderDetail.Product_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDetail.Product_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: OrderDetail.Product body
    patch:
      tags:
      - OrderDetail
      summary: Update OrderDetail.Product
      description: Update the OrderDetail Product "to-one" relationship
      operationId: UpdateOrderDetailProduct_0
      parameters:
      - name: OrderDetailId
        in: path
        description: OrderDetail item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: OrderDetail.Product POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OrderDetail.Product_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderDetail.Product_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: OrderDetail.Product body
  /Product/:
    get:
      tags:
      - Product
      summary: Retrieve a collection of Product objects
      description: Retrieve Product from Product
      operationId: RetrieveacollectionofProductobjects_0
      parameters:
      - name: include
        in: query
        description: Product relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Category,OrderDetailList"
      - name: "fields[Product]"
        in: query
        description: Product fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,ProductName,SupplierId,CategoryId,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued,UnitsShipped"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProductName]"
        in: query
        description: ProductName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[SupplierId]"
        in: query
        description: SupplierId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CategoryId]"
        in: query
        description: CategoryId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[QuantityPerUnit]"
        in: query
        description: QuantityPerUnit attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitPrice]"
        in: query
        description: UnitPrice attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitsInStock]"
        in: query
        description: UnitsInStock attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitsOnOrder]"
        in: query
        description: UnitsOnOrder attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReorderLevel]"
        in: query
        description: ReorderLevel attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Discontinued]"
        in: query
        description: Discontinued attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitsShipped]"
        in: query
        description: UnitsShipped attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Product filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Product_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Product
      summary: Create Product
      operationId: CreateProduct_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Product attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Product_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Product/{ProductId}/:
    get:
      tags:
      - Product
      summary: Retrieve Product instance
      description: Retrieve Product from Product
      operationId: RetrieveProductinstance_0
      parameters:
      - name: include
        in: query
        description: Product relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Category,OrderDetailList"
      - name: "fields[Product]"
        in: query
        description: Product fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,ProductName,SupplierId,CategoryId,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued,UnitsShipped"
      - name: ProductId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Product_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Product
      summary: Delete Product from Product
      operationId: DeleteProductfromProduct_0
      parameters:
      - name: ProductId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Product_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Product
      summary: Update Product
      description: Update Product attributes
      operationId: UpdateProduct_0
      parameters:
      - name: ProductId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Product attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Product_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Product/{ProductId}/Category:
    get:
      tags:
      - Product
      summary: Retrieve Category from Product.Category
      description: Retrieve Category items from the Product Category "to-one" relationship
      operationId: RetrieveCategoryfromProductCategory_0
      parameters:
      - name: include
        in: query
        description: Category relationships to include (csv)
        schema:
          type: string
          format: string
          default: ProductList
      - name: "fields[Category]"
        in: query
        description: Category fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CategoryName,Description,Client_id,S_CheckSum"
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product.Category_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Product
      summary: Delete Category from Product.Category
      description: Delete Category items from the Product Category "to-one" relationship
      operationId: DeleteCategoryfromProductCategory_0
      parameters:
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Product.Category POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product.Category_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product.Category_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Product.Category body
    patch:
      tags:
      - Product
      summary: Update Product.Category
      description: Update the Product Category "to-one" relationship
      operationId: UpdateProductCategory_0
      parameters:
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Product.Category POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product.Category_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product.Category_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Product.Category body
  /Product/{ProductId}/OrderDetailList:
    get:
      tags:
      - Product
      summary: Retrieve OrderDetail from Product.OrderDetailList
      description: Retrieve OrderDetail items from the Product OrderDetailList "to-many"
        relationship
      operationId: RetrieveOrderDetailfromProductOrderDetailList_0
      parameters:
      - name: include
        in: query
        description: OrderDetail relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Order,Product"
      - name: "fields[OrderDetail]"
        in: query
        description: OrderDetail fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,OrderId,ProductId,UnitPrice,Quantity,Discount,Amount,ShippedDate"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OrderId]"
        in: query
        description: OrderId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProductId]"
        in: query
        description: ProductId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnitPrice]"
        in: query
        description: UnitPrice attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Quantity]"
        in: query
        description: Quantity attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Discount]"
        in: query
        description: Discount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Amount]"
        in: query
        description: Amount attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ShippedDate]"
        in: query
        description: ShippedDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom OrderDetail filter
        schema:
          type: string
          format: string
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product.OrderDetailList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Product
      summary: Add OrderDetail items to Product.OrderDetailList
      description: Add OrderDetail items to the Product OrderDetailList "to-many"
        relationship
      operationId: AddOrderDetailitemstoProductOrderDetailList_0
      parameters:
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Product.OrderDetailList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product.OrderDetailList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Product.OrderDetailList body
    delete:
      tags:
      - Product
      summary: Delete OrderDetail from Product.OrderDetailList
      description: Delete OrderDetail items from the Product OrderDetailList "to-many"
        relationship
      operationId: DeleteOrderDetailfromProductOrderDetailList_0
      parameters:
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Product.OrderDetailList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product.OrderDetailList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product.OrderDetailList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Product.OrderDetailList body
    patch:
      tags:
      - Product
      summary: Update Product.OrderDetailList
      description: Update the Product OrderDetailList "to-many" relationship
      operationId: UpdateProductOrderDetailList_0
      parameters:
      - name: ProductId
        in: path
        description: Product item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Product.OrderDetailList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product.OrderDetailList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product.OrderDetailList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Product.OrderDetailList body
  /Region/:
    get:
      tags:
      - Region
      summary: Retrieve a collection of Region objects
      description: Retrieve Region from Region
      operationId: RetrieveacollectionofRegionobjects_0
      parameters:
      - name: include
        in: query
        description: Region relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[Region]"
        in: query
        description: Region fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,RegionDescription,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RegionDescription]"
        in: query
        description: RegionDescription attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Region filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Region_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Region
      summary: Create Region
      operationId: CreateRegion_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Region attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Region_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Region_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Region/{RegionId}/:
    get:
      tags:
      - Region
      summary: Retrieve Region instance
      description: Retrieve Region from Region
      operationId: RetrieveRegioninstance_0
      parameters:
      - name: include
        in: query
        description: Region relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[Region]"
        in: query
        description: Region fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,RegionDescription,S_CheckSum"
      - name: RegionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Region_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Region
      summary: Delete Region from Region
      operationId: DeleteRegionfromRegion_0
      parameters:
      - name: RegionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Region_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Region
      summary: Update Region
      description: Update Region attributes
      operationId: UpdateRegion_0
      parameters:
      - name: RegionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Region attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Region_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Region_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /SampleDBVersion/:
    get:
      tags:
      - SampleDBVersion
      summary: Retrieve a collection of SampleDBVersion objects
      description: Retrieve SampleDBVersion from SampleDBVersion
      operationId: RetrieveacollectionofSampleDBVersionobjects_0
      parameters:
      - name: include
        in: query
        description: SampleDBVersion relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[SampleDBVersion]"
        in: query
        description: SampleDBVersion fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Notes,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Notes]"
        in: query
        description: Notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom SampleDBVersion filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SampleDBVersion_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - SampleDBVersion
      summary: Create SampleDBVersion
      operationId: CreateSampleDBVersion_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: SampleDBVersion attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SampleDBVersion_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SampleDBVersion_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /SampleDBVersion/{SampleDBVersionId}/:
    get:
      tags:
      - SampleDBVersion
      summary: Retrieve SampleDBVersion instance
      description: Retrieve SampleDBVersion from SampleDBVersion
      operationId: RetrieveSampleDBVersioninstance_0
      parameters:
      - name: include
        in: query
        description: SampleDBVersion relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[SampleDBVersion]"
        in: query
        description: SampleDBVersion fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Notes,S_CheckSum"
      - name: SampleDBVersionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SampleDBVersion_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - SampleDBVersion
      summary: Delete SampleDBVersion from SampleDBVersion
      operationId: DeleteSampleDBVersionfromSampleDBVersion_0
      parameters:
      - name: SampleDBVersionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SampleDBVersion_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - SampleDBVersion
      summary: Update SampleDBVersion
      description: Update SampleDBVersion attributes
      operationId: UpdateSampleDBVersion_0
      parameters:
      - name: SampleDBVersionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: SampleDBVersion attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SampleDBVersion_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SampleDBVersion_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /ServicesEndPoint/:
    get:
      tags:
      - ServicesEndPoint
      summary: Retrieve a collection of ServicesEndPoint objects
      description: JA GET
      operationId: RetrieveacollectionofServicesEndPointobjects_0
      parameters:
      - name: include
        in: query
        description: ServicesEndPoint relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[ServicesEndPoint]"
        in: query
        description: ServicesEndPoint fields to include (csv)
        schema:
          type: string
          format: string
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom ServicesEndPoint filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ServicesEndPoint_coll1'
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - ServicesEndPoint
      summary: Create ServicesEndPoint
      operationId: CreateServicesEndPoint_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: ServicesEndPoint attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServicesEndPoint_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ServicesEndPoint_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /ServicesEndPoint/OrderB2B:
    post:
      tags:
      - ServicesEndPoint
      summary: Invoke ServicesEndPoint.OrderB2B
      description: Invoke ServicesEndPoint.OrderB2B
      operationId: InvokeServicesEndPointOrderB2B_0
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/post_ServicesEndPoint_OrderB2B'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_coll1'
      x-codegen-request-body-name: post_ServicesEndPoint_OrderB2B
  /ServicesEndPoint/add_order:
    post:
      tags:
      - ServicesEndPoint
      summary: Invoke ServicesEndPoint.add_order
      description: Invoke ServicesEndPoint.add_order
      operationId: InvokeServicesEndPointaddorder_0
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/post_ServicesEndPoint_add_order'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_coll1'
      x-codegen-request-body-name: post_ServicesEndPoint_add_order
  /ServicesEndPoint/add_order_by_id:
    post:
      tags:
      - ServicesEndPoint
      summary: Invoke ServicesEndPoint.add_order_by_id
      description: Invoke ServicesEndPoint.add_order_by_id
      operationId: InvokeServicesEndPointaddorderbyid_0
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/post_ServicesEndPoint_add_order_by_id'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_coll1'
      x-codegen-request-body-name: post_ServicesEndPoint_add_order_by_id
  /ServicesEndPoint/{ServicesEndPointId}/:
    get:
      tags:
      - ServicesEndPoint
      summary: Retrieve a ServicesEndPoint object
      description: JA GET
      operationId: RetrieveaServicesEndPointobject_0
      parameters:
      - name: include
        in: query
        description: ServicesEndPoint relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[ServicesEndPoint]"
        in: query
        description: ServicesEndPoint fields to include (csv)
        schema:
          type: string
          format: string
      - name: ServicesEndPointId
        in: path
        required: true
        schema:
          type: string
          default: "null"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ServicesEndPoint_inst1'
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - ServicesEndPoint
      summary: Called for a HTTP DELETE
      operationId: CalledforaHTTPDELETE_0
      parameters:
      - name: ServicesEndPointId
        in: path
        required: true
        schema:
          type: string
          default: "null"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - ServicesEndPoint
      summary: "description: JA PATCH"
      description: JA PATCH
      operationId: descriptionJAPATCH_0
      parameters:
      - name: ServicesEndPointId
        in: path
        required: true
        schema:
          type: string
          default: "null"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: ServicesEndPoint attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ServicesEndPoint_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ServicesEndPoint_inst1'
        "404":
          description: Nothing matches the given URI
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: PATCH body
  /Shipper/:
    get:
      tags:
      - Shipper
      summary: Retrieve a collection of Shipper objects
      description: Retrieve Shipper from Shipper
      operationId: RetrieveacollectionofShipperobjects_0
      parameters:
      - name: include
        in: query
        description: Shipper relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[Shipper]"
        in: query
        description: Shipper fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,Phone,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CompanyName]"
        in: query
        description: CompanyName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Phone]"
        in: query
        description: Phone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Shipper filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Shipper_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Shipper
      summary: Create Shipper
      operationId: CreateShipper_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Shipper attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Shipper_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Shipper_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Shipper/{ShipperId}/:
    get:
      tags:
      - Shipper
      summary: Retrieve Shipper instance
      description: Retrieve Shipper from Shipper
      operationId: RetrieveShipperinstance_0
      parameters:
      - name: include
        in: query
        description: Shipper relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[Shipper]"
        in: query
        description: Shipper fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,Phone,S_CheckSum"
      - name: ShipperId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Shipper_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Shipper
      summary: Delete Shipper from Shipper
      operationId: DeleteShipperfromShipper_0
      parameters:
      - name: ShipperId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Shipper_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Shipper
      summary: Update Shipper
      description: Update Shipper attributes
      operationId: UpdateShipper_0
      parameters:
      - name: ShipperId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Shipper attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Shipper_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Shipper_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Supplier/:
    get:
      tags:
      - Supplier
      summary: Retrieve a collection of Supplier objects
      description: Retrieve Supplier from Supplier
      operationId: RetrieveacollectionofSupplierobjects_0
      parameters:
      - name: include
        in: query
        description: Supplier relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[Supplier]"
        in: query
        description: Supplier fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax,HomePage,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[CompanyName]"
        in: query
        description: CompanyName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ContactName]"
        in: query
        description: ContactName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ContactTitle]"
        in: query
        description: ContactTitle attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Phone]"
        in: query
        description: Phone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Fax]"
        in: query
        description: Fax attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HomePage]"
        in: query
        description: HomePage attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Supplier filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Supplier_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Supplier
      summary: Create Supplier
      operationId: CreateSupplier_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Supplier attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Supplier_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Supplier_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Supplier/{SupplierId}/:
    get:
      tags:
      - Supplier
      summary: Retrieve Supplier instance
      description: Retrieve Supplier from Supplier
      operationId: RetrieveSupplierinstance_0
      parameters:
      - name: include
        in: query
        description: Supplier relationships to include (csv)
        schema:
          type: string
          format: string
      - name: "fields[Supplier]"
        in: query
        description: Supplier fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax,HomePage,S_CheckSum"
      - name: SupplierId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Supplier_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Supplier
      summary: Delete Supplier from Supplier
      operationId: DeleteSupplierfromSupplier_0
      parameters:
      - name: SupplierId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Supplier_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Supplier
      summary: Update Supplier
      description: Update Supplier attributes
      operationId: UpdateSupplier_0
      parameters:
      - name: SupplierId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Supplier attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Supplier_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Supplier_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Territory/:
    get:
      tags:
      - Territory
      summary: Retrieve a collection of Territory objects
      description: Retrieve Territory from Territory
      operationId: RetrieveacollectionofTerritoryobjects_0
      parameters:
      - name: include
        in: query
        description: Territory relationships to include (csv)
        schema:
          type: string
          format: string
          default: EmployeeTerritoryList
      - name: "fields[Territory]"
        in: query
        description: Territory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,TerritoryDescription,RegionId"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TerritoryDescription]"
        in: query
        description: TerritoryDescription attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[RegionId]"
        in: query
        description: RegionId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Territory filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Territory_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Territory
      summary: Create Territory
      operationId: CreateTerritory_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Territory attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Territory_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Territory_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Territory/{TerritoryId}/:
    get:
      tags:
      - Territory
      summary: Retrieve Territory instance
      description: Retrieve Territory from Territory
      operationId: RetrieveTerritoryinstance_0
      parameters:
      - name: include
        in: query
        description: Territory relationships to include (csv)
        schema:
          type: string
          format: string
          default: EmployeeTerritoryList
      - name: "fields[Territory]"
        in: query
        description: Territory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,TerritoryDescription,RegionId"
      - name: TerritoryId
        in: path
        required: true
        schema:
          type: string
          default: "01581"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Territory_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Territory
      summary: Delete Territory from Territory
      operationId: DeleteTerritoryfromTerritory_0
      parameters:
      - name: TerritoryId
        in: path
        required: true
        schema:
          type: string
          default: "01581"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Territory_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Territory
      summary: Update Territory
      description: Update Territory attributes
      operationId: UpdateTerritory_0
      parameters:
      - name: TerritoryId
        in: path
        required: true
        schema:
          type: string
          default: "01581"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Territory attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Territory_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Territory_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Territory/{TerritoryId}/EmployeeTerritoryList:
    get:
      tags:
      - Territory
      summary: Retrieve EmployeeTerritory from Territory.EmployeeTerritoryList
      description: Retrieve EmployeeTerritory items from the Territory EmployeeTerritoryList
        "to-many" relationship
      operationId: RetrieveEmployeeTerritoryfromTerritoryEmployeeTerritoryList_0
      parameters:
      - name: include
        in: query
        description: EmployeeTerritory relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Employee,Territory"
      - name: "fields[EmployeeTerritory]"
        in: query
        description: EmployeeTerritory fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,EmployeeId,TerritoryId"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeId]"
        in: query
        description: EmployeeId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TerritoryId]"
        in: query
        description: TerritoryId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom EmployeeTerritory filter
        schema:
          type: string
          format: string
      - name: TerritoryId
        in: path
        description: Territory item
        required: true
        schema:
          type: string
          default: "01581"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Territory.EmployeeTerritoryList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Territory
      summary: Add EmployeeTerritory items to Territory.EmployeeTerritoryList
      description: Add EmployeeTerritory items to the Territory EmployeeTerritoryList
        "to-many" relationship
      operationId: AddEmployeeTerritoryitemstoTerritoryEmployeeTerritoryList_0
      parameters:
      - name: TerritoryId
        in: path
        description: Territory item
        required: true
        schema:
          type: string
          default: "01581"
      requestBody:
        description: Territory.EmployeeTerritoryList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Territory.EmployeeTerritoryList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Territory.EmployeeTerritoryList body
    delete:
      tags:
      - Territory
      summary: Delete EmployeeTerritory from Territory.EmployeeTerritoryList
      description: Delete EmployeeTerritory items from the Territory EmployeeTerritoryList
        "to-many" relationship
      operationId: DeleteEmployeeTerritoryfromTerritoryEmployeeTerritoryList_0
      parameters:
      - name: TerritoryId
        in: path
        description: Territory item
        required: true
        schema:
          type: string
          default: "01581"
      requestBody:
        description: Territory.EmployeeTerritoryList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Territory.EmployeeTerritoryList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Territory.EmployeeTerritoryList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Territory.EmployeeTerritoryList body
    patch:
      tags:
      - Territory
      summary: Update Territory.EmployeeTerritoryList
      description: Update the Territory EmployeeTerritoryList "to-many" relationship
      operationId: UpdateTerritoryEmployeeTerritoryList_0
      parameters:
      - name: TerritoryId
        in: path
        description: Territory item
        required: true
        schema:
          type: string
          default: "01581"
      requestBody:
        description: Territory.EmployeeTerritoryList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Territory.EmployeeTerritoryList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Territory.EmployeeTerritoryList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Territory.EmployeeTerritoryList body
  /Union/:
    get:
      tags:
      - Union
      summary: Retrieve a collection of Union objects
      description: Retrieve Union from Union
      operationId: RetrieveacollectionofUnionobjects_0
      parameters:
      - name: include
        in: query
        description: Union relationships to include (csv)
        schema:
          type: string
          format: string
          default: EmployeeList
      - name: "fields[Union]"
        in: query
        description: Union fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Name"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Name]"
        in: query
        description: Name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Union filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Union_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Union
      summary: Create Union
      operationId: CreateUnion_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Union attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Union_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Union_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /Union/{UnionId}/:
    get:
      tags:
      - Union
      summary: Retrieve Union instance
      description: Retrieve Union from Union
      operationId: RetrieveUnioninstance_0
      parameters:
      - name: include
        in: query
        description: Union relationships to include (csv)
        schema:
          type: string
          format: string
          default: EmployeeList
      - name: "fields[Union]"
        in: query
        description: Union fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,Name"
      - name: UnionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Union_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - Union
      summary: Delete Union from Union
      operationId: DeleteUnionfromUnion_0
      parameters:
      - name: UnionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Union_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - Union
      summary: Update Union
      description: Update Union attributes
      operationId: UpdateUnion_0
      parameters:
      - name: UnionId
        in: path
        required: true
        schema:
          type: string
          default: "1"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Union attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Union_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Union_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /Union/{UnionId}/EmployeeList:
    get:
      tags:
      - Union
      summary: Retrieve Employee from Union.EmployeeList
      description: Retrieve Employee items from the Union EmployeeList "to-many" relationship
      operationId: RetrieveEmployeefromUnionEmployeeList_0
      parameters:
      - name: include
        in: query
        description: Employee relationships to include (csv)
        schema:
          type: string
          format: string
          default: "OnLoanDepartment,Union,WorksForDepartment,EmployeeAuditList,EmployeeTerritoryList,OrderList,Manager,Manages"
      - name: "fields[Employee]"
        in: query
        description: Employee fields to include (csv)
        schema:
          type: string
          format: string
          default: "Id,LastName,FirstName,Title,TitleOfCourtesy,BirthDate,HireDate,Address,City,Region,PostalCode,Country,HomePhone,Extension,Notes,ReportsTo,PhotoPath,EmployeeType,Salary,WorksForDepartmentId,OnLoanDepartmentId,UnionId,Dues,Email,__proper_salary__,ProperSalary"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[Id]"
        in: query
        description: Id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[LastName]"
        in: query
        description: LastName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[FirstName]"
        in: query
        description: FirstName attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Title]"
        in: query
        description: Title attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[TitleOfCourtesy]"
        in: query
        description: TitleOfCourtesy attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[BirthDate]"
        in: query
        description: BirthDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HireDate]"
        in: query
        description: HireDate attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Address]"
        in: query
        description: Address attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[City]"
        in: query
        description: City attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Region]"
        in: query
        description: Region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PostalCode]"
        in: query
        description: PostalCode attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Country]"
        in: query
        description: Country attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[HomePhone]"
        in: query
        description: HomePhone attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Extension]"
        in: query
        description: Extension attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Notes]"
        in: query
        description: Notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ReportsTo]"
        in: query
        description: ReportsTo attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[PhotoPath]"
        in: query
        description: PhotoPath attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[EmployeeType]"
        in: query
        description: EmployeeType attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Salary]"
        in: query
        description: Salary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[WorksForDepartmentId]"
        in: query
        description: WorksForDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[OnLoanDepartmentId]"
        in: query
        description: OnLoanDepartmentId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[UnionId]"
        in: query
        description: UnionId attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Dues]"
        in: query
        description: Dues attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[Email]"
        in: query
        description: Email attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[__proper_salary__]"
        in: query
        description: __proper_salary__ attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[ProperSalary]"
        in: query
        description: ProperSalary attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Employee filter
        schema:
          type: string
          format: string
      - name: UnionId
        in: path
        description: Union item
        required: true
        schema:
          type: string
          default: "1"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Union.EmployeeList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - Union
      summary: Add Employee items to Union.EmployeeList
      description: Add Employee items to the Union EmployeeList "to-many" relationship
      operationId: AddEmployeeitemstoUnionEmployeeList_0
      parameters:
      - name: UnionId
        in: path
        description: Union item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Union.EmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Union.EmployeeList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Union.EmployeeList body
    delete:
      tags:
      - Union
      summary: Delete Employee from Union.EmployeeList
      description: Delete Employee items from the Union EmployeeList "to-many" relationship
      operationId: DeleteEmployeefromUnionEmployeeList_0
      parameters:
      - name: UnionId
        in: path
        description: Union item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Union.EmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Union.EmployeeList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Union.EmployeeList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Union.EmployeeList body
    patch:
      tags:
      - Union
      summary: Update Union.EmployeeList
      description: Update the Union EmployeeList "to-many" relationship
      operationId: UpdateUnionEmployeeList_0
      parameters:
      - name: UnionId
        in: path
        description: Union item
        required: true
        schema:
          type: string
          default: "1"
      requestBody:
        description: Union.EmployeeList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Union.EmployeeList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Union.EmployeeList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Union.EmployeeList body
  /auth/login:
    post:
      tags:
      - auth
      summary: Authenticate User
      description: Creates an access token
      operationId: AuthLogin
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Category attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/auth_login'
        required: true
      responses:
        "200":
          description: Successful operation
          content: {}
        "401":
          description: Authentication Failed
          content: {}
      x-codegen-request-body-name: POST body
  /authentication-Api/:
    get:
      tags:
      - authentication-Api
      summary: Retrieve a collection of Api objects
      description: Retrieve Api from authentication-Api
      operationId: RetrieveacollectionofApiobjects_0
      parameters:
      - name: include
        in: query
        description: Api relationships to include (csv)
        schema:
          type: string
          format: string
          default: owner
      - name: "fields[Api]"
        in: query
        description: Api fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,connection_string,owner_id,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[name]"
        in: query
        description: name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[connection_string]"
        in: query
        description: connection_string attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[owner_id]"
        in: query
        description: owner_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Api filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Api_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-Api
      summary: Create Api
      operationId: CreateApi_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Api attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Api_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Api_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /authentication-Api/{ApiId}/:
    get:
      tags:
      - authentication-Api
      summary: Retrieve Api instance
      description: Retrieve Api from authentication-Api
      operationId: RetrieveApiinstance_0
      parameters:
      - name: include
        in: query
        description: Api relationships to include (csv)
        schema:
          type: string
          format: string
          default: owner
      - name: "fields[Api]"
        in: query
        description: Api fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,connection_string,owner_id,S_CheckSum"
      - name: ApiId
        in: path
        required: true
        schema:
          type: string
          default: "0"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Api_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-Api
      summary: Delete Api from authentication-Api
      operationId: DeleteApifromauthenticationApi_0
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          type: string
          default: "0"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Api_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - authentication-Api
      summary: Update Api
      description: Update Api attributes
      operationId: UpdateApi_0
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          type: string
          default: "0"
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Api attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Api_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Api_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /authentication-Api/{ApiId}/owner:
    get:
      tags:
      - authentication-Api
      summary: Retrieve User from Api.owner
      description: Retrieve User items from the Api owner "to-one" relationship
      operationId: RetrieveUserfromApiowner_0
      parameters:
      - name: include
        in: query
        description: User relationships to include (csv)
        schema:
          type: string
          format: string
          default: "ApiList,UserRoleList"
      - name: "fields[User]"
        in: query
        description: User fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,client_id,username,password_hash,region"
      - name: ApiId
        in: path
        description: Api item
        required: true
        schema:
          type: string
          default: "0"
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Api.owner_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-Api
      summary: Delete User from Api.owner
      description: Delete User items from the Api owner "to-one" relationship
      operationId: DeleteUserfromApiowner_0
      parameters:
      - name: ApiId
        in: path
        description: Api item
        required: true
        schema:
          type: string
          default: "0"
      requestBody:
        description: Api.owner POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Api.owner_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Api.owner_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Api.owner body
    patch:
      tags:
      - authentication-Api
      summary: Update Api.owner
      description: Update the Api owner "to-one" relationship
      operationId: UpdateApiowner_0
      parameters:
      - name: ApiId
        in: path
        description: Api item
        required: true
        schema:
          type: string
          default: "0"
      requestBody:
        description: Api.owner POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Api.owner_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Api.owner_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Api.owner body
  /authentication-Role/:
    get:
      tags:
      - authentication-Role
      summary: Retrieve a collection of Role objects
      description: Retrieve Role from authentication-Role
      operationId: RetrieveacollectionofRoleobjects_0
      parameters:
      - name: include
        in: query
        description: Role relationships to include (csv)
        schema:
          type: string
          format: string
          default: UserRoleList
      - name: "fields[Role]"
        in: query
        description: Role fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[name]"
        in: query
        description: name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Role filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Role_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-Role
      summary: Create Role
      operationId: CreateRole_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Role attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Role_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Role_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /authentication-Role/{RoleId}/:
    get:
      tags:
      - authentication-Role
      summary: Retrieve Role instance
      description: Retrieve Role from authentication-Role
      operationId: RetrieveRoleinstance_0
      parameters:
      - name: include
        in: query
        description: Role relationships to include (csv)
        schema:
          type: string
          format: string
          default: UserRoleList
      - name: "fields[Role]"
        in: query
        description: Role fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,S_CheckSum"
      - name: RoleId
        in: path
        required: true
        schema:
          type: string
          default: tenant
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Role_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-Role
      summary: Delete Role from authentication-Role
      operationId: DeleteRolefromauthenticationRole_0
      parameters:
      - name: RoleId
        in: path
        required: true
        schema:
          type: string
          default: tenant
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Role_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - authentication-Role
      summary: Update Role
      description: Update Role attributes
      operationId: UpdateRole_0
      parameters:
      - name: RoleId
        in: path
        required: true
        schema:
          type: string
          default: tenant
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: Role attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Role_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Role_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /authentication-Role/{RoleId}/UserRoleList:
    get:
      tags:
      - authentication-Role
      summary: Retrieve UserRole from Role.UserRoleList
      description: Retrieve UserRole items from the Role UserRoleList "to-many" relationship
      operationId: RetrieveUserRolefromRoleUserRoleList_0
      parameters:
      - name: include
        in: query
        description: UserRole relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Role,user"
      - name: "fields[UserRole]"
        in: query
        description: UserRole fields to include (csv)
        schema:
          type: string
          format: string
          default: "user_id,notes,role_name"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[user_id]"
        in: query
        description: user_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[notes]"
        in: query
        description: notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[role_name]"
        in: query
        description: role_name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom UserRole filter
        schema:
          type: string
          format: string
      - name: RoleId
        in: path
        description: Role item
        required: true
        schema:
          type: string
          default: tenant
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role.UserRoleList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-Role
      summary: Add UserRole items to Role.UserRoleList
      description: Add UserRole items to the Role UserRoleList "to-many" relationship
      operationId: AddUserRoleitemstoRoleUserRoleList_0
      parameters:
      - name: RoleId
        in: path
        description: Role item
        required: true
        schema:
          type: string
          default: tenant
      requestBody:
        description: Role.UserRoleList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Role.UserRoleList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Role.UserRoleList body
    delete:
      tags:
      - authentication-Role
      summary: Delete UserRole from Role.UserRoleList
      description: Delete UserRole items from the Role UserRoleList "to-many" relationship
      operationId: DeleteUserRolefromRoleUserRoleList_0
      parameters:
      - name: RoleId
        in: path
        description: Role item
        required: true
        schema:
          type: string
          default: tenant
      requestBody:
        description: Role.UserRoleList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Role.UserRoleList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role.UserRoleList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: Role.UserRoleList body
    patch:
      tags:
      - authentication-Role
      summary: Update Role.UserRoleList
      description: Update the Role UserRoleList "to-many" relationship
      operationId: UpdateRoleUserRoleList_0
      parameters:
      - name: RoleId
        in: path
        description: Role item
        required: true
        schema:
          type: string
          default: tenant
      requestBody:
        description: Role.UserRoleList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Role.UserRoleList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Role.UserRoleList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: Role.UserRoleList body
  /authentication-User/:
    get:
      tags:
      - authentication-User
      summary: Retrieve a collection of User objects
      description: Retrieve User from authentication-User
      operationId: RetrieveacollectionofUserobjects_0
      parameters:
      - name: include
        in: query
        description: User relationships to include (csv)
        schema:
          type: string
          format: string
          default: "ApiList,UserRoleList"
      - name: "fields[User]"
        in: query
        description: User fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,client_id,username,password_hash,region"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[name]"
        in: query
        description: name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[client_id]"
        in: query
        description: client_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[username]"
        in: query
        description: username attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[password_hash]"
        in: query
        description: password_hash attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[region]"
        in: query
        description: region attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom User filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-User
      summary: Create User
      operationId: CreateUser_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: User attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /authentication-User/login:
    post:
      tags:
      - authentication-User
      summary: Invoke User.login
      description: Login - Generate a JWT access token
      operationId: InvokeUserlogin_0
      requestBody:
        description: Login - Generate a JWT access token
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/post_User_login'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Role_coll1'
      x-codegen-request-body-name: post_User_login
  /authentication-User/{UserId}/:
    get:
      tags:
      - authentication-User
      summary: Retrieve User instance
      description: Retrieve User from authentication-User
      operationId: RetrieveUserinstance_0
      parameters:
      - name: include
        in: query
        description: User relationships to include (csv)
        schema:
          type: string
          format: string
          default: "ApiList,UserRoleList"
      - name: "fields[User]"
        in: query
        description: User fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,client_id,username,password_hash,region"
      - name: UserId
        in: path
        required: true
        schema:
          type: string
          default: u2
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-User
      summary: Delete User from authentication-User
      operationId: DeleteUserfromauthenticationUser_0
      parameters:
      - name: UserId
        in: path
        required: true
        schema:
          type: string
          default: u2
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - authentication-User
      summary: Update User
      description: Update User attributes
      operationId: UpdateUser_0
      parameters:
      - name: UserId
        in: path
        required: true
        schema:
          type: string
          default: u2
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: User attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /authentication-User/{UserId}/ApiList:
    get:
      tags:
      - authentication-User
      summary: Retrieve Api from User.ApiList
      description: Retrieve Api items from the User ApiList "to-many" relationship
      operationId: RetrieveApifromUserApiList_0
      parameters:
      - name: include
        in: query
        description: Api relationships to include (csv)
        schema:
          type: string
          format: string
          default: owner
      - name: "fields[Api]"
        in: query
        description: Api fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,connection_string,owner_id,S_CheckSum"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[name]"
        in: query
        description: name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[connection_string]"
        in: query
        description: connection_string attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[owner_id]"
        in: query
        description: owner_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[S_CheckSum]"
        in: query
        description: S_CheckSum attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom Api filter
        schema:
          type: string
          format: string
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User.ApiList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-User
      summary: Add Api items to User.ApiList
      description: Add Api items to the User ApiList "to-many" relationship
      operationId: AddApiitemstoUserApiList_0
      parameters:
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      requestBody:
        description: User.ApiList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User.ApiList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: User.ApiList body
    delete:
      tags:
      - authentication-User
      summary: Delete Api from User.ApiList
      description: Delete Api items from the User ApiList "to-many" relationship
      operationId: DeleteApifromUserApiList_0
      parameters:
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      requestBody:
        description: User.ApiList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User.ApiList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User.ApiList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: User.ApiList body
    patch:
      tags:
      - authentication-User
      summary: Update User.ApiList
      description: Update the User ApiList "to-many" relationship
      operationId: UpdateUserApiList_0
      parameters:
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      requestBody:
        description: User.ApiList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User.ApiList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User.ApiList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: User.ApiList body
  /authentication-User/{UserId}/UserRoleList:
    get:
      tags:
      - authentication-User
      summary: Retrieve UserRole from User.UserRoleList
      description: Retrieve UserRole items from the User UserRoleList "to-many" relationship
      operationId: RetrieveUserRolefromUserUserRoleList_0
      parameters:
      - name: include
        in: query
        description: UserRole relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Role,user"
      - name: "fields[UserRole]"
        in: query
        description: UserRole fields to include (csv)
        schema:
          type: string
          format: string
          default: "user_id,notes,role_name"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[user_id]"
        in: query
        description: user_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[notes]"
        in: query
        description: notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[role_name]"
        in: query
        description: role_name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom UserRole filter
        schema:
          type: string
          format: string
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User.UserRoleList_rel_coll'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-User
      summary: Add UserRole items to User.UserRoleList
      description: Add UserRole items to the User UserRoleList "to-many" relationship
      operationId: AddUserRoleitemstoUserUserRoleList_0
      parameters:
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      requestBody:
        description: User.UserRoleList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User.UserRoleList_rel_coll'
        required: true
      responses:
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: User.UserRoleList body
    delete:
      tags:
      - authentication-User
      summary: Delete UserRole from User.UserRoleList
      description: Delete UserRole items from the User UserRoleList "to-many" relationship
      operationId: DeleteUserRolefromUserUserRoleList_0
      parameters:
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      requestBody:
        description: User.UserRoleList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User.UserRoleList_rel_coll'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User.UserRoleList_rel_coll'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: User.UserRoleList body
    patch:
      tags:
      - authentication-User
      summary: Update User.UserRoleList
      description: Update the User UserRoleList "to-many" relationship
      operationId: UpdateUserUserRoleList_0
      parameters:
      - name: UserId
        in: path
        description: User item
        required: true
        schema:
          type: string
          default: u2
      requestBody:
        description: User.UserRoleList POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User.UserRoleList_rel_coll'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User.UserRoleList_rel_coll'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: User.UserRoleList body
  /authentication-UserRole/:
    get:
      tags:
      - authentication-UserRole
      summary: Retrieve a collection of UserRole objects
      description: Retrieve UserRole from authentication-UserRole
      operationId: RetrieveacollectionofUserRoleobjects_0
      parameters:
      - name: include
        in: query
        description: UserRole relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Role,user"
      - name: "fields[UserRole]"
        in: query
        description: UserRole fields to include (csv)
        schema:
          type: string
          format: string
          default: "user_id,notes,role_name"
      - name: "page[offset]"
        in: query
        description: Page offset
        schema:
          type: integer
          format: int64
          default: 0
      - name: "page[limit]"
        in: query
        description: Max number of items
        schema:
          type: integer
          format: int64
          default: 10
      - name: sort
        in: query
        description: Sort order
        schema:
          type: string
          format: string
          default: id
      - name: "filter[user_id]"
        in: query
        description: user_id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[notes]"
        in: query
        description: notes attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[role_name]"
        in: query
        description: role_name attribute filter (csv)
        schema:
          type: string
          format: string
      - name: "filter[id]"
        in: query
        description: id attribute filter (csv)
        schema:
          type: string
          format: string
      - name: filter
        in: query
        description: Custom UserRole filter
        schema:
          type: string
          format: string
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_coll1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    post:
      tags:
      - authentication-UserRole
      summary: Create UserRole
      operationId: CreateUserRole_0
      parameters:
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: UserRole attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRole_inst1'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_inst1'
        "202":
          description: Accepted
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: POST body
  /authentication-UserRole/{UserRoleId}/:
    get:
      tags:
      - authentication-UserRole
      summary: Retrieve UserRole instance
      description: Retrieve UserRole from authentication-UserRole
      operationId: RetrieveUserRoleinstance_0
      parameters:
      - name: include
        in: query
        description: UserRole relationships to include (csv)
        schema:
          type: string
          format: string
          default: "Role,user"
      - name: "fields[UserRole]"
        in: query
        description: UserRole fields to include (csv)
        schema:
          type: string
          format: string
          default: "user_id,notes,role_name"
      - name: UserRoleId
        in: path
        required: true
        schema:
          type: string
          default: aneu_tenant
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_inst1'
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-UserRole
      summary: Delete UserRole from authentication-UserRole
      operationId: DeleteUserRolefromauthenticationUserRole_0
      parameters:
      - name: UserRoleId
        in: path
        required: true
        schema:
          type: string
          default: aneu_tenant
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      responses:
        "200":
          description: Success
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    patch:
      tags:
      - authentication-UserRole
      summary: Update UserRole
      description: Update UserRole attributes
      operationId: UpdateUserRole_0
      parameters:
      - name: UserRoleId
        in: path
        required: true
        schema:
          type: string
          default: aneu_tenant
      - name: Content-Type
        in: header
        required: true
        schema:
          type: string
          default: application/vnd.api+json
          enum:
          - application/vnd.api+json
          - application/json
      requestBody:
        description: UserRole attributes
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRole_inst'
        required: true
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/UserRole_inst1'
        "202":
          description: Accepted
          content: {}
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: PATCH body
  /authentication-UserRole/{UserRoleId}/Role:
    get:
      tags:
      - authentication-UserRole
      summary: Retrieve Role from UserRole.Role
      description: Retrieve Role items from the UserRole Role "to-one" relationship
      operationId: RetrieveRolefromUserRoleRole_0
      parameters:
      - name: include
        in: query
        description: Role relationships to include (csv)
        schema:
          type: string
          format: string
          default: UserRoleList
      - name: "fields[Role]"
        in: query
        description: Role fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,S_CheckSum"
      - name: UserRoleId
        in: path
        description: UserRole item
        required: true
        schema:
          type: string
          default: aneu_tenant
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRole.Role_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-UserRole
      summary: Delete Role from UserRole.Role
      description: Delete Role items from the UserRole Role "to-one" relationship
      operationId: DeleteRolefromUserRoleRole_0
      parameters:
      - name: UserRoleId
        in: path
        description: UserRole item
        required: true
        schema:
          type: string
          default: aneu_tenant
      requestBody:
        description: UserRole.Role POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRole.Role_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRole.Role_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: UserRole.Role body
    patch:
      tags:
      - authentication-UserRole
      summary: Update UserRole.Role
      description: Update the UserRole Role "to-one" relationship
      operationId: UpdateUserRoleRole_0
      parameters:
      - name: UserRoleId
        in: path
        description: UserRole item
        required: true
        schema:
          type: string
          default: aneu_tenant
      requestBody:
        description: UserRole.Role POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRole.Role_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRole.Role_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: UserRole.Role body
  /authentication-UserRole/{UserRoleId}/user:
    get:
      tags:
      - authentication-UserRole
      summary: Retrieve User from UserRole.user
      description: Retrieve User items from the UserRole user "to-one" relationship
      operationId: RetrieveUserfromUserRoleuser_0
      parameters:
      - name: include
        in: query
        description: User relationships to include (csv)
        schema:
          type: string
          format: string
          default: "ApiList,UserRoleList"
      - name: "fields[User]"
        in: query
        description: User fields to include (csv)
        schema:
          type: string
          format: string
          default: "name,client_id,username,password_hash,region"
      - name: UserRoleId
        in: path
        description: UserRole item
        required: true
        schema:
          type: string
          default: aneu_tenant
      responses:
        "200":
          description: "Request fulfilled, document follows"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRole.user_rel_inst'
        "404":
          description: Nothing matches the given URI
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
    delete:
      tags:
      - authentication-UserRole
      summary: Delete User from UserRole.user
      description: Delete User items from the UserRole user "to-one" relationship
      operationId: DeleteUserfromUserRoleuser_0
      parameters:
      - name: UserRoleId
        in: path
        description: UserRole item
        required: true
        schema:
          type: string
          default: aneu_tenant
      requestBody:
        description: UserRole.user POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRole.user_rel_inst'
        required: true
      responses:
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRole.user_rel_inst'
        "202":
          description: Accepted
          content: {}
        "204":
          description: "Request fulfilled, nothing follows"
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
      x-codegen-request-body-name: UserRole.user body
    patch:
      tags:
      - authentication-UserRole
      summary: Update UserRole.user
      description: Update the UserRole user "to-one" relationship
      operationId: UpdateUserRoleuser_0
      parameters:
      - name: UserRoleId
        in: path
        description: UserRole item
        required: true
        schema:
          type: string
          default: aneu_tenant
      requestBody:
        description: UserRole.user POST model
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserRole.user_rel_inst'
        required: true
      responses:
        "200":
          description: Accepted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserRole.user_rel_inst'
        "204":
          description: No Content
          content: {}
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_403'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_404'
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/jsonapi_error_409'
      x-codegen-request-body-name: UserRole.user body
components:
  schemas:
    auth_login:
      type: object
      properties:
        username:
          type: string
          example: u1
        password:
          type: string
          example: p
      description: authentication payload
    jsonapi_error_403:
      type: object
      properties:
        errors:
          type: string
          example: ""
      description: ""
    jsonapi_error_404:
      type: object
      properties:
        errors:
          type: string
          example: ""
      description: ""
    Category_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Category get;
    Category_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Category post;
    jsonapi_error_409:
      type: object
      properties:
        errors:
          type: string
          example: ""
      description: ""
    Category_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Category patch;Category post;Category delete;Category patch;Category
        post;Category delete;
    Category.ProductList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Category.ProductList patch relationship;Category.ProductList post
        relationship;
    Category_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Customer_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Customer get;
    Customer_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Customer post;
    Customer_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Customer patch;Customer post;Customer delete;Customer patch;Customer
        post;Customer delete;
    Customer.OrderList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Customer.OrderList patch relationship;Customer.OrderList post relationship;
    Customer_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    CustomerDemographic_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: CustomerDemographic get;
    CustomerDemographic_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: CustomerDemographic post;
    CustomerDemographic_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: CustomerDemographic patch;CustomerDemographic post;CustomerDemographic
        delete;CustomerDemographic patch;CustomerDemographic post;CustomerDemographic
        delete;
    CustomerDemographic_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Department_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department get;
    Department_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department post;
    Department_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department patch;Department post;Department delete;Department patch;Department
        post;Department delete;
    Department.Department_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department.Department patch relationship;Department.Department
        post relationship;
    Department.DepartmentList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department.DepartmentList patch relationship;Department.DepartmentList
        post relationship;
    Department.EmployeeList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department.EmployeeList patch relationship;Department.EmployeeList
        post relationship;
    Department.WorksForEmployeeList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Department.WorksForEmployeeList patch relationship;Department.WorksForEmployeeList
        post relationship;
    Department_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Employee_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee get;
    Employee_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee post;
    Employee_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee patch;Employee post;Employee delete;Employee patch;Employee
        post;Employee delete;
    Employee.OnLoanDepartment_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.OnLoanDepartment patch relationship;Employee.OnLoanDepartment
        post relationship;
    Employee.Union_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.Union patch relationship;Employee.Union post relationship;
    Employee.WorksForDepartment_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.WorksForDepartment patch relationship;Employee.WorksForDepartment
        post relationship;
    Employee.EmployeeAuditList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.EmployeeAuditList patch relationship;Employee.EmployeeAuditList
        post relationship;
    Employee.EmployeeTerritoryList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.EmployeeTerritoryList patch relationship;Employee.EmployeeTerritoryList
        post relationship;
    Employee.OrderList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.OrderList patch relationship;Employee.OrderList post relationship;
    Employee.Manager_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.Manager patch relationship;Employee.Manager post relationship;
    Employee.Manages_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Employee.Manages patch relationship;Employee.Manages post relationship;
    Employee_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    EmployeeAudit_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeAudit get;
    EmployeeAudit_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeAudit post;
    EmployeeAudit_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeAudit patch;EmployeeAudit post;EmployeeAudit delete;EmployeeAudit
        patch;EmployeeAudit post;EmployeeAudit delete;
    EmployeeAudit.Employee_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeAudit.Employee patch relationship;EmployeeAudit.Employee
        post relationship;
    EmployeeAudit_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    EmployeeTerritory_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeTerritory get;
    EmployeeTerritory_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeTerritory post;
    EmployeeTerritory_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeTerritory patch;EmployeeTerritory post;EmployeeTerritory
        delete;EmployeeTerritory patch;EmployeeTerritory post;EmployeeTerritory delete;
    EmployeeTerritory.Employee_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeTerritory.Employee patch relationship;EmployeeTerritory.Employee
        post relationship;
    EmployeeTerritory.Territory_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: EmployeeTerritory.Territory patch relationship;EmployeeTerritory.Territory
        post relationship;
    EmployeeTerritory_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Location_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Location get;
    Location_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Location post;
    Location_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Location patch;Location post;Location delete;Location patch;Location
        post;Location delete;
    Location.OrderList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Location.OrderList patch relationship;Location.OrderList post relationship;
    Location_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Order_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order get;
    Order_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order post;
    Order_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order patch;Order post;Order delete;Order patch;Order post;Order
        delete;
    Order.Order_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order.Order patch relationship;Order.Order post relationship;
    Order.Location_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order.Location patch relationship;Order.Location post relationship;
    Order.Customer_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order.Customer patch relationship;Order.Customer post relationship;
    Order.Employee_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order.Employee patch relationship;Order.Employee post relationship;
    Order.OrderList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order.OrderList patch relationship;Order.OrderList post relationship;
    Order.OrderDetailList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Order.OrderDetailList patch relationship;Order.OrderDetailList
        post relationship;
    Order_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    OrderDetail_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: OrderDetail get;
    OrderDetail_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: OrderDetail post;
    OrderDetail_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: OrderDetail patch;OrderDetail post;OrderDetail delete;OrderDetail
        patch;OrderDetail post;OrderDetail delete;
    OrderDetail.Order_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: OrderDetail.Order patch relationship;OrderDetail.Order post relationship;
    OrderDetail.Product_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: OrderDetail.Product patch relationship;OrderDetail.Product post
        relationship;
    OrderDetail_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Product_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Product get;
    Product_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Product post;
    Product_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Product patch;Product post;Product delete;Product patch;Product
        post;Product delete;
    Product.Category_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Product.Category patch relationship;Product.Category post relationship;
    Product.OrderDetailList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Product.OrderDetailList patch relationship;Product.OrderDetailList
        post relationship;
    Product_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Region_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Region get;
    Region_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Region post;
    Region_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Region patch;Region post;Region delete;Region patch;Region post;Region
        delete;
    Region_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    SampleDBVersion_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: SampleDBVersion get;
    SampleDBVersion_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: SampleDBVersion post;
    SampleDBVersion_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: SampleDBVersion patch;SampleDBVersion post;SampleDBVersion delete;SampleDBVersion
        patch;SampleDBVersion post;SampleDBVersion delete;
    SampleDBVersion_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Shipper_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Shipper get;
    Shipper_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Shipper post;
    Shipper_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Shipper patch;Shipper post;Shipper delete;Shipper patch;Shipper
        post;Shipper delete;
    Shipper_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Supplier_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Supplier get;
    Supplier_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Supplier post;
    Supplier_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Supplier patch;Supplier post;Supplier delete;Supplier patch;Supplier
        post;Supplier delete;
    Supplier_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Territory_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Territory get;
    Territory_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Territory post;
    Territory_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Territory patch;Territory post;Territory delete;Territory patch;Territory
        post;Territory delete;
    Territory.EmployeeTerritoryList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Territory.EmployeeTerritoryList patch relationship;Territory.EmployeeTerritoryList
        post relationship;
    Territory_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Union_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Union get;
    Union_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Union post;
    Union_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Union patch;Union post;Union delete;Union patch;Union post;Union
        delete;
    Union.EmployeeList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Union.EmployeeList patch relationship;Union.EmployeeList post relationship;
    Union_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Api_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Api get;
    Api_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Api post;
    Api_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Api patch;Api post;Api delete;Api patch;Api post;Api delete;
    Api.owner_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Api.owner patch relationship;Api.owner post relationship;
    Api_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    Role_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Role get;
    Role_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Role post;
    Role_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Role patch;Role post;Role delete;Role patch;Role post;Role delete;
    Role.UserRoleList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: Role.UserRoleList patch relationship;Role.UserRoleList post relationship;
    Role_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    post_User_login:
      type: object
      properties:
        username:
          type: object
          example: user
        password:
          type: object
          example: password
      description: ""
    User_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: User get;
    User_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: User post;
    User_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: User patch;User post;User delete;User patch;User post;User delete;
    User.ApiList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: User.ApiList patch relationship;User.ApiList post relationship;
    User.UserRoleList_rel_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: User.UserRoleList patch relationship;User.UserRoleList post relationship;
    Invoke _User_login:
      type: object
    User_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    UserRole_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: UserRole get;
    UserRole_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: UserRole post;
    UserRole_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: UserRole patch;UserRole post;UserRole delete;UserRole patch;UserRole
        post;UserRole delete;
    UserRole.Role_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: UserRole.Role patch relationship;UserRole.Role post relationship;
    UserRole.user_rel_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: UserRole.user patch relationship;UserRole.user post relationship;
    UserRole_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    post_ServicesEndPoint_OrderB2B:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ServicesEndPoint_OrderB2B'
      description: ""
    ServicesEndPoint_OrderB2B:
      type: object
      properties:
        method:
          type: string
          example: OrderB2B
        args:
          type: string
          example: ""
      description: ""
    post_ServicesEndPoint_add_order:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ServicesEndPoint_add_order'
      description: ""
    ServicesEndPoint_add_order:
      type: object
      properties:
        method:
          type: string
          example: add_order
        args:
          type: string
          example: ""
      description: ""
    post_ServicesEndPoint_add_order_by_id:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ServicesEndPoint_add_order_by_id'
      description: ""
    ServicesEndPoint_add_order_by_id:
      type: object
      properties:
        method:
          type: string
          example: add_order_by_id
        args:
          type: string
          example: ""
      description: ""
    ServicesEndPoint_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: ServicesEndPoint get;
    ServicesEndPoint_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: ServicesEndPoint post;
    ServicesEndPoint_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: ServicesEndPoint patch;ServicesEndPoint post;ServicesEndPoint delete;ServicesEndPoint
        patch;ServicesEndPoint post;ServicesEndPoint delete;
    Invoke _ServicesEndPoint_OrderB2B:
      type: object
    Invoke _ServicesEndPoint_add_order:
      type: object
    Invoke _ServicesEndPoint_add_order_by_id:
      type: object
    ServicesEndPoint_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
    post_CategoriesEndPoint_get_cats:
      type: object
      description: ""
    CategoriesEndPoint_coll1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: CategoriesEndPoint get;
    CategoriesEndPoint_inst1:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: CategoriesEndPoint post;
    CategoriesEndPoint_inst:
      type: object
      properties:
        data:
          type: string
          example: ""
      description: CategoriesEndPoint patch;CategoriesEndPoint post;CategoriesEndPoint
        delete;CategoriesEndPoint patch;CategoriesEndPoint post;CategoriesEndPoint
        delete;
    Invoke _CategoriesEndPoint_get_cats:
      type: object
    CategoriesEndPoint_coll:
      type: object
      properties:
        data:
          type: string
          example: ""
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
x-original-swagger-version: "2.0"
